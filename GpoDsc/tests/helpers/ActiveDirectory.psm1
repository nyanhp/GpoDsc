# Name: ActiveDirectory
# Version: 1.0.1.0
# CreatedOn: 2023-05-23 11:03:20Z

Add-Type -IgnoreWarnings -TypeDefinition @'
namespace Microsoft.ActiveDirectory.Management
{
    public class ADAccount
    {
        // Constructor
        public ADAccount() { }
        public ADAccount(System.String identity) { }
        public ADAccount(System.Security.Principal.SecurityIdentifier sid) { }
        public ADAccount(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        public ADAccount(System.Guid guid) { }
        
        // Property
        public System.String UserPrincipalName { get; set; }
        public System.Boolean Enabled { get; set; }
        public System.String SamAccountName { get; set; }
        public System.Security.Principal.SecurityIdentifier SID { get; set; }
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADAuthenticationPolicy
    {
        // Constructor
        public ADAuthenticationPolicy() { }
        public ADAuthenticationPolicy(System.String identity) { }
        public ADAuthenticationPolicy(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        public ADAuthenticationPolicy(System.Guid guid) { }
        
        // Property
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADAuthenticationPolicySilo
    {
        // Constructor
        public ADAuthenticationPolicySilo() { }
        public ADAuthenticationPolicySilo(System.String identity) { }
        public ADAuthenticationPolicySilo(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        public ADAuthenticationPolicySilo(System.Guid guid) { }
        
        // Property
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public enum ADAuthType : int
    {
        Negotiate = 0,
        Basic = 1,
    }
    
    public class ADCentralAccessPolicy
    {
        // Constructor
        public ADCentralAccessPolicy() { }
        public ADCentralAccessPolicy(System.String identity) { }
        public ADCentralAccessPolicy(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        public ADCentralAccessPolicy(System.Guid guid) { }
        
        // Property
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADCentralAccessRule
    {
        // Constructor
        public ADCentralAccessRule() { }
        public ADCentralAccessRule(System.String identity) { }
        public ADCentralAccessRule(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        public ADCentralAccessRule(System.Guid guid) { }
        
        // Property
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADClaimTransformPolicy
    {
        // Constructor
        public ADClaimTransformPolicy() { }
        public ADClaimTransformPolicy(System.String identity) { }
        public ADClaimTransformPolicy(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        public ADClaimTransformPolicy(System.Guid guid) { }
        
        // Property
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADClaimType
    {
        // Constructor
        public ADClaimType() { }
        public ADClaimType(System.String identity) { }
        public ADClaimType(Microsoft.ActiveDirectory.Management.ADClaimTypeBase identity) { }
        public ADClaimType(System.Guid guid) { }
        
        // Property
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADClaimTypeBase
    {
        public bool IsSecondaryStubType = true;
        
        public ADClaimTypeBase() { }
    }
    
    public enum ADClaimValueType : long
    {
        Invalid = 0,
        Int64 = 1,
        UInt64 = 2,
        String = 3,
        FQBN = 4,
        SID = 5,
        Boolean = 6,
        OctetString = 16,
    }
    
    public class ADComputer
    {
        // Constructor
        public ADComputer() { }
        public ADComputer(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        public ADComputer(System.String identity) { }
        public ADComputer(System.Security.Principal.SecurityIdentifier sid) { }
        public ADComputer(System.Guid guid) { }
        
        // Property
        public System.String DNSHostName { get; set; }
        public System.String UserPrincipalName { get; set; }
        public System.Boolean Enabled { get; set; }
        public System.String SamAccountName { get; set; }
        public System.Security.Principal.SecurityIdentifier SID { get; set; }
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADDefaultDomainPasswordPolicy
    {
        // Constructor
        public ADDefaultDomainPasswordPolicy() { }
        public ADDefaultDomainPasswordPolicy(System.String identity) { }
        public ADDefaultDomainPasswordPolicy(System.Guid guid) { }
        public ADDefaultDomainPasswordPolicy(Microsoft.ActiveDirectory.Management.ADEntity adentity) { }
        
        // Property
        public System.Nullable<System.TimeSpan> LockoutDuration { get; set; }
        public System.Nullable<System.TimeSpan> LockoutObservationWindow { get; set; }
        public System.Nullable<System.Int32> LockoutThreshold { get; set; }
        public System.Nullable<System.TimeSpan> MaxPasswordAge { get; set; }
        public System.Nullable<System.TimeSpan> MinPasswordAge { get; set; }
        public System.Nullable<System.Int32> MinPasswordLength { get; set; }
        public System.Nullable<System.Int32> PasswordHistoryCount { get; set; }
        public System.Nullable<System.Boolean> ComplexityEnabled { get; set; }
        public System.Nullable<System.Boolean> ReversibleEncryptionEnabled { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADDirectoryServer
    {
        // Constructor
        public ADDirectoryServer() { }
        public ADDirectoryServer(System.String identity) { }
        public ADDirectoryServer(System.Guid guid) { }
        public ADDirectoryServer(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        
        // Property
        public System.String Name { get; set; }
        public System.String Site { get; set; }
        public System.String IPv4Address { get; set; }
        public System.String IPv6Address { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADDomain
    {
        // Constructor
        public ADDomain() { }
        public ADDomain(System.String identity) { }
        public ADDomain(System.Security.Principal.SecurityIdentifier sid) { }
        public ADDomain(Microsoft.ActiveDirectory.Management.ADObject adobject) { }
        public ADDomain(System.Guid guid) { }
        
        // Property
        public System.Security.Principal.SecurityIdentifier DomainSID { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection AllowedDNSSuffixes { get; set; }
        public System.Nullable<System.TimeSpan> LastLogonReplicationInterval { get; set; }
        public System.Nullable<Microsoft.ActiveDirectory.Management.ADDomainMode> DomainMode { get; set; }
        public System.String ManagedBy { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection LinkedGroupPolicyObjects { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection ChildDomains { get; set; }
        public System.String ComputersContainer { get; set; }
        public System.String DomainControllersContainer { get; set; }
        public System.String ForeignSecurityPrincipalsContainer { get; set; }
        public System.String Forest { get; set; }
        public System.String InfrastructureMaster { get; set; }
        public System.String NetBIOSName { get; set; }
        public System.String PDCEmulator { get; set; }
        public System.String ParentDomain { get; set; }
        public System.String RIDMaster { get; set; }
        public System.String SystemsContainer { get; set; }
        public System.String UsersContainer { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection SubordinateReferences { get; set; }
        public System.String DNSRoot { get; set; }
        public System.String LostAndFoundContainer { get; set; }
        public System.String DeletedObjectsContainer { get; set; }
        public System.String QuotasContainer { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection ReadOnlyReplicaDirectoryServers { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection ReplicaDirectoryServers { get; set; }
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADDomainController
    {
        // Constructor
        public ADDomainController() { }
        public ADDomainController(System.String identity) { }
        public ADDomainController(System.Guid guid) { }
        public ADDomainController(System.Security.Principal.SecurityIdentifier sid) { }
        public ADDomainController(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        
        // Property
        public System.String Domain { get; set; }
        public System.String Forest { get; set; }
        public System.String Name { get; set; }
        public System.String Site { get; set; }
        public System.String IPv4Address { get; set; }
        public System.String IPv6Address { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public enum ADDomainMode : int
    {
        Windows2000Domain = 0,
        Windows2003InterimDomain = 1,
        Windows2003Domain = 2,
        Windows2008Domain = 3,
        Windows2008R2Domain = 4,
        Windows2012Domain = 5,
        Windows2012R2Domain = 6,
        Windows2016Domain = 7,
        UnknownDomain = -1,
    }
    
    public class ADEntity
    {
        // Constructor
        public ADEntity(System.String identity) { }
        
        // Property
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
        // Fabricated constructor
        private ADEntity() { }
        public static ADEntity CreateTypeInstance()
        {
            return new ADEntity();
        }
    }
    
    public class ADFineGrainedPasswordPolicy
    {
        // Constructor
        public ADFineGrainedPasswordPolicy() { }
        public ADFineGrainedPasswordPolicy(System.String identity) { }
        public ADFineGrainedPasswordPolicy(Microsoft.ActiveDirectory.Management.ADObject adobject) { }
        public ADFineGrainedPasswordPolicy(System.Guid guid) { }
        
        // Property
        public System.Nullable<System.TimeSpan> LockoutDuration { get; set; }
        public System.Nullable<System.TimeSpan> LockoutObservationWindow { get; set; }
        public System.Nullable<System.Int32> LockoutThreshold { get; set; }
        public System.Nullable<System.TimeSpan> MaxPasswordAge { get; set; }
        public System.Nullable<System.TimeSpan> MinPasswordAge { get; set; }
        public System.Nullable<System.Int32> MinPasswordLength { get; set; }
        public System.Nullable<System.Int32> PasswordHistoryCount { get; set; }
        public System.Nullable<System.Boolean> ComplexityEnabled { get; set; }
        public System.Nullable<System.Boolean> ReversibleEncryptionEnabled { get; set; }
        public System.Nullable<System.Int32> Precedence { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection AppliesTo { get; set; }
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADForest
    {
        // Constructor
        public ADForest() { }
        public ADForest(System.String identity) { }
        public ADForest(System.Guid guid) { }
        public ADForest(System.Security.Principal.SecurityIdentifier sid) { }
        public ADForest(Microsoft.ActiveDirectory.Management.ADObject adobject) { }
        
        // Property
        public System.String Name { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection UPNSuffixes { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection SPNSuffixes { get; set; }
        public System.Nullable<Microsoft.ActiveDirectory.Management.ADForestMode> ForestMode { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection ApplicationPartitions { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection CrossForestReferences { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Domains { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection GlobalCatalogs { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Sites { get; set; }
        public System.String DomainNamingMaster { get; set; }
        public System.String RootDomain { get; set; }
        public System.String SchemaMaster { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public enum ADForestMode : int
    {
        Windows2000Forest = 0,
        Windows2003InterimForest = 1,
        Windows2003Forest = 2,
        Windows2008Forest = 3,
        Windows2008R2Forest = 4,
        Windows2012Forest = 5,
        Windows2012R2Forest = 6,
        Windows2016Forest = 7,
        UnknownForest = -1,
    }
    
    public class ADGroup
    {
        // Constructor
        public ADGroup() { }
        public ADGroup(System.String identity) { }
        public ADGroup(System.Security.Principal.SecurityIdentifier sid) { }
        public ADGroup(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        public ADGroup(System.Guid guid) { }
        
        // Property
        public System.Nullable<Microsoft.ActiveDirectory.Management.ADGroupScope> GroupScope { get; set; }
        public System.Nullable<Microsoft.ActiveDirectory.Management.ADGroupCategory> GroupCategory { get; set; }
        public System.String SamAccountName { get; set; }
        public System.Security.Principal.SecurityIdentifier SID { get; set; }
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public enum ADGroupCategory : int
    {
        Distribution = 0,
        Security = 1,
    }
    
    public enum ADGroupScope : int
    {
        DomainLocal = 0,
        Global = 1,
        Universal = 2,
    }
    
    public enum ADInterSiteTransportProtocolType : int
    {
        IP = 0,
        SMTP = 1,
    }
    
    [System.Flags]
    public enum ADKerberosEncryptionType : int
    {
        None = 0,
        DES = 3,
        RC4 = 4,
        AES128 = 8,
        AES256 = 16,
    }
    
    public class ADObject
    {
        // Constructor
        public ADObject() { }
        public ADObject(System.String identity) { }
        public ADObject(System.Nullable<System.Guid> objectGuid) { }
        
        // Property
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public enum ADOperationMasterRole : int
    {
        PDCEmulator = 0,
        RIDMaster = 1,
        InfrastructureMaster = 2,
        SchemaMaster = 3,
        DomainNamingMaster = 4,
    }
    
    public class ADOptionalFeature
    {
        // Constructor
        public ADOptionalFeature() { }
        public ADOptionalFeature(System.String identity) { }
        public ADOptionalFeature(Microsoft.ActiveDirectory.Management.ADObject adobject) { }
        public ADOptionalFeature(System.Guid guid) { }
        
        // Property
        public System.Nullable<System.Guid> FeatureGUID { get; set; }
        public Microsoft.ActiveDirectory.Management.ADDomainMode RequiredDomainMode { get; set; }
        public Microsoft.ActiveDirectory.Management.ADForestMode RequiredForestMode { get; set; }
        public System.Boolean IsDisableable { get; set; }
        public Microsoft.ActiveDirectory.Management.ADOptionalFeatureScope[] FeatureScope { get; set; }
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public enum ADOptionalFeatureScope : int
    {
        Unknown = 0,
        ForestOrConfigurationSet = 1,
        Domain = 2,
    }
    
    public class ADOrganizationalUnit
    {
        // Constructor
        public ADOrganizationalUnit() { }
        public ADOrganizationalUnit(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        public ADOrganizationalUnit(System.String identity) { }
        public ADOrganizationalUnit(System.Guid guid) { }
        
        // Property
        public System.String ManagedBy { get; set; }
        public System.String StreetAddress { get; set; }
        public System.String City { get; set; }
        public System.String State { get; set; }
        public System.String Country { get; set; }
        public System.String PostalCode { get; set; }
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADPrincipal
    {
        // Constructor
        public ADPrincipal() { }
        public ADPrincipal(System.String identity) { }
        public ADPrincipal(System.Security.Principal.SecurityIdentifier sid) { }
        public ADPrincipal(Microsoft.ActiveDirectory.Management.ADObject adobject) { }
        public ADPrincipal(System.Guid guid) { }
        
        // Property
        public System.String SamAccountName { get; set; }
        public System.Security.Principal.SecurityIdentifier SID { get; set; }
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADPropertyValueCollection
    {
        public bool IsSecondaryStubType = true;
        
        public ADPropertyValueCollection() { }
    }
    
    public class ADReplicationConnection
    {
        // Constructor
        public ADReplicationConnection() { }
        public ADReplicationConnection(System.String identity) { }
        public ADReplicationConnection(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        public ADReplicationConnection(System.Guid guid) { }
        
        // Property
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADReplicationSite
    {
        // Constructor
        public ADReplicationSite() { }
        public ADReplicationSite(System.String identity) { }
        public ADReplicationSite(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        public ADReplicationSite(Microsoft.ActiveDirectory.Management.ADDirectoryServer directoryServer) { }
        public ADReplicationSite(System.Guid guid) { }
        
        // Property
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADReplicationSiteLink
    {
        // Constructor
        public ADReplicationSiteLink() { }
        public ADReplicationSiteLink(System.String identity) { }
        public ADReplicationSiteLink(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        public ADReplicationSiteLink(System.Guid guid) { }
        
        // Property
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADReplicationSiteLinkBridge
    {
        // Constructor
        public ADReplicationSiteLinkBridge() { }
        public ADReplicationSiteLinkBridge(System.String identity) { }
        public ADReplicationSiteLinkBridge(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        public ADReplicationSiteLinkBridge(System.Guid guid) { }
        
        // Property
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADReplicationSubnet
    {
        // Constructor
        public ADReplicationSubnet() { }
        public ADReplicationSubnet(System.String identity) { }
        public ADReplicationSubnet(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        public ADReplicationSubnet(System.Guid guid) { }
        
        // Property
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADResourceProperty
    {
        // Constructor
        public ADResourceProperty() { }
        public ADResourceProperty(System.String identity) { }
        public ADResourceProperty(Microsoft.ActiveDirectory.Management.ADClaimTypeBase identity) { }
        public ADResourceProperty(System.Guid guid) { }
        
        // Property
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADResourcePropertyList
    {
        // Constructor
        public ADResourcePropertyList() { }
        public ADResourcePropertyList(System.String identity) { }
        public ADResourcePropertyList(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        public ADResourcePropertyList(System.Guid guid) { }
        
        // Property
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public class ADResourcePropertyValueType
    {
        // Constructor
        public ADResourcePropertyValueType() { }
        public ADResourcePropertyValueType(System.String identity) { }
        public ADResourcePropertyValueType(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        public ADResourcePropertyValueType(System.Guid guid) { }
        
        // Property
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public enum ADSearchScope : int
    {
        Base = 0,
        OneLevel = 1,
        Subtree = 2,
    }
    
    public class ADServiceAccount
    {
        // Constructor
        public ADServiceAccount() { }
        public ADServiceAccount(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        public ADServiceAccount(System.String identity) { }
        public ADServiceAccount(System.Security.Principal.SecurityIdentifier sid) { }
        public ADServiceAccount(System.Guid guid) { }
        
        // Property
        public System.String[] ServicePrincipalNames { get; set; }
        public System.String UserPrincipalName { get; set; }
        public System.Boolean Enabled { get; set; }
        public System.String SamAccountName { get; set; }
        public System.Security.Principal.SecurityIdentifier SID { get; set; }
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public enum ADStrongNTLMPolicyType : int
    {
        Disabled = 0,
        Optional = 1,
        Required = 2,
    }
    
    public class ADSuggestedValueEntry
    {
        // Constructor
        public ADSuggestedValueEntry() { }
        public ADSuggestedValueEntry(System.Object value, System.String displayName, System.String description, System.String valueGuid) { }
        public ADSuggestedValueEntry(System.Object value, System.String displayName, System.String description) { }
        
        // Property
        public System.Object Value { get; set; }
        public System.String ValueDisplayName { get; set; }
        public System.String ValueDescription { get; set; }
        public System.String ValueGUID { get; set; }
        
    }
    
    public class ADTrust
    {
        // Constructor
        public ADTrust() { }
        public ADTrust(System.String identity) { }
        public ADTrust(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        public ADTrust(System.Guid guid) { }
        
        // Property
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
    public enum ADTrustRole : int
    {
        Trusted = 0,
        Trusting = 1,
    }
    
    public class ADUser
    {
        // Constructor
        public ADUser() { }
        public ADUser(System.String identity) { }
        public ADUser(System.Security.Principal.SecurityIdentifier sid) { }
        public ADUser(Microsoft.ActiveDirectory.Management.ADObject identity) { }
        public ADUser(System.Guid guid) { }
        
        // Property
        public System.String GivenName { get; set; }
        public System.String Surname { get; set; }
        public System.String UserPrincipalName { get; set; }
        public System.Boolean Enabled { get; set; }
        public System.String SamAccountName { get; set; }
        public System.Security.Principal.SecurityIdentifier SID { get; set; }
        public System.String DistinguishedName { get; set; }
        public System.String Name { get; set; }
        public System.String ObjectClass { get; set; }
        public System.Nullable<System.Guid> ObjectGuid { get; set; }
        public System.Collections.ICollection PropertyNames { get; set; }
        public System.Collections.Generic.ICollection<System.String> AddedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> RemovedProperties { get; set; }
        public System.Collections.Generic.ICollection<System.String> ModifiedProperties { get; set; }
        public System.Int32 PropertyCount { get; set; }
        public Microsoft.ActiveDirectory.Management.ADPropertyValueCollection Item { get; set; }
        
    }
    
}

namespace Microsoft.ActiveDirectory.Management.Commands
{
    public enum ADCurrentDomainType : int
    {
        LocalComputer = 0,
        LoggedOnUser = 1,
    }
    
    public enum ADCurrentForestType : int
    {
        LocalComputer = 0,
        LoggedOnUser = 1,
    }
    
    public enum ADDiscoverableService : int
    {
        PrimaryDC = 1,
        GlobalCatalog = 2,
        KDC = 3,
        TimeService = 4,
        ReliableTimeService = 5,
        ADWS = 6,
    }
    
    public enum ADMinimumDirectoryServiceVersion : int
    {
        Windows2000 = 1,
        Windows2008 = 2,
        Windows2012 = 3,
        Windows2012R2 = 4,
    }
    
    public enum ADPartnerType : int
    {
        Inbound = 1,
        Outbound = 2,
        Both = 3,
    }
    
    public enum ADScopeType : int
    {
        Server = 0,
        Domain = 1,
        Forest = 2,
        Site = 3,
    }
    
}

'@

function Add-ADCentralAccessPolicyMember {
    <#
    .SYNOPSIS
        Adds central access rules to a central access policy in Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Members
        Specifies a set of central access rule (CAR) objects in a comma-separated list to add to a central access policy. To identify each object, use one of the following property values:
        - Name
        - A distinguished name
        - GUID (objectGUID)
        Note: The identifier in parentheses is the LDAP display name.
        You can also provide objects to this parameter directly.
        You cannot pass objects through the pipeline to this parameter.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216340')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADCentralAccessPolicy], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Members
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Members", [Microsoft.ActiveDirectory.Management.ADCentralAccessRule[]], $attributes)
        $parameters.Add("Members", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Add-ADComputerServiceAccount {
    <#
    .SYNOPSIS
        Adds one or more service accounts to an Active Directory computer.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory computer object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - Security Accounts Manager account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If the identifier given is a distinguished name, the partition to search is computed from that distinguished name. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to a computer object instance.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER ServiceAccount
        Specifies one or more Active Directory service accounts. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A Security Identifier (objectSid)
        - SAM account name (sAMAccountName)
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219291')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Computer')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADComputer], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # ServiceAccount
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ServiceAccount", [Microsoft.ActiveDirectory.Management.ADServiceAccount[]], $attributes)
        $parameters.Add("ServiceAccount", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Add-ADDomainControllerPasswordReplicationPolicy {
    <#
    .SYNOPSIS
        Adds users, computers, and groups to the allowed or denied list of a read-only domain controller password replication policy.
    .PARAMETER AllowedList
        Specifies the users, computers, groups or other accounts to add to the list of accounts allowed to replicate their passwords to this RODC. You can specify more than one value by using a comma-separated list. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID  (objectGUID)
        - A security identifier (objectSid)
        - A Security Accounts Manager (SAM) account name  (sAMAccountName)
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
        Specifies the credentials for the security context under which the task is performed. If this security context doesn't have directory level permissions to perform the task, then an error is returned by the directory. If running under the context of an Active Directory module for Window PowerShell provider drive, the credentials information associated with the drive is used as the default value; otherwise, the currently logged on user security context is used.
    .PARAMETER DeniedList
        Specifies the users, computers, groups or other accounts to add to the list of accounts that are denied the right to replicate their passwords to this RODC. You can specify more than one value by using a comma-separated list. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID  (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
    .PARAMETER Identity
        Specifies an Active Directory domain controller object by providing one of the following values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A GUID (objectGUID)
        - An IPV4Address
        - A Global IPV6Address
        - A   DNS Host Name (dNSHostName)
        - A name of the server object
        - A distinguished name of the NTDS Settings object
        - A distinguished name of the server object that represents the domain controller
        - A GUID of NTDS settings object under the configuration partition
        - A GUID of server object under the configuration partition
        - A distinguished name of the computer object that represents the domain controller
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer that runs Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219290')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AllowedList
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowedPRP"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateCountAttribute(1, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AllowedList", [Microsoft.ActiveDirectory.Management.ADPrincipal[]], $attributes)
        $parameters.Add("AllowedList", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # DeniedList
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DeniedPRP"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateCountAttribute(1, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DeniedList", [Microsoft.ActiveDirectory.Management.ADPrincipal[]], $attributes)
        $parameters.Add("DeniedList", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADDomainController], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Add-ADFineGrainedPasswordPolicySubject {
    <#
    .SYNOPSIS
        Applies a fine-grained password policy to one more users and groups.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory fine-grained password policy object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A name (name)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to a fine-grained password policy object instance.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive. - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance. - If none of the previous cases apply, the Partition parameter does not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER Subjects
        Specifies one or more users or groups. To specify more than one user or group, use a comma-separated list. You can identify a user or group by one of the following property values:
        - Distinguished name (DN)
        - GUID (objectGUID)
        - Security Identifier (objectSid)
        - SAM account name (sAMAccountName)
        Note: The identifier in parentheses is the LDAP display name for the attribute.
        You can also provide objects to this parameter directly.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219289')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # Subjects
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Subjects", [Microsoft.ActiveDirectory.Management.ADPrincipal[]], $attributes)
        $parameters.Add("Subjects", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Add-ADGroupMember {
    <#
    .SYNOPSIS
        Adds one or more members to an Active Directory group.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A Security Account Manager account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Members
        Specifies an array of user, group, and computer objects in a comma-separated list to add to a group. To identify each object, use one of the following property values. Note: The identifier in parentheses is the LDAP display name. The acceptable values for this parameter are:
        - Distinguished name
        - GUID (objectGUID)
        - Security identifier (objectSid)
        - SAM account name (sAMAccountName)
        You can also provide objects to this parameter directly.
        The following examples show how to specify this parameter.
        This example specifies a user and group to add by specifying the distinguished name and the SAM account name properties.
        `-Members "CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com", "saradavisreports"`
        This example specifies a user and a group object that are defined in the current Windows PowerShell session as input for the parameter.
        `-Members $userObject, $GroupObject`
        The objects specified for this parameter are processed as Microsoft.ActiveDirectory.Management.ADPrincipal objects. Derived types, such as the following are also received by this parameter.
        - Microsoft.ActiveDirectory.Management.ADUser - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADServiceAccount - Microsoft.ActiveDirectory.Management.ADGroup You cannot pass objects through the pipeline to this parameter.
    .PARAMETER MemberTimeToLive
        Specifies a Time to Live (TTL) for the new group members.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive. - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive. - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance. - If none of the previous cases apply, the Partition parameter does not take a default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER DisablePermissiveModify
        Group membership updates use permissive modify by default. This suppresses an error when adding a member that is already member of the group. When this parameter is used, an error "The specified account name is already a member of the group" is returned.
        This parameter is available in Windows Server 2019 with the September 2020 Updates.
        Group membership updates use permissive modify by default. This suppresses an error when adding a member that is already member of the group. When this parameter is used, an error "The specified account name is already a member of the group" is returned.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219287')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADGroup], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Members
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Members", [Microsoft.ActiveDirectory.Management.ADPrincipal[]], $attributes)
        $parameters.Add("Members", $parameter)
        
        # MemberTimeToLive
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("MemberTimeToLive", [System.Nullable`1[System.TimeSpan]], $attributes)
        $parameters.Add("MemberTimeToLive", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # DisablePermissiveModify
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisablePermissiveModify", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("DisablePermissiveModify", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Add-ADPrincipalGroupMembership {
    <#
    .SYNOPSIS
        Adds a member to one or more Active Directory groups.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
        The following example shows how to set this parameter to Basic.
        `-AuthType Basic`
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory principal object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - Distinguished name
        - GUID (objectGUID)
        - Security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        Derived types, such as the following are also accepted:
        - Microsoft.ActiveDirectory.Management.ADGroup - Microsoft.ActiveDirectory.Management.ADUser - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADServiceAccount This example shows how to set the parameter to a distinguished name.
        `-Identity  "CN=saradavis,CN=Users,DC=corp,DC=contoso,DC=com"`
        This example shows how to set this parameter to a principal object instance named principalInstance.
        `-Identity $principalInstance`
    .PARAMETER MemberOf
        Specifies the Active Directory groups to add a user, computer, or group to as a member. You can identify a group by providing one of the following values. Note: The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - Distinguished name
        - GUID (objectGUID)
        - Security identifier (objectSid)
        - Security Account Manager (SAM) account name (sAMAccountName)
        If you are specifying more than one group, use commas to separate the groups in the list.
        The following example shows how to specify this parameter by using SAM account name values.
        `-MemberOf "SaraDavisGroup", "JohnSmithGroup"`
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter does not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219288')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADPrincipal], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # MemberOf
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("MemberOf", [Microsoft.ActiveDirectory.Management.ADGroup[]], $attributes)
        $parameters.Add("MemberOf", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Add-ADResourcePropertyListMember {
    <#
    .SYNOPSIS
        Adds one or more resource properties to a resource property list in Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Members
        Specifies a set of ADResourceProperty objects in a comma-separated list to add to a resource property list. To identify each object, use one of the following property values:
        - Name
        - Distinguished name
        - GUID (objectGUID)
        Note: The identifier in parentheses is the LDAP display name.
        You can also provide objects to this parameter directly.
        You cannot pass objects through the pipeline to this parameter.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Directory Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216341')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADResourcePropertyList], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Members
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Members", [Microsoft.ActiveDirectory.Management.ADResourceProperty[]], $attributes)
        $parameters.Add("Members", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Clear-ADAccountExpiration {
    <#
    .SYNOPSIS
        Clears the expiration date for an Active Directory account.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an account object instance.
        Derived types such as the following are also accepted:
        - Microsoft.ActiveDirectory.Management.ADServiceAccount - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADUser
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In AD LDS environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219293')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADAccount], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Clear-ADClaimTransformLink {
    <#
    .SYNOPSIS
        Removes a claims transformation from being applied to one or more cross-forest trust relationships in Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory trust object by providing one of the following values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Policy
        Removes the specified claim transformation policy from being applied to the trust relationship.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER TrustRole
        Specifies the role of the current forest in the trust relationship specified by the Identity parameter. The allowable values for this parameter are as follows:
        - Trusted. Specify this value if the current forest is the trusted forest.  - Trusting. Specify this value if the current forest is the trusting forest.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216342')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADTrust], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Policy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Policy", [Microsoft.ActiveDirectory.Management.ADClaimTransformPolicy], $attributes)
        $parameters.Add("Policy", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # TrustRole
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TrustRole", [Microsoft.ActiveDirectory.Management.ADTrustRole], $attributes)
        $parameters.Add("TrustRole", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Disable-ADAccount {
    <#
    .SYNOPSIS
        Disables an Active Directory account.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A Security Identifier (objectSid)
        - A SAM Account Name (SAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an account object instance.
        Derived types such as the following are also accepted:
        - Microsoft.ActiveDirectory.Management.ADServiceAccount - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADUser
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219294')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADAccount], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Disable-ADOptionalFeature {
    <#
    .SYNOPSIS
        Disables an Active Directory optional feature.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory optional feature object by providing one of the following values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - FQDN
        - Feature GUID (featureGUID)
        - Object GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an optional feature object instance.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Scope
        Specifies the scope at which the feature is enabled or disabled.  The acceptable values for this parameter are:
        - Domain or 0
        - Forest or 1
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - FQDN
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER Target
        Specifies the domain or forest in which to modify the optional feature. You can identify the target domain or forest by providing one of the following values:
        - FQDN of the forest or domain
        - NetBIOS name of the forest or domain
        - Distinguished name of the domain naming context
        The following example shows how to set this parameter to a domain naming context.
        `-Target "DC=corp,DC=Fabrikam,DC=com"`
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219295')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADOptionalFeature], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Scope
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 2
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Scope", [Microsoft.ActiveDirectory.Management.ADOptionalFeatureScope], $attributes)
        $parameters.Add("Scope", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # Target
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 3
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Target", [Microsoft.ActiveDirectory.Management.ADEntity], $attributes)
        $parameters.Add("Target", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Enable-ADAccount {
    <#
    .SYNOPSIS
        Enables an Active Directory account.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A Security Identifier (objectSid)
        - A SAM account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an account object instance.
        Derived types such as the following are also accepted:
        - Microsoft.ActiveDirectory.Management.ADUser - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADServiceAccount
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive. - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219296')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADAccount], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Enable-ADOptionalFeature {
    <#
    .SYNOPSIS
        Enables an Active Directory optional feature.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory optional feature object by providing one of the following values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A FQDN
        - A feature GUID (featureGUID)
        - An object GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an optional feature object instance.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Scope
        Specifies the scope at which the feature is enabled or disabled. The acceptable values for this parameter are:
        - Domain or 0
        - Forest or 1
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - FQDN
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER Target
        Specifies the domain or forest in which to modify the optional feature. You can identify the target domain or forest by providing one of the following values:
        - FQDN of the forest or domain
        - NetBIOS name of the forest or domain
        You can also, where Scope is set to domain (not forest), use the following:
        - Distinguished name of the domain naming context
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219297')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADOptionalFeature], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Scope
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 2
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Scope", [Microsoft.ActiveDirectory.Management.ADOptionalFeatureScope], $attributes)
        $parameters.Add("Scope", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # Target
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 3
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Target", [Microsoft.ActiveDirectory.Management.ADEntity], $attributes)
        $parameters.Add("Target", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADAccountAuthorizationGroup {
    <#
    .SYNOPSIS
        Gets the accounts token group information.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A Security Identifier (objectSid)
        - A SAM Account Name (SAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an account object instance.
        Derived types such as the following are also accepted:
        - Microsoft.ActiveDirectory.Management.ADServiceAccount - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADUser
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Identity', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219317')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADAccountAuthGroupIdentityHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADAccount], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADAccountResultantPasswordReplicationPolicy {
    <#
    .SYNOPSIS
        Gets the resultant password replication policy for an Active Directory account.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER DomainController
        Specifies a read-only domain controller (RODC). The cmdlet returns the password replication policy of the account for this RODC. You can identify the domain controller by providing one of the following values:
        - GUID (objectGUID)
        - IPV4Address
        - Global IPV6Address
        - DNS Host Name (dNSHostName)
        - Name of the server object
        - A distinguished name of the NTDS Settings object
        - A distinguished name  of the server object that represents the domain controller
        - GUID of NTDS settings object under the configuration partition
        - GUID of server object under the configuration partition
        - A distinguished Name of the computer object that represents the domain controller
        Note: The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute.
    .PARAMETER Identity
        Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an account object instance.
        Derived types such as the following are also accepted:
        - Microsoft.ActiveDirectory.Management.ADUser - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADServiceAccount
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of  is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Domain name values:
        - Fully qualified domain name (FQDN)
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
        - By using Server value from objects passed through the pipeline.
        - By using the server information associated with the Active Directory module for Windows PowerShell provider drive, when running under that drive.
        - By using the domain of the computer running Windows PowerShell.
    #>
    
    [CmdletBinding(HelpUri='http://go.microsoft.com/fwlink/?LinkId=219312')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # DomainController
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADAccountRPRPDomainControllerHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DomainController", [Microsoft.ActiveDirectory.Management.ADDomainController], $attributes)
        $parameters.Add("DomainController", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADAccountRPRPIdentityHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADAccount], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADAuthenticationPolicy {
    <#
    .SYNOPSIS
        Gets one or more Active Directory Domain Services authentication policies.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate. A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies a user account that has permission to perform the task. The default is the current user. Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet.
        By default, the cmdlet uses the credentials of the currently logged on user unless the cmdlet is run from an Active Directory Domain Services Windows PowerShell provider drive. If you run the cmdlet in a provider drive, the account associated with the drive is the default.
        If you specify credentials that do not have permission to perform the task, the cmdlet returns an error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory Domain Services objects. This string uses the Windows PowerShell expression language syntax. The Windows PowerShell expression language syntax provides rich type-conversion support for value types received by the Filter parameter.
        Specify the Filter parameter in one of the following formats:
        - To match a single filter element: {Attributeoperator  "value"}
        - To match multiple filter elements: {(Attribute1operator1 "value1") joinOperator (Attribute2operator2 "value2")}
        Windows PowerShell wildcards other than "*", such as "?" are not supported by the Filter syntax.
        Valid filter operators are:
        -eq, -le, -ge, -ne, -lt, -gt, -approx, -bor, -band, -recursivematch, -like, -notlike
        Valid join operators are:
        -and, -or
        The not operator is -not
        For a list of supported types for values, see about_ActiveDirectory_ObjectModel. For more information about the Filter parameter, see about_ActiveDirectory_Filter.
    .PARAMETER Identity
        Specifies an Active Directory Domain Services authentication policy object. Specify the authentication policy object in one of the following formats:
        - A distinguished name
        - GUID
        - Name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER LDAPFilter
        Specifies an LDAP query string used to filter Active Directory Domain Services objects. Use this parameter to run your existing LDAP queries.
    .PARAMETER Properties
        Specifies the properties of the output object to get from the server. Use this parameter to get properties that are not included in the default set.
        Specify the properties to get as a comma separated list of names. For properties that are not default or extended properties, you must specify the LDAP display name of the property. To display all of the properties that are set on the object, specify an asterisk wildcard.
        To get properties for an object and display them, you can use this cmdlet and pass the output to the Get-Member (https://go.microsoft.com/fwlink/?LinkID=293971)cmdlet by using the pipeline operator.
    .PARAMETER ResultPageSize
        Specifies the number of objects to include in one page for an Active Directory Domain Services query. The default value is 256 objects per page.
    .PARAMETER ResultSetSize
        Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to get all of the objects, set this parameter to $Null. You can use Ctrl+C to stop the query and the return of objects.
        The default value is $Null.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to which to connect, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301405')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicy], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # LDAPFilter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LDAPFilter", [System.String], $attributes)
        $parameters.Add("LDAPFilter", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # ResultPageSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateRangeAttribute(0, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultPageSize", [System.Int32], $attributes)
        $parameters.Add("ResultPageSize", $parameter)
        
        # ResultSetSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNullableRangeAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultSetSize", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ResultSetSize", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADAuthenticationPolicySilo {
    <#
    .SYNOPSIS
        Gets one or more Active Directory Domain Services authentication policy silos.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate. A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies a user account that has permission to perform the task. The default is the current user. Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet.
        By default, the cmdlet uses the credentials of the currently logged on user unless the cmdlet is run from an Active Directory Domain Services Windows PowerShell provider drive. If you run the cmdlet in a provider drive, the account associated with the drive is the default.
        If you specify credentials that do not have permission to perform the task, the cmdlet returns an error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory Domain Services objects. This string uses the Windows PowerShell expression language syntax. The Windows PowerShell expression language syntax provides rich type-conversion support for value types received by the Filter parameter.
        Specify the Filter parameter in one of the following formats:
        - To match a single filter element: {Attributeoperator  "value"}
        - To match multiple filter elements: {(Attribute1operator1 "value1") joinOperator (Attribute2operator2 "value2")}
        Windows PowerShell wildcards other than " ", such as "?" are not supported by the Filter* syntax.
        Valid filter operators are:
        -eq, -le, -ge, -ne, -lt, -gt, -approx, -bor, -band, -recursivematch, -like, -notlike
        Valid join operators are:
        -and, -or
        The not operator is -not
        For a list of supported types for values, type `Get-Help  about_ActiveDirectory_ObjectModel`. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
    .PARAMETER Identity
        Specifies an Active Directory Domain Services authentication policy silo object. Specify the authentication policy silo object in one of the following formats:
        - A distinguished name
        - A GUID
        - A Name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER LDAPFilter
        Specifies an LDAP query string used to filter Active Directory Domain Services objects. Use this parameter to run your existing LDAP queries.
    .PARAMETER Properties
        Specifies the properties of the output object to get from the server. Use this parameter to get properties that are not included in the default set.
        Specify the properties to get as a comma separated list of names. For properties that are not default or extended properties, you must specify the LDAP display name of the property. To display all of the properties that are set on the object, specify an asterisk wildcard.
        To get properties for an object and display them, you can use this cmdlet and pass the output to the Get-Member cmdlet by using the pipeline operator.
    .PARAMETER ResultPageSize
        Specifies the number of objects to include in one page for an Active Directory Domain Services query. The default value is 256 objects per page.
    .PARAMETER ResultSetSize
        Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to get all of the objects, set this parameter to $Null. You can use Ctrl+C to stop the query and the return of objects.
        The default value is $Null.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to which to connect, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services, or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:  - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301410')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicySilo], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # LDAPFilter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LDAPFilter", [System.String], $attributes)
        $parameters.Add("LDAPFilter", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # ResultPageSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateRangeAttribute(0, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultPageSize", [System.Int32], $attributes)
        $parameters.Add("ResultPageSize", $parameter)
        
        # ResultSetSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNullableRangeAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultSetSize", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ResultSetSize", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADCentralAccessPolicy {
    <#
    .SYNOPSIS
        Retrieves central access policies from Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, type `Get-Help about_ActiveDirectory_ObjectModel`.
        Note: PowerShell wildcards other than , such as ?, are not supported by the Filter* syntax.
        Note: To query using Lightweight Directory Access Protocol (LDAP) query strings, use the LDAPFilter parameter.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A Security Identifier (objectSid)
        - A SAM account name (sAMAccountName)
    .PARAMETER LDAPFilter
        Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description or type `Get-Help about_ActiveDirectory_Filter`.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet.
    .PARAMETER ResultPageSize
        Specifies the number of objects to include in one page for an Active Directory Domain Services query.
        The default is 256 objects per page.
    .PARAMETER ResultSetSize
        Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $Null (null value). You can use Ctrl+C to stop the query and return of objects.
        The default is $Null.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216345')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADUserFilterHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADCentralAccessPolicy], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # LDAPFilter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LDAPFilter", [System.String], $attributes)
        $parameters.Add("LDAPFilter", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # ResultPageSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateRangeAttribute(0, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultPageSize", [System.Int32], $attributes)
        $parameters.Add("ResultPageSize", $parameter)
        
        # ResultSetSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNullableRangeAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultSetSize", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ResultSetSize", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADCentralAccessRule {
    <#
    .SYNOPSIS
        Retrieves central access rules from Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, type `Get-Help about_ActiveDirectory_ObjectModel`.
        Note: PowerShell wildcards other than , such as ?, are not supported by the Filter* syntax.
        Note: To query using Lightweight Directory Access Protocol (LDAP) query strings, use the LDAPFilter parameter.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER LDAPFilter
        Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description or type `Get-Help about_ActiveDirectory_Filter`.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. You can use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet.
    .PARAMETER ResultPageSize
        Specifies the number of objects to include in one page for an Active Directory Domain Services query.
        The default is 256 objects per page.
    .PARAMETER ResultSetSize
        Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $Null (null value). You can use Ctrl+C to stop the query and return of objects.
        The default is $Null.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216346')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADUserFilterHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADCentralAccessRule], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # LDAPFilter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LDAPFilter", [System.String], $attributes)
        $parameters.Add("LDAPFilter", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # ResultPageSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateRangeAttribute(0, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultPageSize", [System.Int32], $attributes)
        $parameters.Add("ResultPageSize", $parameter)
        
        # ResultSetSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNullableRangeAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultSetSize", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ResultSetSize", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADClaimTransformPolicy {
    <#
    .SYNOPSIS
        Returns one or more Active Directory claim transform objects based on a specified filter.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the Windows PowerShell Expression Language syntax. The Windows PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the Windows PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, see about_ActiveDirectory_ObjectModel.
        Note: To query using Lightweight Directory Access Protocol (LDAP) query strings, use the LDAPFilter parameter.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER LDAPFilter
        Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description or type `Get-Help about_ActiveDirectory_Filter`.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216347')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADClaimTransformPolicy], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # LDAPFilter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LDAPFilter", [System.String], $attributes)
        $parameters.Add("LDAPFilter", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADClaimType {
    <#
    .SYNOPSIS
        Returns a claim type from Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the Windows PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, see about_ActiveDirectory_ObjectModel.
        Note: PowerShell wildcards other than , such as ?, are not supported by the Filter* syntax.
        Note: To query using Lightweight Directory Access Protocol (LDAP) query strings, use the LDAPFilter parameter.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER LDAPFilter
        Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description or type `Get-Help about_ActiveDirectory_Filter`.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet.
    .PARAMETER ResultPageSize
        Specifies the number of objects to include in one page for an Active Directory Domain Services query.
        The default is 256 objects per page.
    .PARAMETER ResultSetSize
        Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $Null (null value). You can use Ctrl+C to stop the query and return of objects.
        The default is $null.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216348')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADUserFilterHM"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADClaimType], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # LDAPFilter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LDAPFilter", [System.String], $attributes)
        $parameters.Add("LDAPFilter", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # ResultPageSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateRangeAttribute(0, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultPageSize", [System.Int32], $attributes)
        $parameters.Add("ResultPageSize", $parameter)
        
        # ResultSetSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNullableRangeAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultSetSize", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ResultSetSize", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADComputer {
    <#
    .SYNOPSIS
        Gets one or more Active Directory computers.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as `User1` or `Domain01\User01` or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the `Get-Credential` cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, the cmdlet returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the Windows PowerShell Expression Language syntax. The Windows PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help` about_ActiveDirectory_Filter (/previous-versions/windows/server/hh531527(v=ws.10)).
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the Windows PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, type `Get-Help about_ActiveDirectory_ObjectModel`.
        > [!NOTE] > Wildcards other than ` `, such as `?`, are not supported by the Filter * syntax.
        > [!NOTE] > To query using LDAP query strings, use the LDAPFilter parameter.
    .PARAMETER Identity
        Specifies an Active Directory computer object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (`objectGUID`)
        - A security identifier (`objectSid`)
        - A Security Accounts Manager account name (`sAMAccountName`)
        The cmdlet searches the default naming context or partition to find the object. If the identifier given is a distinguished name, the partition to search is computed from that distinguished name. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to a computer object instance.
    .PARAMETER LDAPFilter
        Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description or type `Get-Help` about_ActiveDirectory_Filter (/previous-versions/windows/server/hh531527(v=ws.10)).
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is   automatically generated from the current path in the drive. - If none of the previous cases apply, the default value of Partition is set to the default   partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is   automatically generated from the current path in the drive. - If the target AD LDS instance has a default naming context, the default value of Partition is   set to the default naming context. To specify a default naming context for an AD LDS environment,   set the msDS-defaultNamingContext property of the Active Directory directory service agent   (DSA) object ( nTDSDSA ) for the AD LDS instance. - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the `Get-*` cmdlet associated with the object and pass the output to the `Get-Member` cmdlet.
    .PARAMETER ResultPageSize
        Specifies the number of objects to include in one page for an Active Directory Domain Services query.
        The default is 256 objects per page.
    .PARAMETER ResultSetSize
        Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $Null (null value). You can use Ctrl+C to stop the query and return of objects.
        The default is $Null.
    .PARAMETER SearchBase
        Specifies an Active Directory path to search under.
        When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.
        When you run a cmdlet outside of an Active Directory provider drive against an Active Directory Domain Services target, the default value of this parameter is the default naming context of the target domain.
        When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target AD LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance. If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.
        When the value of the SearchBase parameter is set to an empty string and you are connected to a global catalog port, all partitions are searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a global catalog port, an error is thrown.
    .PARAMETER SearchScope
        Specifies the scope of an Active Directory search. The acceptable values for this parameter are:
        - Base or 0
        - OneLevel or 1
        - Subtree or 2
        A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain   Services Windows PowerShell provider drive, when the cmdlet runs in that drive - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301396')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADComputerFilterHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADComputer], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # LDAPFilter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LDAPFilter", [System.String], $attributes)
        $parameters.Add("LDAPFilter", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # ResultPageSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateRangeAttribute(0, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultPageSize", [System.Int32], $attributes)
        $parameters.Add("ResultPageSize", $parameter)
        
        # ResultSetSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNullableRangeAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultSetSize", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ResultSetSize", $parameter)
        
        # SearchBase
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SearchBase", [System.String], $attributes)
        $parameters.Add("SearchBase", $parameter)
        
        # SearchScope
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SearchScope", [Microsoft.ActiveDirectory.Management.ADSearchScope], $attributes)
        $parameters.Add("SearchScope", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADComputerServiceAccount {
    <#
    .SYNOPSIS
        Gets the service accounts hosted by a computer.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory computer object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - Security Accounts Manager account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If the identifier given is a distinguished name, the partition to search is computed from that distinguished name. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to a computer object instance.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive. - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive. - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(HelpUri='http://go.microsoft.com/fwlink/?LinkId=219315')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADComputerServiceAccountIdentityHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADComputer], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADDCCloningExcludedApplicationList {
    <#
    .SYNOPSIS
        Gets a list of installed programs and services present on this domain controller that are not in the default or user defined inclusion list.
    .PARAMETER Force
        Forces the command to run without asking for user confirmation.
    .PARAMETER GenerateXml
        Indicates whether to create the CustomDCCloneAllowList.xml file and writes it in the location specified using the Path parameter.
    .PARAMETER Path
        Specifies the folder path to use when creating the CustomDCCloneAllowList.xml file using the GenerateXml parameter.
    #>
    
    [CmdletBinding(DefaultParameterSetName='Default', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219594')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Force
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Xml"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Force", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("Force", $parameter)
        
        # GenerateXml
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Xml"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("GenerateXml", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("GenerateXml", $parameter)
        
        # Path
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Xml"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Path", [System.String], $attributes)
        $parameters.Add("Path", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADDefaultDomainPasswordPolicy {
    <#
    .SYNOPSIS
        Gets the default password policy for an Active Directory domain.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Current
        Specifies whether to return the domain of the local computer or the current logged on user. The acceptable values for this parameter are:
        - LocalComputer or 0
        - LoggedOnUser or 1
    .PARAMETER Identity
        Specifies an Active Directory domain object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. All values are for the domainDNS object that represents the domain. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A DNS domain name
        - A NetBIOS domain name
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to a domain object instance.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Current', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219316')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Current
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.ParameterSetName = "Current"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Current", [Microsoft.ActiveDirectory.Management.Commands.ADCurrentDomainType], $attributes)
        $parameters.Add("Current", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADDefaultDomainPasswordPolicy], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADDomain {
    <#
    .SYNOPSIS
        Gets an Active Directory domain.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Current
        Specifies whether to return the domain of the local computer or the current logged on user.  The acceptable values for this parameter are:
        - LocalComputer or 0
        - LoggedOnUser  or 1
    .PARAMETER Identity
        Specifies an Active Directory domain object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. All values are for the domainDNS object that represents the domain. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A DNS domain name
        - A NetBIOS domain name
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to a domain object instance.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Current', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219304')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Current
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Current"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Current", [Microsoft.ActiveDirectory.Management.Commands.ADCurrentDomainType], $attributes)
        $parameters.Add("Current", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADDomain], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADDomainController {
    <#
    .SYNOPSIS
        Gets one or more Active Directory domain controllers based on discoverable services criteria, search parameters or by providing a domain controller identifier, such as the NetBIOS name.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER AvoidSelf
        Specifies to not return the current computer as a domain controller. If the current computer is not a domain controller, this parameter is ignored. You can specify this parameter when you want to get the name of another domain controller in the domain.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Discover
        Specifies to return a discoverable domain controller that meets the conditions specified by the cmdlet parameters.
        To get a domain controller by using the discovery mechanism of DCLocator, use the Discover parameter. Along with this parameter, you can provide search criteria by setting parameters such as Service , SiteName , DomainName , NextClosestSite , AvoidSelf , and ForceDiscover .
    .PARAMETER DomainName
        Specifies the domain to search. The cmdlet locates a discoverable domain controller in this domain. Specify the domain by using the NetBIOS name or Fully Qualified Domain Name (FQDN) of the domain.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the Windows PowerShell Expression Language syntax. The Windows PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the Windows PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, type `Get-Help about_ActiveDirectory_ObjectModel`.
        Note: PowerShell wildcards other than , such as ?, are not supported by the Filter* syntax.
        Note: To query using LDAP query strings, use the LDAPFilter parameter.
    .PARAMETER ForceDiscover
        Indicates that the cmdlet to clears any cached domain controller information and perform a new discovery. If this parameter is not specified the cmdlet may return cached domain controller information.
    .PARAMETER Identity
        Specifies an Active Directory domain controller object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. Unless specified otherwise, these values are for the server object that represents the domain controller. The acceptable values for this parameter are:
        - A GUID (objectGUID)
        - An IPV4Address
        - A Global IPV6Address
        - A DNS Host Name (dNSHostName)
        - The name of the server object
        - The distinguished name of the NTDS Settings object
        - The distinguished name of the server object that represents the domain controller
        - The GUID of NTDS settings object under the configuration partition
        - The GUID of server object under the configuration partition
        - The distinguished name of the computer object that represents the domain controller
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER MinimumDirectoryServiceVersion
        Species the earliest operating system that the domain controller can have so that it is returned by the cmdlet when getting a domain controller using Discover parameter. The acceptable values for this parameter are:
        - Windows2000 or 1
        - Windows2008 or 2
    .PARAMETER NextClosestSite
        Specifies to return a domain controller in the next closest site when a domain controller is not found in the site that contains the client. The next closest site is the site with the lowest site link cost with respect to the current site. Costs between sites are based on factors such as bandwidth, as well as physical proximity.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER Service
        Species the types of domain controllers to get. You can specify more than one type by using a comma-separated list. The acceptable values for this parameter are:
        - PrimaryDC or 1
        - GlobalCatalog or 2
        - KDC or 3
        - TimeService or 4
        - ReliableTimeService or 5
        - ADWS or 6
    .PARAMETER SiteName
        Specifies the name of a site to search in to find the domain controller. If this parameter is not set, the cmdlet searches for domain controllers in the same site as the client. The name of the site is defined by the Name property of the site object.
    .PARAMETER Writable
        Specifies whether this is a writable domain controller.
    #>
    
    [CmdletBinding(DefaultParameterSetName='Identity', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219306')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # AvoidSelf
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DiscoverByService"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AvoidSelf", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("AvoidSelf", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Discover
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DiscoverByService"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Discover", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("Discover", $parameter)
        
        # DomainName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DiscoverByService"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DomainName", [System.String], $attributes)
        $parameters.Add("DomainName", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # ForceDiscover
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DiscoverByService"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ForceDiscover", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("ForceDiscover", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADDomainController], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # MinimumDirectoryServiceVersion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DiscoverByService"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("MinimumDirectoryServiceVersion", [Microsoft.ActiveDirectory.Management.Commands.ADMinimumDirectoryServiceVersion], $attributes)
        $parameters.Add("MinimumDirectoryServiceVersion", $parameter)
        
        # NextClosestSite
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DiscoverByService"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("NextClosestSite", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("NextClosestSite", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # Service
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DiscoverByService"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Service", [Microsoft.ActiveDirectory.Management.Commands.ADDiscoverableService[]], $attributes)
        $parameters.Add("Service", $parameter)
        
        # SiteName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DiscoverByService"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SiteName", [System.String], $attributes)
        $parameters.Add("SiteName", $parameter)
        
        # Writable
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DiscoverByService"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Writable", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("Writable", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADDomainControllerPasswordReplicationPolicy {
    <#
    .SYNOPSIS
        Gets the members of the allowed list or denied list of a read-only domain controller's password replication policy.
    .PARAMETER Allowed
        Specifies a search for accounts that have been authenticated by a read-only domain controller.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
        Specifies the credentials for the security context under which the task is performed. If this security context doesn't have directory level permissions to perform the task, then an error is returned by the directory. If running under the context of an Active Directory module for Windows PowerShell provider drive, the credentials information associated with the drive is used as the default value; otherwise, the currently logged on user security context is used.
    .PARAMETER Denied
        Specifies the users, computers, groups or other accounts to add to the list of accounts that are denied the right to replicate their passwords to this read-only domain controller (RODC). You can specify more than one value by using a comma-separated list. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
    .PARAMETER Identity
        Specifies an Active Directory domain controller object by providing one of the following values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A GUID (objectGUID)
        - An IPV4Address
        - A Global IPV6Address
        - A DNS Host Name (dNSHostName)
        - A name of the server object
        - A Distinguished Name of the NTDS Settings object
        - A distinguished name of the server object that represents the domain controller
        - A GUID of NTDS settings object under the configuration partition
        - A GUID of server object under the configuration partition
        - A distinguished name of the computer object that represents the domain controller.
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='AllowedPRP', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219311')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Allowed
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowedPRP"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Allowed", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("Allowed", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Denied
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DeniedPRP"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Denied", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("Denied", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADDCPRPIdentityHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADDomainController], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADDomainControllerPasswordReplicationPolicyUsage {
    <#
    .SYNOPSIS
        Gets the Active Directory accounts that are authenticated by a read-only domain controller or that are in the revealed list of the domain controller.
    .PARAMETER AuthenticatedAccounts
        Specifies a search for accounts that have been authenticated by a read-only domain controller.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        Specifies the credentials for the security context under which the task is performed. If this security context doesn't have directory level permissions to perform the task, then an error is returned by the directory. If running under the context of an Active Directory module for Windows PowerShell provider drive, the credentials information associated with the drive is used as the default value; otherwise, the currently logged on user security context is used.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory domain controller object by providing one of the following values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A GUID (objectGUID).
        - An IPV4Address.
        - A Global IPV6Address.
        - A DNS Host Name (dNSHostName).
        - A name of the server object.
        - A distinguished name of the NTDS Settings object.
        - A distinguished name of the server object that represents the domain controller.
        - A GUID of NTDS settings object under the configuration partition.
        - A GUID of server object under the configuration partition.
        - A distinguished name of the computer object that represents the domain controller.
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get the object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER RevealedAccounts
        Specifies a search for accounts which have passwords that are stored on the read-only domain controller.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services, or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name.
        - NetBIOS name.
        Directory server values:
        - Fully qualified directory server name.
        - NetBIOS name.
        - Fully qualified directory server name and port.
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline. - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive when the cmdlet runs in that drive.
        - By using the domain of the computer running Windows PowerShell.
    #>
    
    [CmdletBinding(DefaultParameterSetName='RevealedAccounts', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216349')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthenticatedAccounts
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AuthenticatedAccounts"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthenticatedAccounts", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("AuthenticatedAccounts", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADDCPRPUIdentityHM"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADDomainController], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # RevealedAccounts
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "RevealedAccounts"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("RevealedAccounts", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("RevealedAccounts", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADFineGrainedPasswordPolicy {
    <#
    .SYNOPSIS
        Gets one or more Active Directory fine-grained password policies.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, type `Get-Help about_ActiveDirectory_ObjectModel`.
        Note: PowerShell wildcards other than , such as ?, are not supported by the Filter* syntax.
        Note: To query using LDAP query strings, use the LDAPFilter parameter.
    .PARAMETER Identity
        Specifies an Active Directory fine-grained password policy object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to a fine-grained password policy object instance.
    .PARAMETER LDAPFilter
        Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description or type `Get-Help about_ActiveDirectory_Filter`.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet.
    .PARAMETER ResultPageSize
        Specifies the number of objects to include in one page for an Active Directory Domain Services query.
        The default is 256 objects per page.
    .PARAMETER ResultSetSize
        Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $Null (null value). You can use Ctrl+C to stop the query and return of objects.
        The default is $Null.
    .PARAMETER SearchBase
        Specifies an Active Directory path to search under.
        When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.
        When you run a cmdlet outside of an Active Directory provider drive against an Active Directory Domain Services target, the default value of this parameter is the default naming context of the target domain.
        When you run a cmdlet outside of an Active Directory provider drive against an Active Directory Lightweight Directory Services (AD LDS) target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance. If no default naming context is specified for the target AD LDS instance, then this parameter has no default value.
        When the value of the SearchBase parameter is set to an empty string and you are connected to a global catalog port, all partitions are searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a global catalog port, an error is thrown.
    .PARAMETER SearchScope
        Specifies the scope of an Active Directory search. The acceptable values for this parameter are:
        - Base or 0
        - OneLevel or 1
        - Subtree or 2
        A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219303')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADFineGrainedPPFilterHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # LDAPFilter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LDAPFilter", [System.String], $attributes)
        $parameters.Add("LDAPFilter", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # ResultPageSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateRangeAttribute(0, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultPageSize", [System.Int32], $attributes)
        $parameters.Add("ResultPageSize", $parameter)
        
        # ResultSetSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNullableRangeAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultSetSize", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ResultSetSize", $parameter)
        
        # SearchBase
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SearchBase", [System.String], $attributes)
        $parameters.Add("SearchBase", $parameter)
        
        # SearchScope
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SearchScope", [Microsoft.ActiveDirectory.Management.ADSearchScope], $attributes)
        $parameters.Add("SearchScope", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADFineGrainedPasswordPolicySubject {
    <#
    .SYNOPSIS
        Gets the users and groups to which a fine-grained password policy is applied.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory fine-grained password policy object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A name (name)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to a fine-grained password policy object instance.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(HelpUri='http://go.microsoft.com/fwlink/?LinkId=219310')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADFGPPSubjectIdentityHM"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADForest {
    <#
    .SYNOPSIS
        Gets an Active Directory forest.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name such as User1 or Domain01\User01, or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Current
        Specifies whether to return the domain of the local computer or the current logged on user. The acceptable values for this parameter are:
        - LocalComputer or 0
        - LoggedOnUser  or 1
    .PARAMETER Identity
        Specifies an Active Directory forest object by providing one of the following attribute values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A fully qualified domain name
        - A GUID (objectGUID)
        - A DNS host name
        - A NetBIOS name
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to a forest object instance.
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Directory Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Current', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219305')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Current
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Current"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Current", [Microsoft.ActiveDirectory.Management.Commands.ADCurrentForestType], $attributes)
        $parameters.Add("Current", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADForest], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADGroup {
    <#
    .SYNOPSIS
        Gets one or more Active Directory groups.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, type `Get-Help about_ActiveDirectory_ObjectModel`.
        Note: PowerShell wildcards other than \ , such as ?, are not supported by the Filter* syntax.
        Note: To query using LDAP query strings, use the LDAPFilter parameter.
    .PARAMETER Identity
        Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A security accounts manager account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER LDAPFilter
        Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description or type `Get-Help about_ActiveDirectory_Filter`.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter does not take any default value.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet.
    .PARAMETER ResultPageSize
        Specifies the number of objects to include in one page for an AD DS query.
        The default is 256 objects per page.
    .PARAMETER ResultSetSize
        Specifies the maximum number of objects to return for an AD DS query. If you want to receive all of the objects, set this parameter to $Null (null value). You can use Ctrl+C to stop the query and return of objects.
        The default is $Null.
    .PARAMETER SearchBase
        Specifies an Active Directory path to search under.
        When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.
        When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.
        When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance. If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.
        When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions are searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error is thrown.
    .PARAMETER SearchScope
        Specifies the scope of an Active Directory search. The acceptable values for this parameter are:
        - Base or 0
        - OneLevel or 1
        - Subtree or 2
        A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER ShowMemberTimeToLive
        Indicates that this cmdlet displays Time to Live (TTL) values for group members.
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219302')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADGroupFilterHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADGroup], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # LDAPFilter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LDAPFilter", [System.String], $attributes)
        $parameters.Add("LDAPFilter", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # ResultPageSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateRangeAttribute(0, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultPageSize", [System.Int32], $attributes)
        $parameters.Add("ResultPageSize", $parameter)
        
        # ResultSetSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNullableRangeAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultSetSize", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ResultSetSize", $parameter)
        
        # SearchBase
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SearchBase", [System.String], $attributes)
        $parameters.Add("SearchBase", $parameter)
        
        # SearchScope
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SearchScope", [Microsoft.ActiveDirectory.Management.ADSearchScope], $attributes)
        $parameters.Add("SearchScope", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # ShowMemberTimeToLive
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ShowMemberTimeToLive", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("ShowMemberTimeToLive", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADGroupMember {
    <#
    .SYNOPSIS
        Gets the members of an Active Directory group.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A Security Account Manager account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter does not take a default value.
    .PARAMETER Recursive
        Specifies that the cmdlet get all members in the hierarchy of a group that do not contain child objects.
        If the specified group does not have any members, then nothing is returned.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(HelpUri='http://go.microsoft.com/fwlink/?LinkId=219308')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADGroupMemberIdentityHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADGroup], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # Recursive
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Recursive", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("Recursive", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADObject {
    <#
    .SYNOPSIS
        Gets one or more Active Directory objects.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, type `Get-Help about_ActiveDirectory_ObjectModel`.
        Note: PowerShell wildcards other than , such as ?, are not supported by the Filter* syntax.
        Note: To query using LDAP query strings, use the LDAPFilter parameter.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        Derived types, such as the following, are also accepted:
        - Microsoft.ActiveDirectory.Management.ADGroup - Microsoft.ActiveDirectory.Management.ADUser - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADServiceAccount - Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy - Microsoft.ActiveDirectory.Management.ADDomain
    .PARAMETER IncludeDeletedObjects
        Indicates that this cmdlet retrieves deleted objects and the deactivated forward and backward links. When this parameter is specified, the cmdlet uses the following LDAP controls:
        - Show Deleted Objects (1.2.840.113556.1.4.417)
        - Show Deactivated Links (1.2.840.113556.1.4.2065)
        Note: If this parameter is not specified, the cmdlet does not return or operate on deleted objects.
    .PARAMETER LDAPFilter
        Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description or type `Get-Help about_ActiveDirectory_Filter`.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter does not take a default value.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet.
    .PARAMETER ResultPageSize
        Specifies the number of objects to include in one page for an AD DS query.
        The default is 256 objects per page.
    .PARAMETER ResultSetSize
        Specifies the maximum number of objects to return for an AD DS query. If you want to receive all of the objects, set this parameter to $Null (null value). You can use Ctrl+C to stop the query and return of objects.
        The default is $Null.
    .PARAMETER SearchBase
        Specifies an Active Directory path to search.
        When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.
        When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.
        When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target AD LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance. If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.
        When the value of the SearchBase parameter is set to an empty string and you are connected to a global catalog (GC) port, all partitions are searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error is thrown.
    .PARAMETER SearchScope
        Specifies the scope of an Active Directory search. The acceptable values for this parameter are:
        - Base or 0
        - OneLevel or 1
        - Subtree or 2
        A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219298')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADObjectFilterHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADObject], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # IncludeDeletedObjects
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("IncludeDeletedObjects", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("IncludeDeletedObjects", $parameter)
        
        # LDAPFilter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LDAPFilter", [System.String], $attributes)
        $parameters.Add("LDAPFilter", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # ResultPageSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateRangeAttribute(0, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultPageSize", [System.Int32], $attributes)
        $parameters.Add("ResultPageSize", $parameter)
        
        # ResultSetSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNullableRangeAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultSetSize", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ResultSetSize", $parameter)
        
        # SearchBase
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SearchBase", [System.String], $attributes)
        $parameters.Add("SearchBase", $parameter)
        
        # SearchScope
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SearchScope", [Microsoft.ActiveDirectory.Management.ADSearchScope], $attributes)
        $parameters.Add("SearchScope", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADOptionalFeature {
    <#
    .SYNOPSIS
        Gets one or more Active Directory optional features.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, type `Get-Help about_ActiveDirectory_ObjectModel`.
        Note: PowerShell wildcards other than asterisk ( ), such as question mark (?), are not supported by the Filter* syntax.
        Note: To query using LDAP query strings, use the LDAPFilter parameter.
    .PARAMETER Identity
        Specifies an Active Directory optional feature object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A fully qualified domain name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an optional feature object instance.
    .PARAMETER LDAPFilter
        Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description or type `Get-Help about_ActiveDirectory_Filter`.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet.
    .PARAMETER ResultPageSize
        Specifies the number of objects to include in one page for an Active Directory Domain Services (AD DS) query.
        The default is 256 objects per page.
    .PARAMETER ResultSetSize
        Specifies the maximum number of objects to return for an AD DS query. If you want to receive all of the objects, set this parameter to $Null (null value). You can use Ctrl+C to stop the query and return of objects.
        The default is $Null.
    .PARAMETER SearchBase
        Specifies an Active Directory path to search under.
        When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.
        When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.
        When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance. If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.
        When the value of the SearchBase parameter is set to an empty string and you are connected to a global catalog (GC) port, all partitions are searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error is thrown.
    .PARAMETER SearchScope
        Specifies the scope of an Active Directory search. The acceptable values for this parameter are:
        - Base or 0
        - OneLevel or 1
        - Subtree or 2
        A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - FQDN
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219318')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADOFFilterHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADOptionalFeature], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # LDAPFilter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LDAPFilter", [System.String], $attributes)
        $parameters.Add("LDAPFilter", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # ResultPageSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateRangeAttribute(0, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultPageSize", [System.Int32], $attributes)
        $parameters.Add("ResultPageSize", $parameter)
        
        # ResultSetSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNullableRangeAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultSetSize", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ResultSetSize", $parameter)
        
        # SearchBase
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SearchBase", [System.String], $attributes)
        $parameters.Add("SearchBase", $parameter)
        
        # SearchScope
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SearchScope", [Microsoft.ActiveDirectory.Management.ADSearchScope], $attributes)
        $parameters.Add("SearchScope", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADOrganizationalUnit {
    <#
    .SYNOPSIS
        Gets one or more Active Directory organizational units.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, type `Get-Help about_ActiveDirectory_ObjectModel`.
        Note: PowerShell wildcards other than , such as ?, are not supported by the Filter* syntax.
        Note: To query using LDAP query strings, use the LDAPFilter parameter.
    .PARAMETER Identity
        Specifies an Active Directory organizational unit object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A Security Account Manager account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER LDAPFilter
        Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description or type `Get-Help about_ActiveDirectory_Filter`.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet.
    .PARAMETER ResultPageSize
        Specifies the number of objects to include in one page for an AD DS query.
        The default is 256 objects per page.
    .PARAMETER ResultSetSize
        Specifies the maximum number of objects to return for an AD DS query. If you want to receive all of the objects, set this parameter to $Null (null value). You can use Ctrl+C to stop the query and return of objects.
        The default is $Null.
    .PARAMETER SearchBase
        Specifies an Active Directory path to search.
        When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.
        When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.
        When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target AD LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance. If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.
        When the value of the SearchBase parameter is set to an empty string and you are connected to a global catalog (GC) port, all partitions are searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error is thrown.
    .PARAMETER SearchScope
        Specifies the scope of an Active Directory search.  The acceptable values for this parameter are:
        - Base or 0
        - OneLevel or 1
        - Subtree or 2
        A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219307')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADOUFilterHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADOrganizationalUnit], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # LDAPFilter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LDAPFilter", [System.String], $attributes)
        $parameters.Add("LDAPFilter", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # ResultPageSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateRangeAttribute(0, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultPageSize", [System.Int32], $attributes)
        $parameters.Add("ResultPageSize", $parameter)
        
        # ResultSetSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNullableRangeAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultSetSize", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ResultSetSize", $parameter)
        
        # SearchBase
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SearchBase", [System.String], $attributes)
        $parameters.Add("SearchBase", $parameter)
        
        # SearchScope
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SearchScope", [Microsoft.ActiveDirectory.Management.ADSearchScope], $attributes)
        $parameters.Add("SearchScope", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADPrincipalGroupMembership {
    <#
    .SYNOPSIS
        Gets the Active Directory groups that have a specified user, computer, group, or service account.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory principal object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        Derived types, such as the following are also accepted:
        - Microsoft.ActiveDirectory.Management.ADGroup - Microsoft.ActiveDirectory.Management.ADUser - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADServiceAccount
    .PARAMETER Partition
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER ResourceContextPartition
        Specifies the distinguished name of the partition of an AD or AD LDS instance to search. Use this parameter with the ResourceContextServer parameter to specify a partition hosted by the specified server. If the ResourceContextPartition parameter is not specified, the default partition of the ResourceContextServer is searched.
    .PARAMETER ResourceContextServer
        Specifies that the cmdlet return a list of groups that the user is a member of and that reside in the specified domain. Use this parameter to search for groups in a domain that is not the domain where the user's account resides. To search a partition other than the default partition in this domain, also specify the ResourceContextPartition parameter.
    .PARAMETER Server
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    #>
    
    [CmdletBinding(DefaultParameterSetName='Identity', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219309')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADPrincipalGMIdentityHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADPrincipal], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # ResourceContextPartition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResourceContextPartition", [System.String], $attributes)
        $parameters.Add("ResourceContextPartition", $parameter)
        
        # ResourceContextServer
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResourceContextServer", [System.String], $attributes)
        $parameters.Add("ResourceContextServer", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADReplicationAttributeMetadata {
    <#
    .SYNOPSIS
        Gets the replication metadata for one or more Active Directory replication partners.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies a user account that has permission to perform this action. The default is the current user.
        Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet. If you type a user name, you are prompted for a password.
        This parameter is not supported by any providers installed with Windows PowerShell.
    .PARAMETER Filter
        Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.
    .PARAMETER IncludeDeletedObjects
        Specifies to retrieve deleted objects and the deactivated forward and backward links. When this parameter is specified, the cmdlet uses the following Lightweight Directory Access Protocol (LDAP) controls:
        - Show Deleted Objects (1.2.840.113556.1.4.417)
        - Show Deactivated Links (1.2.840.113556.1.4.2065)
        Note: If this parameter is not specified, the cmdlet does not return or operate on deleted objects.
    .PARAMETER Object
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        Derived types, such as the following are also accepted:
        - Microsoft.ActiveDirectory.Management.ADGroup - Microsoft.ActiveDirectory.Management.ADUser - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADServiceAccount - Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy - Microsoft.ActiveDirectory.Management.ADDomain
    .PARAMETER Properties
        Specifies a list of one or more attribute names as a comma separated list to return the metadata for replication partners. This parameter also accepts * (wildcard) to indicate to return all attributes set on the object.
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Directory Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER ShowAllLinkedValues
        Indicates that the cmdlet returns all linked values if the attribute returned is multi-valued.
    #>
    
    [CmdletBinding(HelpUri='http://go.microsoft.com/fwlink/?LinkId=216351')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # IncludeDeletedObjects
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("IncludeDeletedObjects", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("IncludeDeletedObjects", $parameter)
        
        # Object
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Object", [Microsoft.ActiveDirectory.Management.ADObject], $attributes)
        $parameters.Add("Object", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property', 'Attribute', 'Attributes')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 2
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # ShowAllLinkedValues
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ShowAllLinkedValues", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("ShowAllLinkedValues", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADReplicationConnection {
    <#
    .SYNOPSIS
        Returns a specific Active Directory replication connection or a set of AD replication connection objects based on a specified filter.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, see about_ActiveDirectory_ObjectModel.
        Note: PowerShell wildcards other than , such as ?, are not supported by the Filter* syntax.
        Note: To query using LDAP query strings, use the LDAPFilter parameter.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet.
    .PARAMETER Server
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216352')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADReplicationConnection], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADReplicationFailure {
    <#
    .SYNOPSIS
        Returns a collection of data describing an Active Directory replication failure.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies a user account that has permission to perform this action. The default is the current user.
        Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet. If you type a user name, you will be prompted for a password.
        This parameter is not supported by any providers installed with Windows PowerShell.
    .PARAMETER EnumeratingServer
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER Filter
        Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.
    .PARAMETER Scope
        Specifies the type of object used as input by the Target parameter. The acceptable values for this parameter are:
        - Server
        - Site
        - Domain
        - Forest
    .PARAMETER Target
        Specifies either one or more (using a comma separated list) of Active Directory domain controllers, sites, domains, or forests. It returns results for all the domain controllers that are specified or that are part of the specified container.
    #>
    
    [CmdletBinding(DefaultParameterSetName='Target', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216353')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # EnumeratingServer
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("EnumeratingServer", [System.String], $attributes)
        $parameters.Add("EnumeratingServer", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Scope
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.ParameterSetName = "Scope"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('ReplicationSite')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Scope", [Microsoft.ActiveDirectory.Management.Commands.ADScopeType], $attributes)
        $parameters.Add("Scope", $parameter)
        
        # Target
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Scope"
        $attribute.ValueFromPipeline = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "TargetParameterHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Target"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "TargetParameterHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Name', 'HostName', 'Site', 'Domain', 'Forest')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Target", [System.Object[]], $attributes)
        $parameters.Add("Target", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADReplicationPartnerMetadata {
    <#
    .SYNOPSIS
        Returns the replication metadata for a set of one or more replication partners.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies a user account that has permission to perform this action. The default is the current user.
        Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet. If you type a user name, you will be prompted for a password.
        This parameter is not supported by any providers installed with Windows PowerShell.
    .PARAMETER EnumerationServer
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER Filter
        Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.
    .PARAMETER Partition
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER PartnerType
        Specifies an enumeration of the replication types returned by this cmdlet. The acceptable values for this parameter are:
        - Inbound
        - Outbound
        - Both
    .PARAMETER Scope
        Specifies the scope type for the Target parameter when used as input. The acceptable values for this parameter are:
        - Server
        - Site
        - Domain
        - Forest
        Server
        Site
        Domain
        Forest
    .PARAMETER Target
        Specifies the target for returning replication partner metadata as either one or more domain controllers, sites, domains, or forests. If multiple values for the target are to be specified, they need to be separated by commas. This parameter will return results for all the domain controllers specified or for part of the specified container.
    #>
    
    [CmdletBinding(DefaultParameterSetName='Target', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216354')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # EnumerationServer
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("EnumerationServer", [System.String], $attributes)
        $parameters.Add("EnumerationServer", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 2
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('NC', 'NamingContext')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String[]], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PartnerType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 3
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PartnerType", [Microsoft.ActiveDirectory.Management.Commands.ADPartnerType], $attributes)
        $parameters.Add("PartnerType", $parameter)
        
        # Scope
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.ParameterSetName = "Scope"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Scope", [Microsoft.ActiveDirectory.Management.Commands.ADScopeType], $attributes)
        $parameters.Add("Scope", $parameter)
        
        # Target
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Name', 'HostName', 'Site', 'Domain', 'Forest')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Scope"
        $attribute.ValueFromPipeline = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "TargetParameterHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Target"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "TargetParameterHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Target", [System.Object[]], $attributes)
        $parameters.Add("Target", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADReplicationQueueOperation {
    <#
    .SYNOPSIS
        Returns the contents of the replication queue for a specified server.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies a user account that has permission to perform this action. The default is the current user.
        Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet. If you type a user name, you will be prompted for a password.
        This parameter is not supported by any providers installed with Windows PowerShell.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER Filter
        Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter does not take any default value.
    #>
    
    [CmdletBinding(HelpUri='http://go.microsoft.com/fwlink/?LinkId=216355')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 2
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('NC', 'NamingContext')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String[]], $attributes)
        $parameters.Add("Partition", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADReplicationSite {
    <#
    .SYNOPSIS
        Returns a specific Active Directory replication site or a set of replication site objects based on a specified filter.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, type `Get-Help about_ActiveDirectory_ObjectModel`.
        Note: PowerShell wildcards other than , such as ?, are not supported by the Filter* syntax.
        Note: To query using LDAP query strings, use the LDAPFilter parameter.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
        Domain name values:
        - Fully qualified domain name (FQDN)
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
        - By using Server value from objects passed through the pipeline.  - By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
        - By using the domain of the computer running PowerShell.
    #>
    
    [CmdletBinding(DefaultParameterSetName='Identity', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216357')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADReplicationSite], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADReplicationSiteLink {
    <#
    .SYNOPSIS
        Returns a specific Active Directory site link or a set of site links based on a specified filter.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, type `Get-Help about_ActiveDirectory_ObjectModel`.
        Note: To query using LDAP query strings, use the LDAPFilter parameter.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet.
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216358')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADReplicationSiteLink], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADReplicationSiteLinkBridge {
    <#
    .SYNOPSIS
        Gets a specific Active Directory site link bridge or a set of site link bridge objects based on a specified filter.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, type `Get-Help about_ActiveDirectory_ObjectModel`.
        Note: PowerShell wildcards other than , such as ?, are not supported by the Filter* syntax.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet.
    .PARAMETER Server
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216359')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADReplicationSiteLinkBridge], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADReplicationSubnet {
    <#
    .SYNOPSIS
        Gets one or more Active Directory subnets.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, see about_ActiveDirectory_ObjectModel.
        Note: PowerShell wildcards other than , such as ?, are not supported by the Filter* syntax.
        Note: To query using LDAP query strings, use the LDAPFilter parameter.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
        Domain name values:
        - Fully qualified domain name (FQDN)
        - NetBIOS name
        Directory server values:
        - Fully qualified domain name (FQDN)
        - NetBIOS name
        The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
        - By using Server value from objects passed through the pipeline.  - By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
        - By using the domain of the computer running PowerShell.
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216360')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADReplicationSubnet], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADReplicationUpToDatenessVectorTable {
    <#
    .SYNOPSIS
        Displays the highest Update Sequence Number (USN) for the specified domain controller.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies a user account that has permission to perform this action. The default is the current user.
        Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet. If you type a user name, you will be prompted for a password.
        This parameter is not supported by any providers installed with Windows PowerShell.
    .PARAMETER EnumerationServer
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
        Specify the instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER Filter
        Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain. In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter does not take any default value.
    .PARAMETER Scope
        Specifies the type of object used as input by the Target parameter. The acceptable values for this parameter are:
        - Server
        - Site
        - Domain
        - Forest
    .PARAMETER Target
        Specifies either one or more (using a comma separated list) of Active Directory domain controllers, sites, domains, or forests. It will return results for all the domain controllers that are specified or that are part of the specified container.
    #>
    
    [CmdletBinding(DefaultParameterSetName='Target', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216361')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # EnumerationServer
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("EnumerationServer", [System.String], $attributes)
        $parameters.Add("EnumerationServer", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 2
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('NC', 'NamingContext')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String[]], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # Scope
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('ReplicationSite')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.ParameterSetName = "Scope"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Scope", [Microsoft.ActiveDirectory.Management.Commands.ADScopeType], $attributes)
        $parameters.Add("Scope", $parameter)
        
        # Target
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Target"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "TargetParameterHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Scope"
        $attribute.ValueFromPipeline = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "TargetParameterHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Name', 'HostName', 'Site', 'Domain', 'Forest')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Target", [System.Object[]], $attributes)
        $parameters.Add("Target", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADResourceProperty {
    <#
    .SYNOPSIS
        Gets one or more resource properties.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, type `Get-Help about_ActiveDirectory_ObjectModel`.
        Note: PowerShell wildcards other than , such as ?, are not supported by the Filter* syntax.
        Note: To query using LDAP query strings, use the LDAPFilter parameter.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER LDAPFilter
        Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description or type `Get-Help about_ActiveDirectory_Filter`.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet.
    .PARAMETER ResultPageSize
        Specifies the number of objects to include in one page for an Active Directory Domain Services query.
        The default is 256 objects per page.
    .PARAMETER ResultSetSize
        Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $Null (null value). You can use Ctrl+C to stop the query and return of objects.
        The default is $Null.
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216362')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADUserFilterHM"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADResourceProperty], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # LDAPFilter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LDAPFilter", [System.String], $attributes)
        $parameters.Add("LDAPFilter", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # ResultPageSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateRangeAttribute(0, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultPageSize", [System.Int32], $attributes)
        $parameters.Add("ResultPageSize", $parameter)
        
        # ResultSetSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNullableRangeAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultSetSize", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ResultSetSize", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADResourcePropertyList {
    <#
    .SYNOPSIS
        Gets resource property lists from Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax: he following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, type `Get-Help about_ActiveDirectory_ObjectModel`.
        Note: PowerShell wildcards other than "*", such as "?" are not supported by the Filter syntax.
        Note: To query using LDAP query strings, use the LDAPFilter parameter.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER LDAPFilter
        Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description or type `Get-Help about_ActiveDirectory_Filter`.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet.
    .PARAMETER ResultPageSize
        Specifies the number of objects to include in one page for an Active Directory Domain Services query.
        The default is 256 objects per page.
    .PARAMETER ResultSetSize
        Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $Null (null value). You can use Ctrl+C to stop the query and return of objects.
        The default is $Null.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216363')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADUserFilterHM"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADResourcePropertyList], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # LDAPFilter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LDAPFilter", [System.String], $attributes)
        $parameters.Add("LDAPFilter", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # ResultPageSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateRangeAttribute(0, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultPageSize", [System.Int32], $attributes)
        $parameters.Add("ResultPageSize", $parameter)
        
        # ResultSetSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNullableRangeAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultSetSize", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ResultSetSize", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADResourcePropertyValueType {
    <#
    .SYNOPSIS
        Gets a resource property value type from Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, type `Get-Help about_ActiveDirectory_ObjectModel`.
        Note: PowerShell wildcards other than , such as ?, are not supported by the Filter* syntax.
        Note: To query using LDAP query strings, use the LDAPFilter parameter.
    .PARAMETER Identity
        Specifies an Active Directory user object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER LDAPFilter
        Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description or type `Get-Help about_ActiveDirectory_Filter`.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet. For more information, type `Get-Help Get-Member`.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
        Domain name values:
        - Fully qualified domain name (FQDN)
        - NetBIOS name
        Directory server values:
        - Fully qualified domain name (FQDN)
        - NetBIOS name
        The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
        - By using Server value from objects passed through the pipeline.  - By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
        - By using the domain of the computer running PowerShell.
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216364')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADUserFilterHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADResourcePropertyValueType], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # LDAPFilter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LDAPFilter", [System.String], $attributes)
        $parameters.Add("LDAPFilter", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADRootDSE {
    <#
    .SYNOPSIS
        Gets the root of a directory server information tree.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet. For more information, type `Get-Help Get-Member`.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
        Domain name values:
        - Fully qualified domain name (FQDN)
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
        - By using Server value from objects passed through the pipeline.  - By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
        - By using the domain of the computer running PowerShell.
    #>
    
    [CmdletBinding(HelpUri='http://go.microsoft.com/fwlink/?LinkId=219299')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADServiceAccount {
    <#
    .SYNOPSIS
        Gets one or more Active Directory managed service accounts or group managed service accounts.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as `User1` or `Domain01\User01` or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, type `Get-Help about_ActiveDirectory_ObjectModel`.
    .PARAMETER Identity
        Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER LDAPFilter
        Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description or type `Get-Help about_ActiveDirectory_Filter`.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value will be used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.
        In AD DS environments, a default value for Partition will be set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.
        In AD LDS environments, a default value for Partition will be set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet. For more information, type `Get-Help Get-Member`.
    .PARAMETER ResultPageSize
        Specifies the number of objects to include in one page for an Active Directory Domain Services query.
        The default is 256 objects per page.
    .PARAMETER ResultSetSize
        Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to `$Null` (null value). You can use Ctrl+C to stop the query and return of objects.
        The default is `$Null`.
    .PARAMETER SearchBase
        Specifies an Active Directory path to search under.
        When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.
        When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.
        When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance. If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.
        When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions will be searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error will be thrown.
    .PARAMETER SearchScope
        Specifies the scope of an Active Directory search. The acceptable values for this parameter are:
        - Base or 0
        - OneLevel or 1
        - Subtree or 2
        A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
        Domain name values:
        - Fully qualified domain name (FQDN)
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
        - By using Server value from objects passed through the pipeline.  - By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
        - By using the domain of the computer running PowerShell.
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301398')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADServiceAccountFilterHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADServiceAccount], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # LDAPFilter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LDAPFilter", [System.String], $attributes)
        $parameters.Add("LDAPFilter", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # ResultPageSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateRangeAttribute(0, 2147483647)
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultPageSize", [System.Int32], $attributes)
        $parameters.Add("ResultPageSize", $parameter)
        
        # ResultSetSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNullableRangeAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultSetSize", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ResultSetSize", $parameter)
        
        # SearchBase
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SearchBase", [System.String], $attributes)
        $parameters.Add("SearchBase", $parameter)
        
        # SearchScope
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SearchScope", [Microsoft.ActiveDirectory.Management.ADSearchScope], $attributes)
        $parameters.Add("SearchScope", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADTrust {
    <#
    .SYNOPSIS
        Gets all trusted domain objects in the directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, type `Get-Help about_ActiveDirectory_ObjectModel`.
        Note: To query using LDAP query strings, use the LDAPFilter parameter.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A Distinguished Name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER InputObject
        Specifies an Active Directory input object. This parameter can accept one of the following object types:
        - ADForest
        - ADDomain
        - ADObject
        The cmdlet will retrieve the corresponding ADTrust based on the input object specified.
    .PARAMETER LDAPFilter
        Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description or type `Get-Help about_ActiveDirectory_Filter`.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216369')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADTrust], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # InputObject
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "InputObject"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("InputObject", [System.Object], $attributes)
        $parameters.Add("InputObject", $parameter)
        
        # LDAPFilter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LDAPFilter", [System.String], $attributes)
        $parameters.Add("LDAPFilter", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADUser {
    <#
    .SYNOPSIS
        Gets one or more Active Directory users.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Filter
        Specifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type `Get-Help about_ActiveDirectory_Filter`.
        Syntax:
        The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter.
        <filter>  ::= "{" <FilterComponentList> "}"
        <FilterComponentList> ::= <FilterComponent> | <FilterComponent> <JoinOperator> <FilterComponent> | <NotOperator>  <FilterComponent>
        <FilterComponent> ::= <attr> <FilterOperator> <value> | "(" <FilterComponent> ")"
        <FilterOperator> ::= "-eq" | "-le" | "-ge" | "-ne" | "-lt" | "-gt"| "-approx" | "-bor" | "-band" | "-recursivematch" | "-like" | "-notlike"
        <JoinOperator> ::= "-and" | "-or"
        <NotOperator> ::= "-not"
        <attr> ::= <PropertyName> | <LDAPDisplayName of the attribute>
        <value>::= <compare this value with an <attr> by using the specified <FilterOperator>>
        For a list of supported types for <value>, type `Get-Help about_ActiveDirectory_ObjectModel`.
        Note: For String parameter type, PowerShell will cast the filter query to a string while processing the command. When using a string variable as a value in the filter component, make sure that it complies with the PowerShell Quoting Rules (/powershell/module/microsoft.powershell.core/about/about_quoting_rules). For example, if the filter expression is double-quoted, the variable should be enclosed using single quotation marks: Get-ADUser -Filter "Name -like '$UserName'" . On the contrary, if curly braces are used to enclose the filter, the variable should not be quoted at all: Get-ADUser -Filter {Name -like $UserName} .
        Note: PowerShell wildcards other than \ , such as ?, are not supported by the Filter* syntax.
        Note: To query using LDAP query strings, use the LDAPFilter parameter.
    .PARAMETER Identity
        Specifies an Active Directory user object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER LDAPFilter
        Specifies an LDAP query string that is used to filter Active Directory objects. You can use this parameter to run your existing LDAP queries. The Filter parameter syntax supports the same functionality as the LDAP syntax. For more information, see the Filter parameter description or type `Get-Help about_ActiveDirectory_Filter`.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first, and when a default value can be determined, no further rules are evaluated.
        In AD DS environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive. - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In AD LDS environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive. - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance. - If none of the previous cases apply, the Partition parameter does not take any default value.
    .PARAMETER Properties
        Specifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set.
        Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk).
        To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute.
        To retrieve properties and display them for an object, you can use the Get- cmdlet associated with the object and pass the output to the Get-Member * cmdlet.
    .PARAMETER ResultPageSize
        Specifies the number of objects to include in one page for an Active Directory Domain Services query.
        The default is 256 objects per page.
    .PARAMETER ResultSetSize
        Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $Null (null value). You can use Ctrl+C to stop the query and return of objects.
        The default is $Null.
    .PARAMETER SearchBase
        Specifies an Active Directory path to search under.
        When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.
        When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain.
        When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance. If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.
        When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions are searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error is thrown.
    .PARAMETER SearchScope
        Specifies the scope of an Active Directory search. The acceptable values for this parameter are:
        - Base or 0
        - OneLevel or 1
        - Subtree or 2
        A SearchScope with a Base value searches only for the given user. If an OU is specified in the SearchBase parameter, no user will be returned by, for example, a specified Filter statement. A OneLevel query searches the immediate children of that path or object. This option only works when an OU is given as the SearchBase. If a user is given, no results are returned. A Subtree query searches the current path or object and all children of that path or object.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
        Domain name values:
        - Fully qualified domain name (FQDN)
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
        - By using Server value from objects passed through the pipeline. - By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
        - By using the domain of the computer running PowerShell.
    #>
    
    [CmdletBinding(DefaultParameterSetName='Filter', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301397')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Filter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attribute.Mandatory = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADUserFilterHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.TransformFilterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Filter", [System.String], $attributes)
        $parameters.Add("Filter", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADUser], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # LDAPFilter
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LDAPFilter", [System.String], $attributes)
        $parameters.Add("LDAPFilter", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # Properties
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Property')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Properties", [System.String[]], $attributes)
        $parameters.Add("Properties", $parameter)
        
        # ResultPageSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateRangeAttribute(0, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultPageSize", [System.Int32], $attributes)
        $parameters.Add("ResultPageSize", $parameter)
        
        # ResultSetSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNullableRangeAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultSetSize", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ResultSetSize", $parameter)
        
        # SearchBase
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SearchBase", [System.String], $attributes)
        $parameters.Add("SearchBase", $parameter)
        
        # SearchScope
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Filter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LdapFilter"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SearchScope", [Microsoft.ActiveDirectory.Management.ADSearchScope], $attributes)
        $parameters.Add("SearchScope", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Get-ADUserResultantPasswordPolicy {
    <#
    .SYNOPSIS
        Gets the resultant password policy for a user.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory user object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - Security identifier (objectSid)
        - SAM account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.
        In AD DS environments, a default value for Partition will be set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.
        In AD LDS environments, a default value for Partition will be set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(DefaultParameterSetName='Identity', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219313')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADUserResultantPPIdentityHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADUser], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Grant-ADAuthenticationPolicySiloAccess {
    <#
    .SYNOPSIS
        Grants permission to join an authentication policy silo.
    .PARAMETER Account
        Specifies the account to which to grant access to the authentication policy silo. Specify the account in one of the following formats:
        - A distinguished name
        - A GUID
        - A security identifier
        - A SAM account name
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        You can also use this parameter to specify a variable that contains user, computer, and service account objects.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate. A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies a user account that has permission to perform the task. The default is the current user. Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet.
        By default, the cmdlet uses the credentials of the currently logged on user unless the cmdlet is run from an Active Directory Domain Services Windows PowerShell provider drive. If you run the cmdlet in a provider drive, the account associated with the drive is the default.
        If you specify credentials that do not have permission to perform the task, the cmdlet returns an error.
    .PARAMETER Identity
        Specifies an ADAuthenticationPolicySilo object. Specify the authentication policy silo object in one of the following formats:
        - A distinguished name
        - A GUID
        - A name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to which to connect, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:  - A Fully qualified domain name
        - A NetBIOS name
        Directory server values:
        - A Fully qualified directory server name
        - A NetBIOS name
        - A Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301414')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Account
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Account", [Microsoft.ActiveDirectory.Management.ADAccount], $attributes)
        $parameters.Add("Account", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attribute.HelpMessageBaseName = "Microsoft.ActiveDirectory.Management"
        $attribute.HelpMessageResourceId = "ADPrincipalGMIdentityHM"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicySilo], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Install-ADServiceAccount {
    <#
    .SYNOPSIS
        Installs an Active Directory managed service account on a computer or caches a group managed service account on a computer.
    .PARAMETER AccountPassword
        Specifies the account password as a secure string. This parameter enables you to specify the password of a standalone managed service account that you have provisioned and is ignored for group managed service accounts. This is required when you are installing a standalone managed service account on a server located on a segmented network (site) with read-only domain controllers (for example, a perimeter network or DMZ). In this case you should create the standalone managed service account, link it with the appropriate computer account, and assign a well-known password that must be passed when installing the standalone managed service account on the server on the read-only domain controller site with no access to writable domain controllers. If you pass both AccountPassword and PromptForPassword parameters, the AccountPassword parameter takes precedence.
    .PARAMETER AuthType
        Specifies the authentication method to use. Possible values for this parameter include: The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Force
        Forces installation of the service account.
    .PARAMETER Identity
        Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A security accounts manager account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER PromptForPassword
        Indicates that you can enter the password of a standalone managed service account that you have pre-provisioned and ignored for group managed service accounts. This is required when you are installing a standalone managed service account on a server located on a segmented network (site) with no access to writable domain controllers, but only read-only domain controllers (RODCs) (e.g. perimeter network or DMZ). In this case you should create the standalone managed service account, link it with the appropriate computer account, and assign a well-known password that must be passed when installing the standalone managed service account on the server on the RODC-only site. If you pass both AccountPassword and PromptForPassword parameters the AccountPassword parameter takes precedence.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219319')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AccountPassword
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountPassword", [System.Security.SecureString], $attributes)
        $parameters.Add("AccountPassword", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Force
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Force", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("Force", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADServiceAccount], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # PromptForPassword
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PromptForPassword", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PromptForPassword", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Move-ADDirectoryServer {
    <#
    .SYNOPSIS
        Moves a directory server in Active Directory to a new site.
    .PARAMETER AuthType
        Specifies the authentication method to use.  The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory server object by providing one of the following values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute.
        - Name of the server object (name)
        For Active Directory Lightweight Directory Services (AD LDS) instances the syntax is of a name is `<computer-name>$<instance-name>`
        Note: When you type this value in Windows PowerShell, you must use the backtick (`) as an escape character for the dollar sign ($), for example, asia-w7-vm4`$instance1 .
        For other Active Directory instances, use the value of the name property.
        - A distinguished Name of the NTDS Settings object
        - A distinguished name of the server object that represents the directory server
        - GUID (objectGUID) of server object under the configuration partition
        - GUID (objectGUID) of NTDS settings object under the configuration partition
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER Site
        Specifies the new site for the directory server. You can identify the site by one of the following property values. Note: The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A name (name)
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219321')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADDirectoryServer], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # Site
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Site", [Microsoft.ActiveDirectory.Management.ADReplicationSite], $attributes)
        $parameters.Add("Site", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Move-ADDirectoryServerOperationMasterRole {
    <#
    .SYNOPSIS
        Moves operation master roles to an Active Directory directory server.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Force
        Indicates that the cmdlet is used for seize operations on domain controllers with the flexible single master operations (FSMO) role.
    .PARAMETER Identity
        Specifies an Active Directory server object by providing one of the following values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute.
        - Name of the server object (name)
        For Active Directory Lightweight Directory Services (AD LDS) instances the syntax is of a name is `<computer-name>$<instance-name>`.
        Note: When you type this value in Windows PowerShell, you must use the backtick (`) as an escape character for the dollar sign ($). For instance, asia-w7-vm4`$instance1 .
        For other Active Directory instances, use the value of the name property.
        - The distinguished name of the NTDS Settings object
        - The distinguished name of the server object that represents the directory server
        - GUID (objectGUID) of server object under the configuration partition
        - GUID (objectGUID) of NTDS settings object under the configuration partition
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER OperationMasterRole
        Specifies one or more operation master roles to move to the specified directory server in Active Directory Domain Services. The acceptable values for this parameter are:
        - PDCEmulator or 0
        - RIDMaster or 1
        - InfrastructureMaster or 2
        - SchemaMaster or 3
        - DomainNamingMaster or 4
        To specify multiple operation master roles, use a comma-separated list.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219322')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Force
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Force", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("Force", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADDirectoryServer], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # OperationMasterRole
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateCountAttribute(0, 5)
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateCollectionIsUniqueAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OperationMasterRole", [Microsoft.ActiveDirectory.Management.ADOperationMasterRole[]], $attributes)
        $parameters.Add("OperationMasterRole", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Move-ADObject {
    <#
    .SYNOPSIS
        Moves an Active Directory object or a container of objects to a different container or domain.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, the Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        Derived types, such as the following, are also accepted:
        - Microsoft.ActiveDirectory.Management.ADGroup - Microsoft.ActiveDirectory.Management.ADUser - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADServiceAccount - Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy - Microsoft.ActiveDirectory.Management.ADDomain
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and when a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter does not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER TargetPath
        Specifies the new location for the object. This location must be the path to a container or organizational unit.
    .PARAMETER TargetServer
        Specifies the Active Directory instance to use by providing the following value for a corresponding domain name or directory server.
        Note: A cross-domain move requires a fully qualified server name and the use of the RID Master in both domains.
        Domain name values:
        - Fully qualified domain name (FQDN)
        Directory server values:
        - Fully qualified directory server name
        - Fully qualified directory server name and port
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219320')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADObject], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # TargetPath
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TargetPath", [System.String], $attributes)
        $parameters.Add("TargetPath", $parameter)
        
        # TargetServer
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TargetServer", [System.String], $attributes)
        $parameters.Add("TargetServer", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADAuthenticationPolicy {
    <#
    .SYNOPSIS
        Creates an Active Directory Domain Services authentication policy object.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate. A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER ComputerAllowedToAuthenticateTo
        Specifies the security descriptor definition language (SDDL) string of the security descriptor used to determine if the computer can authenticate to this account.
    .PARAMETER ComputerTGTLifetimeMins
        Specifies the lifetime in minutes for non-renewable ticket granting tickets (TGTs) for computer accounts.
    .PARAMETER Credential
        Specifies a user account that has permission to perform the task. The default is the current user. Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet.
        By default, the cmdlet uses the credentials of the currently logged on user unless the cmdlet is run from an Active Directory Domain Services Windows PowerShell provider drive. If you run the cmdlet in a provider drive, the account associated with the drive is the default.
        If you specify credentials that do not have permission to perform the task, the cmdlet returns an error.
    .PARAMETER Description
        Specifies a description for the object. This parameter sets the value of the description property for the object. The Lightweight Directory Access Protocol (LDAP) display name ( ldapDisplayName ) for this property is description.
    .PARAMETER Enforce
        Indicates that the authentication policy is enforced.
    .PARAMETER Instance
        Specifies an instance of an ADAuthenticationPolicy object to use as a template for a new ADAuthenticationPolicy object. To get the ADAuthenticationPolicy object to use as a template, use the Get-ADAuthenticationPolicy cmdlet.
    .PARAMETER Name
        Specifies the name of the object. This parameter sets the Name property of the Active Directory Domain Services object. The LDAP display name ( ldapDisplayName ) of this property is name.
    .PARAMETER OtherAttributes
        Specifies a list of object attribute values for attributes that are not represented by other parameters. You can set one or more attributes at the same time with this parameter, and if an attribute takes more than one value you can assign multiple values. To identify an attribute, specify the LDAPDisplayName ( ldapDisplayName ) defined for it in the Active Directory Domain Services schema.
        Specify the attribute and the value of the attribute in the following format: @{'AttributeLDAPDisplayName'=value}.
        To specify multiple values for an attribute, specify a comma separated list the values for the display name. You can specify values for more than one attribute by using semicolons to separate attribute value pairs.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ProtectedFromAccidentalDeletion
        Indicates whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER RollingNTLMSecret
        Beginning with Windows 10, version 1703, this feature is deprecated and should not be configured in Active Directory.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to which to connect, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER ServiceAllowedToAuthenticateFrom
        Specifies an access control expression used to determine from which devices the service can authenticate.
    .PARAMETER ServiceAllowedToAuthenticateTo
        Specifies the SDDL string of the security descriptor used to determine if the service can authenticate to this account.
    .PARAMETER ServiceAllowedNTLMNetworkAuthentication
        Specifies that the policy allows NTLM network authentication if the service account has an access control expression specified by the ServiceAllowedToAuthenticateFrom parameter.
    .PARAMETER ServiceTGTLifetimeMins
        Specifies the lifetime in minutes for non-renewable TGTs for service accounts.
    .PARAMETER UserAllowedToAuthenticateFrom
        Specifies an access control expression used to determine from which devices the users can authenticate.
    .PARAMETER UserAllowedToAuthenticateTo
        Specifies the SDDL string of the security descriptor used to determine if the users can authenticate to this account.
    .PARAMETER UserAllowedNTLMNetworkAuthentication
        Indicates that the policy allows NTLM network authentication if the user account has an access control expression specified by the UserAllowedToAuthenticateFrom parameter.
    .PARAMETER UserTGTLifetimeMins
        Specifies the lifetime in minutes for non-renewable TGTs for user accounts.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301406')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # ComputerAllowedToAuthenticateTo
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ComputerAllowedToAuthenticateTo", [System.String], $attributes)
        $parameters.Add("ComputerAllowedToAuthenticateTo", $parameter)
        
        # ComputerTGTLifetimeMins
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateRangeAttribute(45, 2147483647)
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ComputerTGTLifetimeMins", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ComputerTGTLifetimeMins", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Enforce
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Enforce", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("Enforce", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicy], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # Name
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Name", [System.String], $attributes)
        $parameters.Add("Name", $parameter)
        
        # OtherAttributes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OtherAttributes", [System.Collections.Hashtable], $attributes)
        $parameters.Add("OtherAttributes", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # RollingNTLMSecret
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("RollingNTLMSecret", [Microsoft.ActiveDirectory.Management.ADStrongNTLMPolicyType], $attributes)
        $parameters.Add("RollingNTLMSecret", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # ServiceAllowedToAuthenticateFrom
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ServiceAllowedToAuthenticateFrom", [System.String], $attributes)
        $parameters.Add("ServiceAllowedToAuthenticateFrom", $parameter)
        
        # ServiceAllowedToAuthenticateTo
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ServiceAllowedToAuthenticateTo", [System.String], $attributes)
        $parameters.Add("ServiceAllowedToAuthenticateTo", $parameter)
        
        # ServiceAllowedNTLMNetworkAuthentication
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ServiceAllowedNTLMNetworkAuthentication", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("ServiceAllowedNTLMNetworkAuthentication", $parameter)
        
        # ServiceTGTLifetimeMins
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateRangeAttribute(45, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ServiceTGTLifetimeMins", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ServiceTGTLifetimeMins", $parameter)
        
        # UserAllowedToAuthenticateFrom
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UserAllowedToAuthenticateFrom", [System.String], $attributes)
        $parameters.Add("UserAllowedToAuthenticateFrom", $parameter)
        
        # UserAllowedToAuthenticateTo
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UserAllowedToAuthenticateTo", [System.String], $attributes)
        $parameters.Add("UserAllowedToAuthenticateTo", $parameter)
        
        # UserAllowedNTLMNetworkAuthentication
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UserAllowedNTLMNetworkAuthentication", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("UserAllowedNTLMNetworkAuthentication", $parameter)
        
        # UserTGTLifetimeMins
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateRangeAttribute(45, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UserTGTLifetimeMins", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("UserTGTLifetimeMins", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADAuthenticationPolicySilo {
    <#
    .SYNOPSIS
        Creates an Active Directory Domain Services authentication policy silo object.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate. A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER ComputerAuthenticationPolicy
        Specifies the authentication policy that applies to computer accounts.
    .PARAMETER Credential
        Specifies a user account that has permission to perform the task. The default is the current user. Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet.
        By default, the cmdlet uses the credentials of the currently logged on user unless the cmdlet is run from an Active Directory Domain Services Windows PowerShell provider drive. If you run the cmdlet in a provider drive, the account associated with the drive is the default.
        If you specify credentials that do not have permission to perform the task, the cmdlet returns an error.
    .PARAMETER Description
        Specifies a description for the object. This parameter sets the value of the description property for the object. The Lightweight Directory Access Protocol (LDAP) display name ( ldapDisplayName ) for this property is description.
    .PARAMETER Enforce
        Indicates that the authentication policy silo is enforced.
    .PARAMETER Instance
        Specifies an instance of an ADAuthenticationPolicySilo object to use as a template for a new ADAuthenticationPolicySilo object. To get the ADAuthenticationPolicySilo object to use as a template, use the Get-ADAuthenticationPolicySilo cmdlet.
    .PARAMETER Name
        Specifies the name of the object. This parameter sets the Name property of the Active Directory Domain Services object. The LDAP display name ( ldapDisplayName ) of this property is name.
    .PARAMETER OtherAttributes
        Specifies a list of object attribute values for attributes that are not represented by other parameters. You can set one or more attributes at the same time with this parameter, and if an attribute takes more than one value you can assign multiple values. To identify an attribute, specify the LDAP display name ( ldapDisplayName ) defined for it in the Active Directory Domain Services schema.
        Specify the attribute and the value of the attribute in the following format: @{'AttributeLDAPDisplayName'=value}.
        To specify multiple values for an attribute, specify a comma separated list the values for the display name. You can specify values for more than one attribute by using semicolons to separate attribute value pairs.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ProtectedFromAccidentalDeletion
        Indicates whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to which to connect, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER ServiceAuthenticationPolicy
        Specifies the authentication policy that applies to managed service accounts.
    .PARAMETER UserAuthenticationPolicy
        Specifies the authentication policy that applies to user accounts.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301411')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # ComputerAuthenticationPolicy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ComputerAuthenticationPolicy", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicy], $attributes)
        $parameters.Add("ComputerAuthenticationPolicy", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Enforce
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Enforce", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("Enforce", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicySilo], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # Name
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Name", [System.String], $attributes)
        $parameters.Add("Name", $parameter)
        
        # OtherAttributes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OtherAttributes", [System.Collections.Hashtable], $attributes)
        $parameters.Add("OtherAttributes", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # ServiceAuthenticationPolicy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ServiceAuthenticationPolicy", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicy], $attributes)
        $parameters.Add("ServiceAuthenticationPolicy", $parameter)
        
        # UserAuthenticationPolicy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UserAuthenticationPolicy", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicy], $attributes)
        $parameters.Add("UserAuthenticationPolicy", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADCentralAccessPolicy {
    <#
    .SYNOPSIS
        Creates a new central access policy in Active Directory containing a set of central access rules.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The Lightweight Directory Access Protocol (LDAP) display name ( ldapDisplayName ) for this property is description.
    .PARAMETER Instance
        Specifies an instance of an Active Directory object to use as a template for a new Active Directory object.
        You can use an instance of an existing Active Directory object as a template or you can construct a new Active Directory object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing Active Directory object as a template for a new object. To retrieve an instance of an existing Active Directory object, use a cmdlet such as Get-ADObject . Then provide this object to the Instance parameter of the New-ADObject cmdlet to create a new Active Directory object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADObject and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADObject cmdlet to create the new Active Directory object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.
    .PARAMETER Name
        Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The Lightweight Directory Access Protocol (LDAP) display name ( ldapDisplayName ) of this property is name.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ProtectedFromAccidentalDeletion
        Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216373')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADCentralAccessPolicy], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # Name
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Name", [System.String], $attributes)
        $parameters.Add("Name", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADCentralAccessRule {
    <#
    .SYNOPSIS
        Creates a central access rule in Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER CurrentAcl
        Specifies the currently effective access control list of the rule.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The Lightweight Directory Access Protocol (LDAP) display name ( ldapDisplayName ) for this property is description.
    .PARAMETER Instance
        Specifies an instance of an Active Directory object to use as a template for a new Active Directory object.
        You can use an instance of an existing Active Directory object as a template or you can construct a new Active Directory object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing Active Directory object as a template for a new object. To retrieve an instance of an existing Active Directory object, use a cmdlet such as Get-ADObject . Then provide this object to the Instance parameter of the New-ADObject cmdlet to create a new Active Directory object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADObject and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADObject cmdlet to create the new Active Directory object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.
    .PARAMETER Name
        Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP display name ( ldapDisplayName ) of this property is name.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ProposedAcl
        This parameter specifies the proposed accessed control list of the rule.
    .PARAMETER ProtectedFromAccidentalDeletion
        Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER ResourceCondition
        This parameter specifies the resource condition of the rule.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219593')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # CurrentAcl
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("CurrentAcl", [System.String], $attributes)
        $parameters.Add("CurrentAcl", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADCentralAccessRule], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # Name
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Name", [System.String], $attributes)
        $parameters.Add("Name", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ProposedAcl
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProposedAcl", [System.String], $attributes)
        $parameters.Add("ProposedAcl", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # ResourceCondition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResourceCondition", [System.String], $attributes)
        $parameters.Add("ResourceCondition", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADClaimTransformPolicy {
    <#
    .SYNOPSIS
        Creates a new claim transformation policy object in Active Directory.
    .PARAMETER AllowAll
        Indicates that the policy sets a claims transformation rule that would allow all claims to be sent or received.
    .PARAMETER AllowAllExcept
        Specifies an array of claim types. When this parameter is specified, the policy sets a claims transformation rule that would allow all claims to be sent or received except for the specified claim types.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies a user account that has permission to perform this action. The default is the current user.
        Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet. You will be prompted for a password if you type a user name.
        This parameter is not supported by any providers installed with Windows PowerShell.
    .PARAMETER DenyAll
        Indicates that the policy sets a claims transformation rule that would deny all claims to be sent or received.
    .PARAMETER DenyAllExcept
        Specifies an array of claim types. When this parameter is specified, the policy sets a claims transformation rule that would deny all claims to be sent or received except for the specified claim types.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The Lightweight Directory Access Protocol (LDAP) display name ( ldapDisplayName ) for this property is description.
    .PARAMETER Instance
        Specifies an instance of an Active Directory object to use as a template for a new claims transformation policy object.
        You can use an instance of an existing claims transformation policy object as a template or you can construct a new claims transformation policy object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing claims transformation policy object as a template for a new object. To retrieve an instance of an existing claims transformation policy object, use  the  Get-ADClaimTransformPolicy cmdlet. Then provide this object to the Instance parameter of the New-ADClaimTransformPolicy cmdlet to create a new claims transformation policy object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADClaimsTransformationPolicy object and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADClaimTransformPolicy cmdlet to create the new Active Directory object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.
    .PARAMETER Name
        Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP display name ( ldapDisplayName ) of this property is name.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ProtectedFromAccidentalDeletion
        Specifies whether to prevent the object from being deleted. When this property is set to $True, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Rule
        Specifies the claims transformation rule. To specify the rule, you can either (1) type the rule in a text file, and then pass the file to the cmdlet (recommended), or (2) type the rule inline.
        For instance, the following commands demonstrate how to create a new claims transformation policy object with the rule specified in a text file named Rule.txt located in a temporary folder C:\temp.
        `$Rule = Get-Content C:\temp\rule.txt`
        `New-ADClaimTransformPolicy MyRule -Rule $Rule`
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216374')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AllowAll
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowAll"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateSetAttribute('true')
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AllowAll", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("AllowAll", $parameter)
        
        # AllowAllExcept
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowAllExcept"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AllowAllExcept", [Microsoft.ActiveDirectory.Management.ADClaimType[]], $attributes)
        $parameters.Add("AllowAllExcept", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # DenyAll
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DenyAll"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateSetAttribute('true')
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DenyAll", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("DenyAll", $parameter)
        
        # DenyAllExcept
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DenyAllExcept"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DenyAllExcept", [Microsoft.ActiveDirectory.Management.ADClaimType[]], $attributes)
        $parameters.Add("DenyAllExcept", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADClaimTransformPolicy], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # Name
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Name", [System.String], $attributes)
        $parameters.Add("Name", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # Rule
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Rule", [System.String], $attributes)
        $parameters.Add("Rule", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADClaimType {
    <#
    .SYNOPSIS
        Creates a new claim type in Active Directory.
    .PARAMETER AppliesToClasses
        This parameter is used to specify the security principal classes to which this claim applies. Possible values for this parameter include the following or any Active Directory type that derives from these base types:
        - User
        - Computer
        - InetOrgPerson
        - msDS-ManagedServiceAccount
        - msDS-GroupManagedServiceAccount
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The Lightweight Directory Access Protocol (LDAP) display name ( ldapDisplayName ) for this property is description.
    .PARAMETER DisplayName
        Specifies the display name of the claim type, which must be unique. The display name of a claim type can be used as an identity in other Active Directory cmdlets. For example, if the display name of a claim type is Employee Type, then you can use the Get-ADClaimType cmdlet to retrieve the Employee Type claim type.
    .PARAMETER Enabled
        Specifies whether the claim type is enabled.
    .PARAMETER ID
        Specifies the claim type ID. This is an optional parameter. By default, New-ADClaimType generates the ID automatically.
        The ID should only be set manually in a multi-forest environment where the same claim types need to work across forests. For claim types to be considered identical across forests, their ID must be the same.
        To specify the ID, the ID string must conform to the following format:
        - The ID must have a maximum of 37 characters.
        - The ID must have at least one slash (/).
        - The ID must have at least one colon before the first slash.
        - The ID must not have the slash as the last character.
        - The ID must contain valid file characters only.
        An example is ad://ext/BusinessImpact.
    .PARAMETER Instance
        Specifies an instance of a claim type object to use as a template for a new claim type object.
        You can use an instance of an existing claim type object as a template or you can construct a new claim type object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing claim type object as a template for a new object. To retrieve an instance of an existing claim type object, use a cmdlet such as Get-ADClaimType . Then provide this object to the Instance parameter of the New-ADClaimType cmdlet to create a new claim type object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new claim type and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADClaimType cmdlet to create the new claim type object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.
    .PARAMETER IsSingleValued
        Specifies whether the claim type is single valued or multi-valued.
    .PARAMETER OtherAttributes
        Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAPDisplayName ( ldapDisplayName ) defined for it in the Active Directory schema.
        Syntax:
        To specify a single value for an attribute:
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value}`
        To specify multiple values for an attribute
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}`
        You can specify values for more than one attribute by using semicolons to separate attributes. The following syntax shows how to set values for multiple attributes:
        `-OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}`
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ProtectedFromAccidentalDeletion
        Specifies whether to prevent the object from being deleted. When this property is set to $True, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER RestrictValues
        This parameter is used to specify whether the claim type may have values outside of the SuggestedValues parameter. If this is set to true, then the claim should only have values specified in the SuggestedValues parameter.
        Note that Active Directory does not enforce this restriction. It is up to the applications that use these claims to enforce the restriction.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER SourceAttribute
        Specifies an Active Directory attribute from which this claim type is based, and from which the claim value is obtained. The input must be the distinguished name, Name, or GUID of the attribute definition in the schema.
        Acceptable values include attributes of the following schema class objects: User , InetOrgPerson , Computer , ManagedServiceAccount , GroupManagedServiceAccount , and Auxiliary , except for the following attributes:
        Attributes marked as defunct in the schema- Blocked attributes such as dBCSPwd , lmPwdHistory , and unicodePwd Attributes that are not replicated  Attributes that are not available on read-only domain controllers  Attributes with syntaxes not based on the following:
        - String Object (DS-DN)
        - String (Unicode)
        - Boolean
        - Integer
        - Large Integer
        - String (OID)
        - String (SD)
    .PARAMETER SourceOID
        Specifies a string that can be used to configure a certificate-based claim type source. For example, use this parameter to create certificate-based claim types when you want to use smartcard logon claims for authorization decisions. The SourceOID parameter uses the string representation of an object identifier (OID) from the issuance policy found in the certificate and on the certificate template when using Active Directory Certificate Services. An example of an OID is 1.3.6.1.4.1.311.47.2.5.
    .PARAMETER SourceTransformPolicy
        Indicates that the claim type is sourced from the claims transformation policy engine.
    .PARAMETER SuggestedValues
        Specifies one or more suggested values for the claim type. An application may choose to present this list of suggested values for the user to choose from. When the RestrictValues parameter is set to a value of $True, the application should limit the user to selecting values from this list only.
    .PARAMETER ValueType
        Specifies the value type for this claim type. The following are the valid value types:
        - Int64
        - UInt64
        - String
        - FQBN
        - SID
        - Boolean
        - OctetString
    #>
    
    [CmdletBinding(DefaultParameterSetName='SourceAttribute', SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216375')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AppliesToClasses
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AppliesToClasses", [System.String[]], $attributes)
        $parameters.Add("AppliesToClasses", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # DisplayName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisplayName", [System.String], $attributes)
        $parameters.Add("DisplayName", $parameter)
        
        # Enabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Enabled", [System.Boolean], $attributes)
        $parameters.Add("Enabled", $parameter)
        
        # ID
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ID", [System.String], $attributes)
        $parameters.Add("ID", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADClaimType], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # IsSingleValued
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("IsSingleValued", [System.Boolean], $attributes)
        $parameters.Add("IsSingleValued", $parameter)
        
        # OtherAttributes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OtherAttributes", [System.Collections.Hashtable], $attributes)
        $parameters.Add("OtherAttributes", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # RestrictValues
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("RestrictValues", [System.Boolean], $attributes)
        $parameters.Add("RestrictValues", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # SourceAttribute
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceAttribute"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SourceAttribute", [System.String], $attributes)
        $parameters.Add("SourceAttribute", $parameter)
        
        # SourceOID
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceOID"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SourceOID", [System.String], $attributes)
        $parameters.Add("SourceOID", $parameter)
        
        # SourceTransformPolicy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceTransformPolicy"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SourceTransformPolicy", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("SourceTransformPolicy", $parameter)
        
        # SuggestedValues
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceAttribute"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceTransformPolicy"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SuggestedValues", [Microsoft.ActiveDirectory.Management.ADSuggestedValueEntry[]], $attributes)
        $parameters.Add("SuggestedValues", $parameter)
        
        # ValueType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceTransformPolicy"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ValueType", [Microsoft.ActiveDirectory.Management.ADClaimValueType], $attributes)
        $parameters.Add("ValueType", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADComputer {
    <#
    .SYNOPSIS
        Creates a new Active Directory computer object.
    .PARAMETER AccountExpirationDate
        Specifies the expiration date for an account. This parameter sets the AccountExpirationDate property of an account object. The Lightweight Directory Access Protocol (LDAP) display name ( ldapDisplayName ) for this property is accountExpires.
        Use the DateTime syntax when you specify this parameter. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date.
    .PARAMETER AccountNotDelegated
        Specifies whether the security context of the user is delegated to a service. When this parameter is set to true, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER AccountPassword
        Specifies a new password value for an account. This value is stored as an encrypted string.
        The following conditions apply based on the manner in which the password parameter is used:
        - $Null password is specified: random password is set and the account is enabled unless it is requested to be disabled.
        - No password is specified: random password is set and the account is enabled unless it is requested to be disabled.
        - User password is specified: password is set and the account is enabled unless it is requested to be disabled, unless the password you provided does not meet password policy or was not set for other reasons, at which point the account is disabled.
        Notes:  Computer accounts, by default, are created with a 240-character random password. If you provide a password, an attempt is made to set that password. However, this can fail due to password policy restrictions. The computer account is created and you can use Set-ADAccountPassword to set the password on that account. In order to ensure that accounts remain secure, computer accounts will never be enabled unless a valid password is set (either a randomly-generated or user-provided one) or PasswordNotRequired is set to $True.
        The account is created if the password fails for any reason.
        The new ADComputer object will always either be disabled or have a user-requested or randomly-generated password. There is no way to create an enabled computer account object with a password that violates domain password policy, such as an empty password.
    .PARAMETER AllowReversiblePasswordEncryption
        Specifies whether reversible password encryption is allowed for the account. This parameter sets the AllowReversiblePasswordEncryption property of the account. This parameter also sets the ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED flag of the Active Directory User Account Control (UAC) attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER AuthenticationPolicy
        Specifies an Active Directory Domain Services authentication policy object. Specify the authentication policy object in one of the following formats:
        - A distinguished Name
        - A GUID
        - A name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER AuthenticationPolicySilo
        Specifies an Active Directory Domain Services authentication policy silo object. Specify the authentication policy silo object in one of the following formats:
        - A distinguished name
        - A GUID
        - A name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER CannotChangePassword
        Specifies whether the account password can be changed. This parameter sets the CannotChangePassword property of an account. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Certificates
        Specifies the DER-encoded X.509v3 certificates of the account. These certificates include the public key certificates issued to this account by the Microsoft Certificate Service. This parameter sets the Certificates property of the account object. The LDAP display name ( ldapDisplayName ) for this property is userCertificate.
    .PARAMETER ChangePasswordAtLogon
        Specifies whether a password must be changed during the next logon attempt. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
        This parameter cannot be set to $True or 1 for an account that also has the PasswordNeverExpires property set to $True.
    .PARAMETER CompoundIdentitySupported
        Specifies whether an account supports Kerberos service tickets which includes the authorization data for the user's device.  This value sets the compound identity supported flag of the Active Directory msDS-SupportedEncryptionTypes attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
        Warning: Domain-joined Windows systems and services such as clustering manage their own msDS-SupportedEncryptionTypes attribute. Therefore any changes to the flag on the msDS-SupportedEncryptionTypes attribute is overwritten by the service or system which manages the setting.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP display name ( ldapDisplayName ) for this property is description.
    .PARAMETER DisplayName
        Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP display name ( ldapDisplayName ) for this property is displayName.
    .PARAMETER DNSHostName
        Specifies the fully qualified domain name (FQDN) of the computer. This parameter sets the DNSHostName property for a computer object. The LDAP display name for this property is dNSHostName.
    .PARAMETER Enabled
        Specifies if an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER HomePage
        Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP display name ( ldapDisplayName ) for this property is wWWHomePage.
    .PARAMETER Instance
        Specifies an instance of a computer object to use as a template for a new computer object.
        You can use an instance of an existing computer object as a template or you can construct a new computer object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing computer object as a template for a new object. To retrieve an instance of an existing computer object use Get-ADComputer. Then provide this object to the Instance parameter of the New-ADComputer cmdlet to create a new computer object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADcomputer object and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADComputer cmdlet to create the new Active Directory computer object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.
    .PARAMETER KerberosEncryptionType
        Specifies whether an account supports Kerberos encryption types which are used during creation of service tickets.  This value sets the encryption types supported flags of the Active Directory msDS-SupportedEncryptionTypes attribute. The acceptable values for this parameter are:
        - None
        - DES
        - RC4
        - AES128
        - AES256
        None will remove all encryption types from the account which may result in the KDC being unable to issue service tickets for services using the account.
        DES is a weak encryption type which is not supported by default since Windows 7 and Windows Server 2008 R2.
        Warning: Domain-joined Windows systems and services such as clustering manage their own msDS-SupportedEncryptionTypes attribute. Therefore any changes to the flag on the msDS-SupportedEncryptionTypes attribute is overwritten by the service or system which manages the setting.
    .PARAMETER Location
        Specifies the location of the computer, such as an office number. This parameter sets the Location property of a computer. The LDAP display name ( ldapDisplayName ) of this property is location.
    .PARAMETER ManagedBy
        Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        This parameter sets the Active Directory attribute with an LDAP display name of managedBy.
    .PARAMETER Name
        Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP display name ( ldapDisplayName ) of this property is name.
    .PARAMETER OperatingSystem
        Specifies an operating system name. This parameter sets the OperatingSystem property of the computer object. The LDAP Display Name ( ldapDisplayName ) for this property is operatingSystem.
    .PARAMETER OperatingSystemHotfix
        Specifies an operating system hotfix name. This parameter sets the operatingSystemHotfix property of the computer object. The LDAP display name for this property is operatingSystemHotfix.
    .PARAMETER OperatingSystemServicePack
        Specifies the name of an operating system service pack. This parameter sets the OperatingSystemServicePack property of the computer object. The LDAP display name ( ldapDisplayName ) for this property is operatingSystemServicePack.
    .PARAMETER OperatingSystemVersion
        Specifies an operating system version. This parameter sets the OperatingSystemVersion property of the computer object. The LDAP display name ( ldapDisplayName ) for this property is operatingSystemVersion.
    .PARAMETER OtherAttributes
        Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAP display name ( ldapDisplayName ) defined for it in the Active Directory schema.
        Syntax:
        To specify a single value for an attribute:
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value}`
        To specify multiple values for an attribute
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}`
        You can specify values for more than one attribute by using semicolons to separate attributes.  The following syntax shows how to set values for multiple attributes:
        `-OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}`
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER PasswordNeverExpires
        Specifies whether the password of an account can expire. This parameter sets the PasswordNeverExpires property of an account object. This parameter also sets the ADS_UF_DONT_EXPIRE_PASSWD flag of the Active Directory User Account Control attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
        Note: This parameter cannot be set to $True or 1 for an account that also has the ChangePasswordAtLogon property set to $True.
    .PARAMETER PasswordNotRequired
        Specifies whether the account requires a password. This parameter sets the PasswordNotRequired property of an account, such as a user or computer account. This parameter also sets the ADS_UF_PASSWD_NOTREQD flag of the Active Directory User Account Control attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Path
        Specifies the X.500 path of the Organizational Unit (OU) or container where the new object is created.
        In many cases, a default value is used for the Path parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services environments, a default value for Path is set in the following cases:
        - If the cmdlet is run from an Active Directory module for Windows PowerShell provider drive, the parameter is set to the current path of the provider drive.
        - If the cmdlet has a default path, this value is used.
        For example: in New-ADUser, the Path parameter would default to the Users container.  - If none of the previous cases apply, the default value of Path is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Path is set in the following cases:
        - If the cmdlet is run from an Active Directory module for Windows PowerShell provider drive, the parameter is set to the current path of the provider drive.
        - If the cmdlet has a default path, this value is used.
        For example: in New-ADUser , the Path parameter would default to the Users container.  - If the target AD LDS instance has a default naming context, the default value of Path is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Path parameter will not take any default value.
        Note: The Active Directory Provider cmdlets, such as New-Item , Remove-Item , Remove-ItemProperty , Rename-Item , and Set-ItemProperty , also contain a Path property. However, for the provider cmdlets, the Path parameter identifies the path of the actual object and not the container as with the Active Directory cmdlets.
    .PARAMETER PrincipalsAllowedToDelegateToAccount
        Specifies the accounts which can act on the behalf of users to services running as this computer account. This parameter sets the msDS-AllowedToActOnBehalfOfOtherIdentity attribute of a computer account object.
    .PARAMETER SAMAccountName
        Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 15 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name ( ldapDisplayName ) for this property is sAMAccountName.
        Note: If the SAMAccountName string provided does not end with a $, a $ will be appended if needed.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER ServicePrincipalNames
        Specifies the service principal names for the account. This parameter sets the ServicePrincipalNames property of the account. The LDAP display name ( ldapDisplayName ) for this property is servicePrincipalName. To enter multiple values, use the following syntax: `<value1>,<value2>,...<valueX>`. If the values contain spaces or otherwise require quotation marks, use the following syntax: `"<value1>","<value2>",..."<valueX>"`."
    .PARAMETER TrustedForDelegation
        Specifies whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER UserPrincipalName
        Specifies a user principal name (UPN) in the format `<user>@<DNS-domain-name>`. A UPN is a friendly name assigned by an administrator that is shorter than the LDAP distinguished name used by the system and easier to remember. The UPN is independent of the user object's distinguished name, so a user object can be moved or renamed without affecting the user logon name. When logging on using a UPN, users no longer have to choose a domain from a list on the logon dialog box.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301399')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AccountExpirationDate
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountExpirationDate", [System.Nullable`1[System.DateTime]], $attributes)
        $parameters.Add("AccountExpirationDate", $parameter)
        
        # AccountNotDelegated
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountNotDelegated", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("AccountNotDelegated", $parameter)
        
        # AccountPassword
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountPassword", [System.Security.SecureString], $attributes)
        $parameters.Add("AccountPassword", $parameter)
        
        # AllowReversiblePasswordEncryption
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AllowReversiblePasswordEncryption", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("AllowReversiblePasswordEncryption", $parameter)
        
        # AuthenticationPolicy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthenticationPolicy", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicy], $attributes)
        $parameters.Add("AuthenticationPolicy", $parameter)
        
        # AuthenticationPolicySilo
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthenticationPolicySilo", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicySilo], $attributes)
        $parameters.Add("AuthenticationPolicySilo", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # CannotChangePassword
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("CannotChangePassword", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("CannotChangePassword", $parameter)
        
        # Certificates
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateMultivalueArrayAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Certificates", [System.Security.Cryptography.X509Certificates.X509Certificate[]], $attributes)
        $parameters.Add("Certificates", $parameter)
        
        # ChangePasswordAtLogon
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ChangePasswordAtLogon", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ChangePasswordAtLogon", $parameter)
        
        # CompoundIdentitySupported
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("CompoundIdentitySupported", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("CompoundIdentitySupported", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # DisplayName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisplayName", [System.String], $attributes)
        $parameters.Add("DisplayName", $parameter)
        
        # DNSHostName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DNSHostName", [System.String], $attributes)
        $parameters.Add("DNSHostName", $parameter)
        
        # Enabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Enabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("Enabled", $parameter)
        
        # HomePage
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("HomePage", [System.String], $attributes)
        $parameters.Add("HomePage", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADComputer], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # KerberosEncryptionType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("KerberosEncryptionType", [Microsoft.ActiveDirectory.Management.ADKerberosEncryptionType], $attributes)
        $parameters.Add("KerberosEncryptionType", $parameter)
        
        # Location
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Location", [System.String], $attributes)
        $parameters.Add("Location", $parameter)
        
        # ManagedBy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ManagedBy", [Microsoft.ActiveDirectory.Management.ADPrincipal], $attributes)
        $parameters.Add("ManagedBy", $parameter)
        
        # Name
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Name", [System.String], $attributes)
        $parameters.Add("Name", $parameter)
        
        # OperatingSystem
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OperatingSystem", [System.String], $attributes)
        $parameters.Add("OperatingSystem", $parameter)
        
        # OperatingSystemHotfix
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OperatingSystemHotfix", [System.String], $attributes)
        $parameters.Add("OperatingSystemHotfix", $parameter)
        
        # OperatingSystemServicePack
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OperatingSystemServicePack", [System.String], $attributes)
        $parameters.Add("OperatingSystemServicePack", $parameter)
        
        # OperatingSystemVersion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OperatingSystemVersion", [System.String], $attributes)
        $parameters.Add("OperatingSystemVersion", $parameter)
        
        # OtherAttributes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OtherAttributes", [System.Collections.Hashtable], $attributes)
        $parameters.Add("OtherAttributes", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # PasswordNeverExpires
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PasswordNeverExpires", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("PasswordNeverExpires", $parameter)
        
        # PasswordNotRequired
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PasswordNotRequired", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("PasswordNotRequired", $parameter)
        
        # Path
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Path", [System.String], $attributes)
        $parameters.Add("Path", $parameter)
        
        # PrincipalsAllowedToDelegateToAccount
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PrincipalsAllowedToDelegateToAccount", [Microsoft.ActiveDirectory.Management.ADPrincipal[]], $attributes)
        $parameters.Add("PrincipalsAllowedToDelegateToAccount", $parameter)
        
        # SAMAccountName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SAMAccountName", [System.String], $attributes)
        $parameters.Add("SAMAccountName", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # ServicePrincipalNames
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateMultivalueArrayAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ServicePrincipalNames", [System.String[]], $attributes)
        $parameters.Add("ServicePrincipalNames", $parameter)
        
        # TrustedForDelegation
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TrustedForDelegation", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("TrustedForDelegation", $parameter)
        
        # UserPrincipalName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UserPrincipalName", [System.String], $attributes)
        $parameters.Add("UserPrincipalName", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADDCCloneConfigFile {
    <#
    .SYNOPSIS
        Performs prerequisite checks for cloning a domain controller and generates a clone configuration file if all checks succeed.
    .PARAMETER AlternateWINSServer
        Specifies the name of the alternate Windows Internet Naming Service (WINS) server for the cloned domain controller to use if the preferred WINS Server is not available.
    .PARAMETER CloneComputerName
        Specifies the computer name for the cloned domain controller. If this parameter is not specified as a unique name within the enterprise of 15 characters or less, the following formula is used to programmatically generate a name:
        - The first eight characters of the source domain controller computer name. For instance, a source computer name of SourceComputer is truncated to a prefix string of SourceCo. - A unique naming suffix of the format -CL nnnn is appended to the prefix string where nnnn is the next available value from 0001-9999 that the primary domain controller (PDC) determines is not currently in use. For example, if 0047 is the next available number within the allowed range, using the above source computer prefix of SourceCo the derived name to use for the clone computer will be SourceCo-CL0047.
    .PARAMETER IPv4Address
        Specifies the Internet Protocol version 4 (IPv4) address to be assigned to the cloned domain controller.
    .PARAMETER IPv4DefaultGateway
        Specifies the Internet Protocol version 4 (IPv4) address for the default gateway to be used by the cloned domain controller.
    .PARAMETER IPv4DNSResolver
        Specifies the Internet Protocol version 4 (IPv4) address for the DNS server to be used by the cloned domain controller to resolve names. A maximum of four string values can be provided.
    .PARAMETER IPv4SubnetMask
        Specifies the Internet Protocol version 4 (IPv4) subnet mask to use for the subnet where the cloned domain controller is to be located.
    .PARAMETER IPv6DNSResolver
        Specifies the Internet Protocol version 6 (IPv6) address for the DNS server to be used by the cloned domain controller to resolve names.
    .PARAMETER Offline
        Indicates whether the cmdlet is being run against an offline media or on the domain controller being prepared for cloning.
    .PARAMETER Path
        Specifies the folder path to use when writing the clone configuration file. If the cmdlet is run and all prerequisite checks succeed, a DCCloneConfig.xml file will be written and appear in this location as output. The Path parameter is optional when running the cmdlet on the domain controller being prepared for cloning. In this case, the default location of the DIT folder will be used and this parameter does not need to be specified. When running the New-ADCCLoneConfigFile cmdlet in offline mode (i.e. when the Offline parameter is specified), however, the Path parameter is required.
    .PARAMETER PreferredWINSServer
        Specifies the name of the primary Windows Internet Naming Service (WINS) server to use as the preferred WINS Server for the cloned domain controller.
    .PARAMETER SiteName
        Specifies the name of the Active Directory site in which to place the cloned domain controller.
    .PARAMETER Static
        Indicates whether the TCP/IP configuration specified for the cloned domain controller is static or dynamic IP configuration.
    #>
    
    [CmdletBinding(DefaultParameterSetName='IPv4DynamicSettings', HelpUri='http://go.microsoft.com/fwlink/?LinkId=246280')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AlternateWINSServer
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "OfflineExecution"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "IPv4StaticSettings"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AlternateWINSServer", [System.String], $attributes)
        $parameters.Add("AlternateWINSServer", $parameter)
        
        # CloneComputerName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('cn')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("CloneComputerName", [System.String], $attributes)
        $parameters.Add("CloneComputerName", $parameter)
        
        # IPv4Address
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "OfflineExecution"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "IPv4StaticSettings"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("IPv4Address", [System.String], $attributes)
        $parameters.Add("IPv4Address", $parameter)
        
        # IPv4DefaultGateway
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "OfflineExecution"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "IPv4StaticSettings"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("IPv4DefaultGateway", [System.String], $attributes)
        $parameters.Add("IPv4DefaultGateway", $parameter)
        
        # IPv4DNSResolver
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "OfflineExecution"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "IPv4StaticSettings"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "IPv4DynamicSettings"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("IPv4DNSResolver", [System.String[]], $attributes)
        $parameters.Add("IPv4DNSResolver", $parameter)
        
        # IPv4SubnetMask
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "OfflineExecution"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "IPv4StaticSettings"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("IPv4SubnetMask", [System.String], $attributes)
        $parameters.Add("IPv4SubnetMask", $parameter)
        
        # IPv6DNSResolver
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "OfflineExecution"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "IPv6StaticSettings"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "IPv6DynamicSettings"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("IPv6DNSResolver", [System.String[]], $attributes)
        $parameters.Add("IPv6DNSResolver", $parameter)
        
        # Offline
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "OfflineExecution"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Offline", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("Offline", $parameter)
        
        # Path
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "IPv4StaticSettings"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "IPv6DynamicSettings"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "IPv4DynamicSettings"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "OfflineExecution"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "IPv6StaticSettings"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Path", [System.String], $attributes)
        $parameters.Add("Path", $parameter)
        
        # PreferredWINSServer
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "OfflineExecution"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "IPv4StaticSettings"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PreferredWINSServer", [System.String], $attributes)
        $parameters.Add("PreferredWINSServer", $parameter)
        
        # SiteName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SiteName", [System.String], $attributes)
        $parameters.Add("SiteName", $parameter)
        
        # Static
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "IPv6StaticSettings"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "OfflineExecution"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "IPv4StaticSettings"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Static", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("Static", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADFineGrainedPasswordPolicy {
    <#
    .SYNOPSIS
        Creates a new Active Directory fine-grained password policy.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER ComplexityEnabled
        Specifies whether password complexity is enabled for the password policy. If enabled, the password must contain three of the following four character types:
        - Uppercase characters (A, B, C, D, E, ...)
        - Lowercase characters (a, b, c, d, e, ...)
        - Numerals (0, 1, 2, 3, ...)
        - Special characters (#, $, *, %, ...)
        This parameter sets the ComplexityEnabled property of a password policy. The acceptable values for this parameter are:
        - $False or 0. Disables password complexity. - $True or 1. Enables password complexity.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The Lightweight Directory Access Protocol (LDAP) display name ( ldapDisplayName ) for this property is description.
    .PARAMETER DisplayName
        Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP display name ( ldapDisplayName ) for this property is displayName.
    .PARAMETER Instance
        Specifies an instance of a fine-grained password policy object to use as a template for a new fine-grained password policy object.
        You can use an instance of an existing fine-grained password policy object as a template or you can construct a new fine-grained password policy object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing fine-grained password policy object as a template for a new object. To retrieve an instance of an existing fine-grained password policy object, use a cmdlet such as Get-ADFineGrainedPasswordPolicy . Then provide this object to the Instance parameter of the New-ADFineGrainedPasswordPolicy cmdlet to create a new fine-grained password policy object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADFineGrainedPasswordPolicy object and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADFineGrainedPasswordPolicy cmdlet to create the new Active Directory fine-grained password policy object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.
    .PARAMETER LockoutDuration
        Specifies the length of time that an account is locked after the number of failed login attempts exceeds the lockout threshold. You cannot log in to an account that is locked until the lockout duration time period has expired. If you set the value to 0 the account needs to be unlocked manually by the administrator. This parameter sets the lockoutDuration property of a password policy object. The LDAP display name ( ldapDisplayName ) of this property is msDS-LockoutDuration.
        The lockout duration must be greater than or equal to the lockout observation time for a password policy. Use the LockOutObservationWindow parameter to set the lockout observation time.
        Specify the lockout duration time interval in the following format:
        `D.H:M:S.F`
        where: - D = Days (0 to 10675199)
        - H = Hours (0 to 23)
        - M = Minutes (0 to 59)
        - S = Seconds (0 to 59)
        - F= Fractions of a second (0 to 9999999)
    .PARAMETER LockoutObservationWindow
        Specifies the maximum time interval between two unsuccessful login attempts before the number of unsuccessful login attempts is reset to 0. An account is locked when the number of unsuccessful login attempts exceeds the password policy lockout threshold. This parameter sets the lockoutObservationWindow property of a password policy object. The LDAP display name ( ldapDisplayName ) of this property is msDS-lockoutObservationWindow .
        The lockout observation window must be smaller than or equal to the lockout duration for a password policy. Use the LockoutDuration parameter to set the lockout duration time.
        Specify the time interval in the following format:
        `D:H:M:S.F`
        where: - D = Days (0 to 10675199)
        - H = Hours (0 to 23)
        - M = Minutes (0 to 59)
        - S = Seconds (0 to 59)
        - F= Fractions of a second (0 to 9999999)
        Note: Time values must be between the following values: 0:0:0:0.0 and 10675199:02:48:05.4775807.
    .PARAMETER LockoutThreshold
        Specifies the number of unsuccessful login attempts that are permitted before an account is locked out. This number increases when the time between unsuccessful login attempts is less than the time specified for the lockout observation time window. This parameter sets the LockoutThreshold property of a password policy.
    .PARAMETER MaxPasswordAge
        Specifies the maximum length of time that you can have the same password. After this time period, the password expires and you must create a new one.
        This parameter sets the maxPasswordAge property of a password policy. The LDAP display name ( ldapDisplayName ) for this property is maxPwdAge.
        Specify the time interval in the following format:
        `D.H:M:S.F`
        where: - D = Days (0 to 10675199)
        - H = Hours (0 to 23)
        - M = Minutes (0 to 59)
        - S = Seconds (0 to 59)
        - F= Fractions of a second (0 to 9999999)
        Note: Time values must be between the following values: 0 and 10675199:02:48:05.4775807.
    .PARAMETER MinPasswordAge
        Specifies the minimum length of time before you can change a password.
        This parameter sets the minPasswordAge property of a password policy. The LDAP display name ( ldapDisplayName ) for this property is minPwdAge.
        Specify the time interval in the following format:
        `D.H:M:S.F`
        where: - D = Days (0 to 10675199)
        - H = Hours (0 to 23)
        - M = Minutes (0 to 59)
        - S = Seconds (0 to 59)
        - F= Fractions of a second (0 to 9999999)
        Note: Time values must be between the following values: 0 and 10675199:02:48:05.
    .PARAMETER MinPasswordLength
        Specifies the minimum number of characters that a password must contain.  This parameter sets the MinPasswordLength property of the password policy.
    .PARAMETER Name
        Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP display name ( ldapDisplayName ) of this property is name.
    .PARAMETER OtherAttributes
        Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAPDisplayName ( ldapDisplayName ) defined for it in the Active Directory schema.
        Syntax:
        To specify a single value for an attribute:
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value}`
        To specify multiple values for an attribute
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}`
        You can specify values for more than one attribute by using semicolons to separate attributes.  The following syntax shows how to set values for multiple attributes:
        `-OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}`
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER PasswordHistoryCount
        Specifies the number of previous passwords to save.  A user cannot reuse a password in the list of saved passwords. This parameter sets the PasswordHistoryCount property for a password policy.
    .PARAMETER Precedence
        Specifies a value that defines the precedence of a fine-grained password policy among all fine-grained password policies. This parameter sets the Precedence property for a fine-grained password policy. The LDAP display name ( ldapDisplayName ) for this property is msDS-PasswordSettingsPrecedence.
        This value determines which password policy to use when more than one password policy applies to a user or group. When there is a conflict, the password policy that has the lower Precedence property value has higher priority. For example, if PasswordPolicy1 has a Precedence property value of 200 and PasswordPolicy2 has a Precedence property value of 100, PasswordPolicy2 is used.
        Typically, password policy precedence values are assigned in multiples of 10 or 100, making it easier to add policies at a later time. For example, if you set the initial precedence values for your policies to 100 and 200, you can add another policy that has precedence value of 150.
        If the specified Precedence parameter is already assigned to another password policy object, the cmdlet returns a terminating error.
    .PARAMETER ProtectedFromAccidentalDeletion
        Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property.  The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER ReversibleEncryptionEnabled
        Specifies whether the directory must store passwords using reversible encryption. This parameter sets the ReversibleEncryption property for a password policy. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services, or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219327')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # ComplexityEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ComplexityEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ComplexityEnabled", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # DisplayName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisplayName", [System.String], $attributes)
        $parameters.Add("DisplayName", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # LockoutDuration
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LockoutDuration", [System.Nullable`1[System.TimeSpan]], $attributes)
        $parameters.Add("LockoutDuration", $parameter)
        
        # LockoutObservationWindow
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LockoutObservationWindow", [System.Nullable`1[System.TimeSpan]], $attributes)
        $parameters.Add("LockoutObservationWindow", $parameter)
        
        # LockoutThreshold
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LockoutThreshold", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("LockoutThreshold", $parameter)
        
        # MaxPasswordAge
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("MaxPasswordAge", [System.Nullable`1[System.TimeSpan]], $attributes)
        $parameters.Add("MaxPasswordAge", $parameter)
        
        # MinPasswordAge
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("MinPasswordAge", [System.Nullable`1[System.TimeSpan]], $attributes)
        $parameters.Add("MinPasswordAge", $parameter)
        
        # MinPasswordLength
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("MinPasswordLength", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("MinPasswordLength", $parameter)
        
        # Name
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Name", [System.String], $attributes)
        $parameters.Add("Name", $parameter)
        
        # OtherAttributes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OtherAttributes", [System.Collections.Hashtable], $attributes)
        $parameters.Add("OtherAttributes", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # PasswordHistoryCount
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PasswordHistoryCount", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("PasswordHistoryCount", $parameter)
        
        # Precedence
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Precedence", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("Precedence", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # ReversibleEncryptionEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ReversibleEncryptionEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ReversibleEncryptionEnabled", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADGroup {
    <#
    .SYNOPSIS
        Creates an Active Directory group.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The Lightweight Directory Access Protocol (LDAP) display name ( ldapDisplayName ) for this property is description.
    .PARAMETER DisplayName
        Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP display name ( ldapDisplayName ) for this property is displayName.
    .PARAMETER GroupCategory
        Specifies the category of the group. The acceptable values for this parameter are:
        - Distribution or 0
        - Security or 1
        This parameter sets the GroupCategory property of the group. This parameter value combined with other group values sets the LDAP display name ( ldapDisplayName ) attribute named groupType.
    .PARAMETER GroupScope
        Specifies the group scope of the group. The acceptable values for this parameter are:
        - DomainLocal or 0
        - Global or 1
        - Universal or 2
        This parameter sets the GroupScope property of a group object to the specified value. The LDAP display name of this property is groupType.
    .PARAMETER HomePage
        Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP display name ( ldapDisplayName ) for this property is wWWHomePage.
    .PARAMETER Instance
        Specifies an instance of a group object to use as a template for a new group object.
        You can use an instance of an existing group object as a template or you can construct a new group object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing group object as a template for a new object. Use the Get-ADGroup cmdlet to retrieve a group object then pass this object to the Instance parameter of the New-ADGroup cmdlet to create a new group object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADGroup object and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADGroup cmdlet to create the new group object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set raises an error.
    .PARAMETER ManagedBy
        Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - SAM account name (sAMAccountName)
    .PARAMETER Name
        Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP display name ( ldapDisplayName ) of this property is name.
    .PARAMETER OtherAttributes
        Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAP display name ( ldapDisplayName ) defined for it in the Active Directory schema.
        To specify a single value for an attribute:
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value}`
        To specify multiple values for an attribute
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}`
        You can specify values for more than one attribute by using semicolons to separate attributes. The following syntax shows how to set values for multiple attributes:
        `-OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}`
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Path
        Specifies the X.500 path of the Organizational Unit (OU) or container where the new object is created.
        In many cases, a default value is used for the Path parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Path is set in the following cases:
        - If the cmdlet is run from an Active Directory module for Windows PowerShell provider drive, the parameter is set to the current path of the provider drive.
        - If the cmdlet has a default path, this is used.
        For example: in New-ADUser, the Path parameter defaults to the Users container.  - If none of the previous cases apply, the default value of Path is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Path is set in the following cases:
        - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
        - If the cmdlet has a default path, this is used.
        For example: in New-ADUser, the Path parameter defaults to the Users container.  - If the target AD LDS instance has a default naming context, the default value of Path is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Path parameter does not take a default value.
        Note: The Active Directory Provider cmdlets, such as New-Item , Remove-Item , Remove-ItemProperty , Rename-Item , and Set-ItemProperty , also contain a Path property. However, for the provider cmdlets, the Path parameter identifies the path of the actual object and not the container as with the Active Directory cmdlets.
    .PARAMETER SamAccountName
        Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name ( ldapDisplayName ) for this property is sAMAccountName.
        Note: If the string value provided is not terminated with a $ (dollar sign) character, the system adds one if necessary.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219326')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # DisplayName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisplayName", [System.String], $attributes)
        $parameters.Add("DisplayName", $parameter)
        
        # GroupCategory
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("GroupCategory", [System.Nullable`1[Microsoft.ActiveDirectory.Management.ADGroupCategory]], $attributes)
        $parameters.Add("GroupCategory", $parameter)
        
        # GroupScope
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 2
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("GroupScope", [System.Nullable`1[Microsoft.ActiveDirectory.Management.ADGroupScope]], $attributes)
        $parameters.Add("GroupScope", $parameter)
        
        # HomePage
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("HomePage", [System.String], $attributes)
        $parameters.Add("HomePage", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADGroup], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # ManagedBy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ManagedBy", [Microsoft.ActiveDirectory.Management.ADPrincipal], $attributes)
        $parameters.Add("ManagedBy", $parameter)
        
        # Name
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Name", [System.String], $attributes)
        $parameters.Add("Name", $parameter)
        
        # OtherAttributes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OtherAttributes", [System.Collections.Hashtable], $attributes)
        $parameters.Add("OtherAttributes", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Path
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Path", [System.String], $attributes)
        $parameters.Add("Path", $parameter)
        
        # SamAccountName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SamAccountName", [System.String], $attributes)
        $parameters.Add("SamAccountName", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADObject {
    <#
    .SYNOPSIS
        Creates an Active Directory object.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP display name ( ldapDisplayName ) for this property is description.
    .PARAMETER DisplayName
        Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP display name ( ldapDisplayName ) for this property is displayName.
    .PARAMETER Instance
        Specifies an instance of an Active Directory object to use as a template for a new Active Directory object.
        You can use an instance of an existing Active Directory object as a template or you can construct a new Active Directory object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing Active Directory object as a template for a new object. To retrieve an instance of an existing Active Directory object, use a cmdlet such as Get-ADObject . Then provide this object to the Instance parameter of the New-ADObject cmdlet to create a new Active Directory object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADObject and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADObject cmdlet to create the new Active Directory object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set raises an error.
    .PARAMETER Name
        Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP display name ( ldapDisplayName ) of this property is name.
    .PARAMETER OtherAttributes
        Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAP display name ( ldapDisplayName ) defined for it in the Active Directory schema.
        To specify a single value for an attribute:
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value}`
        To specify multiple values for an attribute:
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}`
        To specify values for multiple attributes:
        `-OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}`
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Path
        Specifies the X.500 path of the OU or container where the new object is created.
        In many cases, a default value is used for the Path parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and when a default value can be determined, no further rules are evaluated.
        In AD DS environments, a default value for Path will be set in the following cases:
        - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
        - If the cmdlet has a default path, this is used.
        For example: in New-ADUser, the Path parameter defaults to the Users container.  - If none of the previous cases apply, the default value of Path is set to the default partition or naming context of the target domain.
        In AD LDS environments, a default value for Path is set in the following cases:
        - If the cmdlet is run from an Active Directory module for PowerShell provider drive, the parameter is set to the current path of the provider drive.
        - If the cmdlet has a default path, this is used.
        For example: in New-ADUser, the Path parameter defaults to the Users container.  - If the target AD LDS instance has a default naming context, the default value of Path is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Path parameter does not take any default value.
        Note: The Active Directory Provider cmdlets, such as New-Item , Remove-Item , Remove-ItemProperty , Rename-Item , and Set-ItemProperty , also contain a Path property. However, for the Active Directory Provider cmdlets, the Path parameter identifies the path of the actual object rather than the container.
    .PARAMETER ProtectedFromAccidentalDeletion
        Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Directory Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER Type
        Specifies the type of object to create. Set the Type parameter to the LDAP display name of the Active Directory schema class that represents the type of object that you want to create. Examples of type values include user, computer, and group.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219323')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # DisplayName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisplayName", [System.String], $attributes)
        $parameters.Add("DisplayName", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADObject], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # Name
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Name", [System.String], $attributes)
        $parameters.Add("Name", $parameter)
        
        # OtherAttributes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OtherAttributes", [System.Collections.Hashtable], $attributes)
        $parameters.Add("OtherAttributes", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Path
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Path", [System.String], $attributes)
        $parameters.Add("Path", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # Type
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 2
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Type", [System.String], $attributes)
        $parameters.Add("Type", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADOrganizationalUnit {
    <#
    .SYNOPSIS
        Creates an Active Directory organizational unit.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER City
        Specifies the town or city. This parameter sets the City property of an OU object. The Lightweight Directory Access Protocol (LDAP) display name ( ldapDisplayName ) of this property is l.
    .PARAMETER Country
        Specifies the country or region code. This parameter sets the Country property of an OU object. The LDAP display name ( ldapDisplayName ) of this property is c. This value is not used by Windows 2000.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the OU object. The LDAP display name ( ldapDisplayName ) for this property is description.
    .PARAMETER DisplayName
        Specifies the display name of the object. This parameter sets the DisplayName property of the OU object. The LDAP display name ( ldapDisplayName ) for this property is displayName.
    .PARAMETER Instance
        Specifies an instance of an OU object to use as a template for a new OU object.
        You can use an instance of an existing OU object as a template or you can construct a new OU object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing OU object as a template for a new object. To retrieve an instance of an existing OU object use Get-ADOrganizationalUnit. Then provide this object to the Instance parameter of the New-ADOrganizationalUnit cmdlet to create a new OU object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADOrganizationalUnit object and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADOrganizationalUnit cmdlet to create the new Active Directory OU object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set raises an error.
    .PARAMETER ManagedBy
        Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        This parameter sets the Active Directory attribute with an LDAP display name of managedBy.
    .PARAMETER Name
        Specifies the name of the object. This parameter sets the Name property of the OU object. The LDAP display name ( ldapDisplayName ) of this property is name.
    .PARAMETER OtherAttributes
        Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAP display name ( ldapDisplayName ) defined for it in the Active Directory schema.
        To specify a single value for an attribute:
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value}`
        To specify multiple values for an attribute:
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}`
        To specify values for multiple attributes:
        `-OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}`
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Path
        Specifies the X.500 path of the OU or container where the new object is created.
        In many cases, a default value is used for the Path parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and when a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Path is set in the following cases:
        - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
        - If the cmdlet has a default path, this is used.
        For example: in New-ADUser, the Path parameter defaults to the Users container.  - If none of the previous cases apply, the default value of Path is set to the default partition or naming context of the target domain.
        In AD LDS environments, a default value for Path is set in the following cases:
        - If the cmdlet is run from an Active Directory module for PowerShell provider drive, the parameter is set to the current path of the provider drive.
        - If the cmdlet has a default path, this is used.
        For example: in New-ADUser, the Path parameter defaults to the Users container.  - If the target AD LDS instance has a default naming context, the default value of Path is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Path parameter does not take any default value.
        Note: The Active Directory Provider cmdlets, such as New-Item , Remove-Item , Remove-ItemProperty , Rename-Item , and Set-ItemProperty , also contain a Path property. However, for the Active Directory Provider cmdlets, the Path parameter identifies the path of the actual object rather than the container.
    .PARAMETER PostalCode
        Specifies the postal code or zip code. This parameter sets the PostalCode property of an OU object. The LDAP display name ( ldapDisplayName ) of this property is postalCode.
    .PARAMETER ProtectedFromAccidentalDeletion
        Indicates whether to prevent the object from being deleted. When this property is set to $True, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER State
        Specifies a state or province. This parameter sets the State property of an OU object. The LDAP display name ( ldapDisplayName ) of this property is st.
    .PARAMETER StreetAddress
        Specifies a street address. This parameter sets the StreetAddress property of an OU object. The LDAP display name ( ldapDisplayName ) of this property is street.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219328')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # City
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("City", [System.String], $attributes)
        $parameters.Add("City", $parameter)
        
        # Country
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Country", [System.String], $attributes)
        $parameters.Add("Country", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # DisplayName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisplayName", [System.String], $attributes)
        $parameters.Add("DisplayName", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADOrganizationalUnit], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # ManagedBy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ManagedBy", [Microsoft.ActiveDirectory.Management.ADPrincipal], $attributes)
        $parameters.Add("ManagedBy", $parameter)
        
        # Name
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Name", [System.String], $attributes)
        $parameters.Add("Name", $parameter)
        
        # OtherAttributes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OtherAttributes", [System.Collections.Hashtable], $attributes)
        $parameters.Add("OtherAttributes", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Path
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Path", [System.String], $attributes)
        $parameters.Add("Path", $parameter)
        
        # PostalCode
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PostalCode", [System.String], $attributes)
        $parameters.Add("PostalCode", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # State
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("State", [System.String], $attributes)
        $parameters.Add("State", $parameter)
        
        # StreetAddress
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("StreetAddress", [System.String], $attributes)
        $parameters.Add("StreetAddress", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADReplicationSite {
    <#
    .SYNOPSIS
        Creates an Active Directory replication site in the directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER AutomaticInterSiteTopologyGenerationEnabled
        Indicates whether the cmdlet prevents the Knowledge Consistency Checker (KCC) that functions as the intersite topology generator (ISTG) from generating connections for intersite replication. Use this option when you want to create manual intersite connections (disable the ISTG) but retain the KCC to generate intrasite connections.
    .PARAMETER AutomaticTopologyGenerationEnabled
        Indicates whether to enable automatic topology generation. When enabled, prevents the KCC from generating intrasite connections on all servers in the site. Disable this option if you use manual connections and do not want the KCC to build connections automatically.
    .PARAMETER Credential
        Specifies a user account that has permission to perform this action. The default is the current user.
        Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet. If you type a user name, you will be prompted for a password.
        This parameter is not supported by any providers installed with Windows PowerShell.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The Lightweight Directory Access Protocol (LDAP) display name ( ldapDisplayName ) for this property is description.
    .PARAMETER Instance
        Specifies an instance of a site object to use as a template for a new site object.
        You can use an instance of an existing site object as a template or you can construct a new site object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing site object as a template for a new object. To retrieve an instance of an existing site object, use the Get-ADReplicationSite cmdlet. Then provide this site object to the Instance parameter of the New-ADReplicationSite cmdlet to create a new site object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADReplicationSite and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADReplicationSite cmdlet to create the new site object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.
    .PARAMETER InterSiteTopologyGenerator
        Specifies the server acting as the inter-site topology generator for this site.
    .PARAMETER ManagedBy
        Specifies the user or group that manages the object by providing one of the following property values:
        - Distinguished name
        - GUID (objectGUID)
        - Security identifier (objectSid)
        - SAM account name (sAMAccountName)
        Note: The identifier in parentheses is the LDAP display name for the property.
        This parameter sets the Active Directory attribute with an LDAP display name of managedBy.
    .PARAMETER Name
        Specifies a name for the replication site object.
    .PARAMETER OtherAttributes
        Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAP display name ( ldapDisplayName ) defined for it in the Active Directory schema.
        To specify a single value for an attribute:
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value}`
        To specify multiple values for an attribute:
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}`
        You can specify values for more than one attribute by using semicolons to separate attributes. The following syntax shows how to set values for multiple attributes:
        `-OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}`
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ProtectedFromAccidentalDeletion
        Specifies whether to prevent the object from being deleted. When this property is set to $True, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER RedundantServerTopologyEnabled
        Indicates whether the cmdlet creates redundant connections between sites before a failure takes place. When enabled, disables the Knowledge Consistency Checker (KCC) failover. Requires that automatic detection of failed connections also be disabled (+IS_TOPL_DETECT_STALE_DISABLED).
    .PARAMETER ReplicationSchedule
        Specifies the default replication schedule for connections within this site (intra-site replication).
    .PARAMETER ScheduleHashingEnabled
        Indicates whether the cmdlet spreads replication start times randomly across the entire schedule interval rather than just the first quarter of the interval.
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER TopologyCleanupEnabled
        Indicates whether the cmdlet enables topology cleanup. When enabled, prevents the KCC from removing connection objects that it does not need. Disable this option if you want to take responsibility for removing old redundant connections. Alternatively, to control or augment the topology, you can use manual connections, which the KCC does not delete.
    .PARAMETER TopologyDetectStaleEnabled
        Indicates whether the cmdlet enables topology detect stale. Prevents the KCC from excluding servers that are unreachable from the topology; that is, the KCC does use an alternate server to reroute replication. Use this option only if network communication is very unstable and brief outages are expected.
    .PARAMETER TopologyMinimumHopsEnabled
        Indicates whether the cmdlet enables topology minimum hops. When enabled, prevents the KCC from generating optimizing connections in the ring topology of intrasite replication. Optimizing connections reduce the replication latency in the site and disabling them is not recommended.
    .PARAMETER UniversalGroupCachingEnabled
        Indicates whether the cmdlet enables universal group caching. If this parameter is true, it indicates this site caches universal groups, which are those groups cached on global catalog (GC) servers. It can be useful in sites with no GC servers available locally.
    .PARAMETER UniversalGroupCachingRefreshSite
        Specifies the name of a site from which the cache is pulled if universal group caching is enabled.
    .PARAMETER WindowsServer2000BridgeheadSelectionMethodEnabled
        Implements the Windows 2000 Server method of selecting a single bridgehead server per directory partition and transport.
    .PARAMETER WindowsServer2000KCCISTGSelectionBehaviorEnabled
        Indicates whether the cmdlet implements the Windows 2000 Server method of ISTG selection. Off by default.
    .PARAMETER WindowsServer2003KCCBehaviorEnabled
        Implements KCC operation that is consistent with Windows Server 2003 forest functional level. This option can be set if all domain controllers in the site are running Windows Server 2003.
    .PARAMETER WindowsServer2003KCCIgnoreScheduleEnabled
        Indicates whether to ignore schedules. When the forest functional level Windows Server 2003 or Windows Server 2003 interim is in effect, provides KCC control of the ability to ignore schedules (replication occurs at the designated intervals and is always available).
    .PARAMETER WindowsServer2003KCCSiteLinkBridgingEnabled
        Indicates whether the cmdlet enables site link bridging. When the forest functional level Windows Server 2003 or Windows Server 2003 interim is in effect, provides KCC control of the ability to enable or disable site link bridging.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216377')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # AutomaticInterSiteTopologyGenerationEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AutomaticInterSiteTopologyGenerationEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("AutomaticInterSiteTopologyGenerationEnabled", $parameter)
        
        # AutomaticTopologyGenerationEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AutomaticTopologyGenerationEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("AutomaticTopologyGenerationEnabled", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADReplicationSite], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # InterSiteTopologyGenerator
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("InterSiteTopologyGenerator", [Microsoft.ActiveDirectory.Management.ADDirectoryServer], $attributes)
        $parameters.Add("InterSiteTopologyGenerator", $parameter)
        
        # ManagedBy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ManagedBy", [Microsoft.ActiveDirectory.Management.ADPrincipal], $attributes)
        $parameters.Add("ManagedBy", $parameter)
        
        # Name
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Name", [System.String], $attributes)
        $parameters.Add("Name", $parameter)
        
        # OtherAttributes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OtherAttributes", [System.Collections.Hashtable], $attributes)
        $parameters.Add("OtherAttributes", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # RedundantServerTopologyEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("RedundantServerTopologyEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("RedundantServerTopologyEnabled", $parameter)
        
        # ReplicationSchedule
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ReplicationSchedule", [System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule], $attributes)
        $parameters.Add("ReplicationSchedule", $parameter)
        
        # ScheduleHashingEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ScheduleHashingEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ScheduleHashingEnabled", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # TopologyCleanupEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TopologyCleanupEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("TopologyCleanupEnabled", $parameter)
        
        # TopologyDetectStaleEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TopologyDetectStaleEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("TopologyDetectStaleEnabled", $parameter)
        
        # TopologyMinimumHopsEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TopologyMinimumHopsEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("TopologyMinimumHopsEnabled", $parameter)
        
        # UniversalGroupCachingEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UniversalGroupCachingEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("UniversalGroupCachingEnabled", $parameter)
        
        # UniversalGroupCachingRefreshSite
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UniversalGroupCachingRefreshSite", [Microsoft.ActiveDirectory.Management.ADReplicationSite], $attributes)
        $parameters.Add("UniversalGroupCachingRefreshSite", $parameter)
        
        # WindowsServer2000BridgeheadSelectionMethodEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("WindowsServer2000BridgeheadSelectionMethodEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("WindowsServer2000BridgeheadSelectionMethodEnabled", $parameter)
        
        # WindowsServer2000KCCISTGSelectionBehaviorEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("WindowsServer2000KCCISTGSelectionBehaviorEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("WindowsServer2000KCCISTGSelectionBehaviorEnabled", $parameter)
        
        # WindowsServer2003KCCBehaviorEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("WindowsServer2003KCCBehaviorEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("WindowsServer2003KCCBehaviorEnabled", $parameter)
        
        # WindowsServer2003KCCIgnoreScheduleEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("WindowsServer2003KCCIgnoreScheduleEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("WindowsServer2003KCCIgnoreScheduleEnabled", $parameter)
        
        # WindowsServer2003KCCSiteLinkBridgingEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("WindowsServer2003KCCSiteLinkBridgingEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("WindowsServer2003KCCSiteLinkBridgingEnabled", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADReplicationSiteLink {
    <#
    .SYNOPSIS
        Creates a new Active Directory site link for in managing replication.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Cost
        Specifies the cost to be placed on the site link. For more information on determining the cost, see Determining the Cost (https://go.microsoft.com/fwlink/?LinkId=221871)in the TechNet Library: http://go.microsoft.com/fwlink/?LinkId=221871.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The Lightweight Directory Access Protocol (LDAP) display name ( ldapDisplayName ) for this property is description.
    .PARAMETER Instance
        Specifies an instance of a site link object to use as a template for a new site link object.
        You can use an instance of an existing site link object as a template or you can construct a new site link object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing site link object as a template for a new object. To retrieve an instance of an existing site link object, use a cmdlet such as Get-ADReplicationSiteLink . Then provide this object to the Instance parameter of the New-ADReplicationSiteLink cmdlet to create a new Active Directory object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADReplicationSiteLink and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADReplicationSiteLink cmdlet to create the new site link object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set raises an error.
    .PARAMETER InterSiteTransportProtocol
        Specifies a valid intersite transport protocol option. The acceptable values for this parameter are:
        - IP
        - SMTP
    .PARAMETER Name
        Specifies the name of the site link. This parameter sets the Name property of the Active Directory object. The LDAP display name ( ldapDisplayName ) of this property is name.
    .PARAMETER OtherAttributes
        Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAPDisplayName ( ldapDisplayName ) defined for it in the Active Directory schema.
        Syntax:
        To specify a single value for an attribute:
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value}`
        To specify multiple values for an attribute
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}`
        You can specify values for more than one attribute by using semicolons to separate attributes. The following syntax shows how to set values for multiple attributes:
        `-OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}`
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ReplicationFrequencyInMinutes
        Species the frequency, in minutes, for which replication will occur where this site link is in use between sites. Active Directory preserves bandwidth between sites by minimizing the frequency of replication and by allowing you to schedule the availability of site links for replication. By default, intersite replication across each site link occurs every 180 minutes (3 hours). You can adjust this frequency to match your specific needs. Be aware that increasing this frequency increases the amount of bandwidth used by replication.
    .PARAMETER ReplicationSchedule
        Specifies the default replication schedule for any connections within this site link (intra-site replication). This allows you to schedule the availability of site links for use by replication. By default, a site link is available to carry replication traffic 24 hours a day, 7 days a week. You can limit this schedule to specific days of the week and times of day. You can, for example, schedule intersite replication so that it only occurs after normal business hours.
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER SitesIncluded
        Specifies the list of sites included in the site link.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216378')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Cost
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Cost", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("Cost", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADReplicationSiteLink], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # InterSiteTransportProtocol
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("InterSiteTransportProtocol", [System.Nullable`1[Microsoft.ActiveDirectory.Management.ADInterSiteTransportProtocolType]], $attributes)
        $parameters.Add("InterSiteTransportProtocol", $parameter)
        
        # Name
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Name", [System.String], $attributes)
        $parameters.Add("Name", $parameter)
        
        # OtherAttributes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OtherAttributes", [System.Collections.Hashtable], $attributes)
        $parameters.Add("OtherAttributes", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ReplicationFrequencyInMinutes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ReplicationFrequencyInMinutes", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ReplicationFrequencyInMinutes", $parameter)
        
        # ReplicationSchedule
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ReplicationSchedule", [System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule], $attributes)
        $parameters.Add("ReplicationSchedule", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # SitesIncluded
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SitesIncluded", [Microsoft.ActiveDirectory.Management.ADReplicationSite[]], $attributes)
        $parameters.Add("SitesIncluded", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADReplicationSiteLinkBridge {
    <#
    .SYNOPSIS
        Creates a site link bridge in Active Directory for replication.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The Lightweight Directory Access Protocol (LDAP) display name ( ldapDisplayName ) for this property is description.
    .PARAMETER Instance
        Specifies an instance of a site link bridge object to use as a template for a new site link bridge object.
        You can use an instance of an existing site link bridge object as a template or you can construct a new site link bridge object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing site link bridge object as a template for a new object. To retrieve an instance of an existing Active Directory object, use the Get-ADReplicationSiteLinkBridge cmdlet. Then provide this object to the Instance parameter of the New-ADReplicationSiteLinkBridge cmdlet to create a new site link bridge object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADReplicationSiteLinkBridge and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADReplicationSiteLinkBridge cmdlet to create the new site link bridge object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set raises an error.
    .PARAMETER InterSiteTransportProtocol
        Specifies the intersite transport protocol for this site link bridge. The acceptable values for this parameter are:
        - IP
        - SMTP
    .PARAMETER Name
        Specifies the name of the replication site link bridge object.
    .PARAMETER OtherAttributes
        Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAP display name ( ldapDisplayName ) defined for it in the Active Directory schema.
        To specify a single value for an attribute:
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value}`
        To specify multiple values for an attribute:
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}`
        You can specify values for more than one attribute by using semicolons to separate attributes. The following syntax shows how to set values for multiple attributes:
        `-OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}`
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - FQDN
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER SiteLinksIncluded
        Specifies an array of site links that are included in this site link bridge. Accepted values for this parameter are the distinguished name, a GUID, or the name of a site link. This parameter must contain two sites upon creation or else the Instance parameter must be included and used.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216379')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADReplicationSiteLinkBridge], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # InterSiteTransportProtocol
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("InterSiteTransportProtocol", [System.Nullable`1[Microsoft.ActiveDirectory.Management.ADInterSiteTransportProtocolType]], $attributes)
        $parameters.Add("InterSiteTransportProtocol", $parameter)
        
        # Name
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Name", [System.String], $attributes)
        $parameters.Add("Name", $parameter)
        
        # OtherAttributes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OtherAttributes", [System.Collections.Hashtable], $attributes)
        $parameters.Add("OtherAttributes", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # SiteLinksIncluded
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SiteLinksIncluded", [Microsoft.ActiveDirectory.Management.ADReplicationSiteLink[]], $attributes)
        $parameters.Add("SiteLinksIncluded", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADReplicationSubnet {
    <#
    .SYNOPSIS
        Creates an Active Directory replication subnet object.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies a user account that has permission to perform this action. The default is the current user.
        Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet. If you type a user name, you will be prompted for a password.
        This parameter is not supported by any providers installed with Windows PowerShell.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name ( ldapDisplayName ) for this property is description.
    .PARAMETER Instance
        Specifies an instance of a subnet object to use as a template for a new subnet object.
        You can use an instance of an existing subnet object as a template or you can construct a new subnet object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing subnet object as a template for a new subnet object. To retrieve an instance of an existing subnet object, use the Get-ADReplicationSubnet cmdlet. Then provide this object to the Instance parameter of the New-ADReplicationSubnet cmdlet to create a new subnet object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADReplicationSubnet and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADReplicationSubnet cmdlet to create the new subnet object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set raises an error.
    .PARAMETER Location
        Specifies a description of the physical location of this subnet.
    .PARAMETER Name
        Specifies the name of the subnet. This parameter sets the Name property of the Active Directory object. The LDAP display name ( ldapDisplayName ) of this property is name.
        Subnet names in Active Directory take the form network/bits masked. For example, the subnet object 172.16.72.0/22 has a subnet of 172.16.72.0 and a 22-bit subnet mask.
    .PARAMETER OtherAttributes
        Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAP display name ( ldapDisplayName ) defined for it in the Active Directory schema.
        To specify a single value for an attribute:
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value}`
        To specify multiple values for an attribute:
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}`
        You can specify values for more than one attribute by using semicolons to separate attributes. The following syntax shows how to set values for multiple attributes:
        `-OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}`
        The following examples show how to use this parameter.
        To set the value of a custom attribute called favColors that takes a set of Unicode strings, use the following syntax:
        `-OtherAttributes @{'favColors'="pink","purple"}`
        To set values for favColors and dateOfBirth simultaneously, use the following syntax:
        `-OtherAttributes @{'favColors'="pink","purple"; 'dateOfBirth'=" 01/01/1960"}`
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER Site
        Specifies the site associated with this subnet.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216380')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADReplicationSubnet], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # Location
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Location", [System.String], $attributes)
        $parameters.Add("Location", $parameter)
        
        # Name
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Name", [System.String], $attributes)
        $parameters.Add("Name", $parameter)
        
        # OtherAttributes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OtherAttributes", [System.Collections.Hashtable], $attributes)
        $parameters.Add("OtherAttributes", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # Site
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.ParameterSetName = "Identity"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Site", [Microsoft.ActiveDirectory.Management.ADReplicationSite], $attributes)
        $parameters.Add("Site", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADResourceProperty {
    <#
    .SYNOPSIS
        Creates a resource property in Active Directory.
    .PARAMETER AppliesToResourceTypes
        Specifies the resource types to which this resource property is applied.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name ( ldapDisplayName ) for this property is description.
    .PARAMETER DisplayName
        Specifies the display name of the resource property. The display name of the resource property must be unique.
        The display name of a resource property can be used as an identity in other Active Directory cmdlets. For example, if the display name of a resource property is Country, then you can type `Get-ADResourceProperty -Identity "Country"` to get the resource property.
    .PARAMETER Enabled
        Indicates whether the resource property is enabled.
    .PARAMETER ID
        Specifies the resource property ID. This is an optional parameter. By default, New-ADResourceProperty generates the ID automatically.
        The ID should only be set manually in a multi-forest environment where the same resource properties need to work across forests. For resource properties to be considered identical across forests, their ID must be the same.
        To specify the ID, the ID string must conform to the following format:
        - Start with a prefix string of one to 15 characters in length.
        - The prefix string must be followed by an underscore.
        - The prefix string and underscore must be followed by a suffix string of 1 to 16 characters in length.
        - All characters contained in either prefix or suffix strings must contain only valid filename characters.
    .PARAMETER Instance
        Specifies an instance of a resource property object to use as a template for a new resource property object.
        You can use an instance of an existing resource property object as a template or you can construct a new resource property object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing resource property object as a template for a new object. To retrieve an instance of an existing resource property object, use a cmdlet such as Get-ADResourceProperty . Then provide this object to the Instance parameter of the New-ADResourceProperty cmdlet to create a new resource property object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADResourceProperty and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADResourceProperty cmdlet to create the new resource property object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set raises an error.
    .PARAMETER IsSecured
        Indicates whether the resource property is secure. Only secure resource properties can be used for authorization decisions or used within central access rules. Unsecured resource properties cannot be used for these purposes.
    .PARAMETER OtherAttributes
        Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAPDisplayName ( ldapDisplayName ) defined for it in the Active Directory schema.
        To specify a single value for an attribute:
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value}`
        To specify multiple values for an attribute
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}`
        You can specify values for more than one attribute by using semicolons to separate attributes. The following syntax shows how to set values for multiple attributes:
        `-OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}`
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ProtectedFromAccidentalDeletion
        Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER ResourcePropertyValueType
        Specifies the value type for a resource property. When a resource property is passed to a resource manager (for example, File Server), the resource manager leverages the resource property value type to determine how to handle the resource property.
        You can use the Get-ADResourcePropertyValueType cmdlet to get the list of resource property value types.
        Below is a list of the built-in resource property value types available in Active Directory:
        - MS-DS-SinglevaluedChoice
        - MS-DS-YesNo
        - MS-DS-Number
        - MS-DS-DateTime
        - MS-DS-OrderedList
        - MS-DS-Text
        - MS-DS-MultivaluedText
        - MS-DS-MultivaluedChoice
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER SharesValuesWith
        Specifies a reference resource property. Reference resource properties do not provide their own suggested values, but rather use the suggested values from the claim type object specified in this parameter. This enables the resource property to always remain valid for use in comparisons to its referred claim type within a central access rule.
    .PARAMETER SuggestedValues
        Specifies one or more suggested values for the resource property. An application may choose to present this list of suggested values for the user to choose from. When RestrictValues is set to $True, the application should restrict the user to pick values from this list only.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216381')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AppliesToResourceTypes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AppliesToResourceTypes", [System.String[]], $attributes)
        $parameters.Add("AppliesToResourceTypes", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # DisplayName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisplayName", [System.String], $attributes)
        $parameters.Add("DisplayName", $parameter)
        
        # Enabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Enabled", [System.Boolean], $attributes)
        $parameters.Add("Enabled", $parameter)
        
        # ID
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ID", [System.String], $attributes)
        $parameters.Add("ID", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADResourceProperty], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # IsSecured
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("IsSecured", [System.Boolean], $attributes)
        $parameters.Add("IsSecured", $parameter)
        
        # OtherAttributes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OtherAttributes", [System.Collections.Hashtable], $attributes)
        $parameters.Add("OtherAttributes", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # ResourcePropertyValueType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResourcePropertyValueType", [Microsoft.ActiveDirectory.Management.ADResourcePropertyValueType], $attributes)
        $parameters.Add("ResourcePropertyValueType", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # SharesValuesWith
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SharesValuesWith", [Microsoft.ActiveDirectory.Management.ADClaimType], $attributes)
        $parameters.Add("SharesValuesWith", $parameter)
        
        # SuggestedValues
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SuggestedValues", [Microsoft.ActiveDirectory.Management.ADSuggestedValueEntry[]], $attributes)
        $parameters.Add("SuggestedValues", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADResourcePropertyList {
    <#
    .SYNOPSIS
        Creates a resource property list in Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object. You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name ( ldapDisplayName ) for this property is description.
    .PARAMETER Instance
        Specifies an instance of an resource property list object to use as a template for a new resource property list object.
        You can use an instance of an existing resource property list object as a template or you can construct a new resource property list object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing resource property list object as a template for a new object. To retrieve an instance of an existing resource property list object, use a cmdlet such as Get-ADResourcePropertyList . Then provide this object to the Instance parameter of the New-ADResourcePropertyList cmdlet to create a new resource property list object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADResourcePropertyList and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADResourcePropertyList cmdlet to create the new resource property list object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.
    .PARAMETER Name
        Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name ( ldapDisplayName ) of this property is name.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ProtectedFromAccidentalDeletion
        Specifies whether to prevent the object from being deleted. When this property is set to $True, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216382')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADResourcePropertyList], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # Name
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Name", [System.String], $attributes)
        $parameters.Add("Name", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADServiceAccount {
    <#
    .SYNOPSIS
        Creates a new Active Directory managed service account or group managed service account object.
    .PARAMETER AccountExpirationDate
        Specifies the expiration date for an account. This parameter sets the AccountExpirationDate property of an account object. The LDAP display name ( ldapDisplayName ) for this property is accountExpires.
        Use the DateTime syntax when you specify this parameter. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date.
    .PARAMETER AccountNotDelegated
        Indicates whether the security context of the user is delegated to a service. When this parameter is set to true, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute.
    .PARAMETER AccountPassword
        Specifies a new password value for the service account. This value is stored as an encrypted string.
        The following conditions apply based on the manner in which the password parameter is used:
        - $Null password is specified. Random password is set and the account is enabled unless it is requested to be disabled. - No password is specified. Random password is set and the account is enabled unless it is requested to be disabled. - User password is specified. Password is set and the account is enabled unless it is requested to be disabled, unless the password you provided does not meet password policy or was not set for other reasons, at which point the account is disabled.
        The new ADServiceAccount object will always either be disabled or have a user-requested or randomly-generated password. There is no way to create an enabled service account object with a password that violates domain password policy, such as an empty password.
    .PARAMETER AuthenticationPolicy
        Specifies an Active Directory Domain Services authentication policy object. Specify the authentication policy object in one of the following formats:
        - Distinguished name
        - GUID
        - Name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER AuthenticationPolicySilo
        Specifies an Active Directory Domain Services authentication policy silo object. Specify the authentication policy silo object in one of the following formats:
        - Distinguished name
        - GUID
        - Name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Certificates
        Specifies an array of certificates. The cmdlet modifies the DER-encoded X.509v3 certificates of the account. These certificates include the public key certificates issued to this account by the Microsoft Certificate Service. This parameter sets the Certificates property of the account object. The LDAP Display Name ( ldapDisplayName ) for this property is userCertificate.
        To add values:
        `-Certificates @{Add=value1,value2,...}`
        To remove values:
        `-Certificates @{Remove=value3,value4,...}`
        To replace values:
        `-Certificates @{Replace=value1,value2,...}`
        To clear all values:
        `-Certificates $Null`
        You can specify more than one operation by using a list separated by semicolons. For example, use the following syntax to add and remove Certificate values:
        `-Certificates @{Add=value1,value2,...};@{Remove=value3,value4,...}`
        The operators are applied in the following sequence:
        - Remove
        - Add
        - Replace
    .PARAMETER CompoundIdentitySupported
        Indicates whether an account supports Kerberos service tickets which includes the authorization data for the user's device.  This value sets the compound identity supported flag of the Active Directory msDS-SupportedEncryptionTypes attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
        Warning: Domain-joined Windows systems and services such as clustering manage their own msDS-SupportedEncryptionTypes attribute. Therefore any changes to the flag on the msDS-SupportedEncryptionTypes attribute will be overwritten by the service or system which manages the setting.
    .PARAMETER Credential
        Specifies the service account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type an administrative account name, such as Admin1 or Contoso\Admin1 or you can specify a PSCredential object. If you specify a service account name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name ( ldapDisplayName ) for this property is description.
    .PARAMETER DisplayName
        Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP Display Name ( ldapDisplayName ) for this property is displayName.
    .PARAMETER DNSHostName
        Specifies the DNS host name of Service Account.
    .PARAMETER Enabled
        Indicates whether an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory UAC attribute.
    .PARAMETER HomePage
        Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP Display Name ( ldapDisplayName ) for this property is wWWHomePage.
    .PARAMETER Instance
        Specifies an instance of a service account object to use as a template for a new service account object.
        You can use an instance of an existing service account object as a template or you can construct a new service account object for template use. You can construct a new service account using the Windows PowerShell command line or by using a script.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set raises an error.
    .PARAMETER KerberosEncryptionType
        Indicates whether an account supports Kerberos encryption types which are used during creation of service tickets. This value sets the encryption types supported flags of the Active Directory msDS-SupportedEncryptionTypes attribute. The acceptable values for this parameter are:
        - None
        - DES
        - RC4
        - AES128
        - AES256
        None will remove all encryption types from the account may result in the KDC being unable to issue service tickets for services using the account.
        DES is a weak encryption type that is not supported by default since Windows 7 and Windows Server 2008 R2.
        Warning: Domain-joined Windows systems and services such as clustering manage their own msDS-SupportedEncryptionTypes attribute. Therefore any changes to the flag on the msDS-SupportedEncryptionTypes attribute will be overwritten by the service or system which manages the setting.
    .PARAMETER ManagedPasswordIntervalInDays
        Specifies the number of days for the password change interval. If set to 0 then the default is used. This can only be set on object creation. After that the setting is read only. This value returns the msDS-ManagedPasswordInterval of the group managed service account object.
    .PARAMETER Name
        Specifies the name of the object. This parameter sets the Name property of the Active Directory object. The LDAP Display Name ( ldapDisplayName ) of this property is name.
    .PARAMETER OtherAttributes
        Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAP Display Name ( ldapDisplayName ) defined for it in the Active Directory schema.
        To specify a single value for an attribute:
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value}`
        To specify multiple values for an attribute
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}`
        You can specify values for more than one attribute by using semicolons to separate attributes. The following syntax shows how to set values for multiple attributes:
        `-OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}`
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Path
        Specifies the X.500 path of the organizational unit (OU) or container where the new object is created.
        In many cases, a default value will be used for the Path parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In AD DS environments, a default value for Path is set in the following cases:
        - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
        - If the cmdlet has a default path, this is used.
        For example: in New-ADUser , the Path parameter defaults to the Users container. - If none of the previous cases apply, the default value of Path is set to the default partition or naming context of the target domain.
        In AD LDS environments, a default value for Path is set in the following cases:
        - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
        - If the cmdlet has a default path, this is used.
        For example: in New-ADUser , the Path parameter defaults to the Users container.  - If the target AD LDS instance has a default naming context, the default value of Path is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Path parameter does not take any default value.
        Note: The Active Directory Provider cmdlets, such as New-Item , Remove-Item , Remove-ItemProperty , Rename-Item , and Set-ItemProperty , also contain a Path property. However, for the provider cmdlets, the Path parameter identifies the path of the actual object and not the container as with the Active Directory cmdlets.
    .PARAMETER PrincipalsAllowedToDelegateToAccount
        Specifies the accounts that can act on the behalf of users to services running as this managed service account or group-managed service account. This parameter sets the msDS-AllowedToActOnBehalfOfOtherIdentity attribute of the object.
    .PARAMETER PrincipalsAllowedToRetrieveManagedPassword
        Specifies the membership policy for systems that can use a group-managed service account. For a service to run under a group managed service account, the system must be in the membership policy of the account. This parameter sets the msDS-GroupMSAMembership attribute of a group-managed service account object. This parameter should be set to the principals allowed to use this group-managed service account.
    .PARAMETER RestrictToOutboundAuthenticationOnly
        Indicates that the cmdlet creates a group-managed service account that on success can be used by a service for successful outbound authentication requests only. This allows creating a group managed service account without the parameters required for successful inbound authentication.
    .PARAMETER RestrictToSingleComputer
        Indicates that the cmdlet creates a managed service account that can be used only for a single computer. Managed service accounts that are linked to a single computer account were introduced in Windows Server 2008 R2.
    .PARAMETER SamAccountName
        Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 15 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name ( ldapDisplayName ) for this property is sAMAccountName.
        Note: If the specified SAMAccountName string does not end with a $ (dollar sign), one is appended if necessary.
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Domain name values:
        - Fully qualified domain name (FQDN)
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
        - By using Server value from objects passed through the pipeline.  - By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
        - By using the domain of the computer running PowerShell.
    .PARAMETER ServicePrincipalNames
        Specifies the service principal names for the account. This parameter sets the ServicePrincipalNames property of the account. The LDAP display name ( ldapDisplayName ) for this property is servicePrincipalName. This parameter uses the following syntax to add remove, replace or clear service principal name values.
        To add values:
        `-ServicePrincipalNames @{Add=value1,value2,...}`
        To remove values:
        `-ServicePrincipalNames @{Remove=value3,value4,...}`
        To replace values:
        `-ServicePrincipalNames @{Replace=value1,value2,...}`
        To clear all values:
        `-ServicePrincipalNames $Null`
        You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove service principal names.
        `@{Add=value1,value2,...};@{Remove=value3,value4,...}`
        The operators are applied in the following sequence:
        - Remove
        - Add
        - Replace
    .PARAMETER TrustedForDelegation
        Indicates whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    #>
    
    [CmdletBinding(DefaultParameterSetName='Group', SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301401')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AccountExpirationDate
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountExpirationDate", [System.Nullable`1[System.DateTime]], $attributes)
        $parameters.Add("AccountExpirationDate", $parameter)
        
        # AccountNotDelegated
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountNotDelegated", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("AccountNotDelegated", $parameter)
        
        # AccountPassword
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "RestrictedToSingleComputer"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountPassword", [System.Security.SecureString], $attributes)
        $parameters.Add("AccountPassword", $parameter)
        
        # AuthenticationPolicy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthenticationPolicy", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicy], $attributes)
        $parameters.Add("AuthenticationPolicy", $parameter)
        
        # AuthenticationPolicySilo
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthenticationPolicySilo", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicySilo], $attributes)
        $parameters.Add("AuthenticationPolicySilo", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Certificates
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Certificates", [System.String[]], $attributes)
        $parameters.Add("Certificates", $parameter)
        
        # CompoundIdentitySupported
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Group"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("CompoundIdentitySupported", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("CompoundIdentitySupported", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # DisplayName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisplayName", [System.String], $attributes)
        $parameters.Add("DisplayName", $parameter)
        
        # DNSHostName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Group"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DNSHostName", [System.String], $attributes)
        $parameters.Add("DNSHostName", $parameter)
        
        # Enabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Enabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("Enabled", $parameter)
        
        # HomePage
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("HomePage", [System.String], $attributes)
        $parameters.Add("HomePage", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADServiceAccount], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # KerberosEncryptionType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("KerberosEncryptionType", [Microsoft.ActiveDirectory.Management.ADKerberosEncryptionType], $attributes)
        $parameters.Add("KerberosEncryptionType", $parameter)
        
        # ManagedPasswordIntervalInDays
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Group"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ManagedPasswordIntervalInDays", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ManagedPasswordIntervalInDays", $parameter)
        
        # Name
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Name", [System.String], $attributes)
        $parameters.Add("Name", $parameter)
        
        # OtherAttributes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OtherAttributes", [System.Collections.Hashtable], $attributes)
        $parameters.Add("OtherAttributes", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Path
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Path", [System.String], $attributes)
        $parameters.Add("Path", $parameter)
        
        # PrincipalsAllowedToDelegateToAccount
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Group"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PrincipalsAllowedToDelegateToAccount", [Microsoft.ActiveDirectory.Management.ADPrincipal[]], $attributes)
        $parameters.Add("PrincipalsAllowedToDelegateToAccount", $parameter)
        
        # PrincipalsAllowedToRetrieveManagedPassword
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Group"
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PrincipalsAllowedToRetrieveManagedPassword", [Microsoft.ActiveDirectory.Management.ADPrincipal[]], $attributes)
        $parameters.Add("PrincipalsAllowedToRetrieveManagedPassword", $parameter)
        
        # RestrictToOutboundAuthenticationOnly
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "RestrictedToOutboundAuthenticationOnly"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateSetAttribute('true')
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("RestrictToOutboundAuthenticationOnly", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("RestrictToOutboundAuthenticationOnly", $parameter)
        
        # RestrictToSingleComputer
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "RestrictedToSingleComputer"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateSetAttribute('true')
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("RestrictToSingleComputer", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("RestrictToSingleComputer", $parameter)
        
        # SamAccountName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SamAccountName", [System.String], $attributes)
        $parameters.Add("SamAccountName", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # ServicePrincipalNames
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateMultivalueArrayAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ServicePrincipalNames", [System.String[]], $attributes)
        $parameters.Add("ServicePrincipalNames", $parameter)
        
        # TrustedForDelegation
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TrustedForDelegation", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("TrustedForDelegation", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function New-ADUser {
    <#
    .SYNOPSIS
        Creates an Active Directory user.
    .PARAMETER AccountExpirationDate
        Specifies the expiration date for an account. This parameter sets the AccountExpirationDate property of an account object. The LDAP display name ( ldapDisplayName ) for this property is `accountExpires`. Use the DateTime syntax when you specify this parameter. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date.
    .PARAMETER AccountNotDelegated
        Indicates whether the security context of the user is delegated to a service. When this parameter is set to `$true`, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute.
        The acceptable values for this parameter are:
        - `$false` or 0
        - `$true` or 1
    .PARAMETER AccountPassword
        Specifies a new password value for an account.
        This value is stored as an encrypted string.
        The following conditions apply based on the manner in which the password parameter is used:
        - $Null password is specified: No password is set and the account is disabled unless it is requested   to be enabled. - No password is specified: No password is set and the account is disabled unless it is requested to   be enabled. - User password is specified: Password is set and the account is disabled unless it is requested to   be enabled.
        User accounts, by default, are created without a password. If you provide a password, an attempt will be made to set that password however, this can fail due to password policy restrictions. The user account will still be created and you may use `Set-ADAccountPassword` to set the password on that account. In order to ensure that accounts remain secure, user accounts will never be enabled unless a valid password is set or PasswordNotRequired is set to `$true`.
        The account is created if the password fails for any reason.
    .PARAMETER AllowReversiblePasswordEncryption
        Indicates whether reversible password encryption is allowed for the account. This parameter sets the AllowReversiblePasswordEncryption property of the account. This parameter also sets the ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED flag of the Active Directory User Account Control (UAC) attribute.
        The acceptable values for this parameter are:
        - `$false` or `0`
        - `$true` or `1`
    .PARAMETER AuthenticationPolicy
        Specifies an Active Directory Domain Services authentication policy object. Specify the authentication policy object in one of the following formats:
        - Distinguished name
        - GUID
        - Name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER AuthenticationPolicySilo
        Specifies an Active Directory Domain Services authentication policy silo object.
        Specify the authentication policy silo object in one of the following formats:
        - Distinguished name
        - GUID
        - Name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - `Negotiate` or `0`
        - `Basic` or `1`
        The default authentication method is Negotiate. A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER CannotChangePassword
        Indicates whether the account password can be changed. This parameter sets the CannotChangePassword property of an account.
        The acceptable values for this parameter are:
        - `$false` or `0`
        - `$true` or `1`
    .PARAMETER Certificates
        Specifies the DER-encoded X.509v3 certificates of the account. These certificates include the public key certificates issued to this account by the Microsoft Certificate Service. This parameter sets the Certificates property of the account object. The LDAP display name ( ldapDisplayName ) for this property is `userCertificate`.
    .PARAMETER ChangePasswordAtLogon
        Indicates whether a password must be changed during the next logon attempt.
        The acceptable values for this parameter are:
        - `$false` or `0`
        - `$true` or `1`
        This parameter cannot be set to `$true` or 1 for an account that also has the PasswordNeverExpires property set to `$true`.
    .PARAMETER City
        Specifies the user's town or city. This parameter sets the City property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `l`.
    .PARAMETER Company
        Specifies the user's company. This parameter sets the Company property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `company`.
    .PARAMETER CompoundIdentitySupported
        Specifies whether an account supports Kerberos service tickets which includes the authorization data for the user's device. This value sets the compound identity supported flag of the Active Directory `msDS-SupportedEncryptionTypes` attribute.
        The acceptable values for this parameter are:
        - `$false` or `0`
        - `$true` or `1`
        > [!WARNING] > Domain-joined Windows systems and services such as clustering manage their own > `msDS-SupportedEncryptionTypes` attribute. Therefore any changes to the flag on the > `msDS-SupportedEncryptionTypes` attribute are overwritten by the service or system that manages > the setting.
    .PARAMETER Country
        Specifies the country or region code for the user's language of choice. This parameter sets the Country property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `c`.
        This value is not used by Windows 2000.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default. To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object.
        If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the `Get-Credential` cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Department
        Specifies the user's department. This parameter sets the Department property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `department`.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the user object. The LDAP display name ( ldapDisplayName ) for this property is `description`.
    .PARAMETER DisplayName
        Specifies the display name of the object. This parameter sets the DisplayName property of the user object. The LDAP display name ( ldapDisplayName ) for this property is `displayName`.
    .PARAMETER Division
        Specifies the user's division. This parameter sets the Division property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `division`.
    .PARAMETER EmailAddress
        Specifies the user's e-mail address. This parameter sets the EmailAddress property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `mail`.
    .PARAMETER EmployeeID
        Specifies the user's employee ID. This parameter sets the EmployeeID property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `employeeID`.
    .PARAMETER EmployeeNumber
        Specifies the user's employee number. This parameter sets the EmployeeNumber property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `employeeNumber`.
    .PARAMETER Enabled
        Specifies if an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute.
        The acceptable values for this parameter are:
        - `$false` or `0`
        - `$true` or `1`
    .PARAMETER Fax
        Specifies the user's fax phone number. This parameter sets the Fax property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `facsimileTelephoneNumber`.
    .PARAMETER GivenName
        Specifies the user's given name. This parameter sets the GivenName property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `givenName`.
    .PARAMETER HomeDirectory
        Specifies a user's home directory. This parameter sets the HomeDirectory property of a user object. The LDAP display name ( ldapDisplayName ) for this property is `homeDirectory`.
    .PARAMETER HomeDrive
        Specifies a drive that is associated with the UNC path defined by the HomeDirectory property. The drive letter is specified as `<DriveLetter>:` where `<DriveLetter>` indicates the letter of the drive to associate. The `<DriveLetter>` must be a single, uppercase letter and the colon is required.
        This parameter sets the HomeDrive property of the user object. The LDAP display name ( ldapDisplayName ) for this property is `homeDrive`.
    .PARAMETER HomePage
        Specifies the URL of the home page of the object. This parameter sets the homePage property of a user object. The LDAP display name ( ldapDisplayName ) for this property is `wWWHomePage`.
    .PARAMETER HomePhone
        Specifies the user's home telephone number. This parameter sets the HomePhone property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `homePhone`.
    .PARAMETER Initials
        Specifies the initials that represent part of a user's name. You can use this value for the user's middle initial. This parameter sets the Initials property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `initials`.
    .PARAMETER Instance
        Specifies an instance of a user object to use as a template for a new user object. You can use an instance of an existing user object as a template or you can construct a new user object for template use. You can construct a new user object using the Windows PowerShell command line or by using a script.
        - Method 1: Use an existing user object as a template for a new object. To retrieve an instance of   an existing user object, use a cmdlet such as `Get-ADUser`. Then provide this object to the Instance parameter of the `New-ADUser` cmdlet to create a new user object. You can override   property values of the new object by setting the appropriate parameters. - Method 2: Create a new ADUser object and set the property values by using the Windows   PowerShell command line interface. Then pass this object to the Instance parameter of the   `New-ADUser` cmdlet to create the new Active Directory user object.
        > [!NOTE] > Specified attributes are not validated, so attempting to set attributes that do not exist or > cannot be set raises an error.
    .PARAMETER KerberosEncryptionType
        Specifies whether an account supports Kerberos encryption types which are used during creation of service tickets. This value sets the encryption types supported flags of the Active Directory `msDS-SupportedEncryptionTypes` attribute.
        Possible values for this parameter are:
        - `None`
        - `DES`
        - `RC4`
        - `AES128`
        - `AES256`
        `None` removes all encryption types from the account, resulting in the KDC being unable to issue service tickets for services using the account.
        `DES` is a weak encryption type that is not supported by default since Windows 7 and Windows Server 2008 R2.
        > [!WARNING] > Domain-joined Windows systems and services such as clustering manage their own > `msDS-SupportedEncryptionTypes` attribute. Therefore any changes to the flag on the > `msDS-SupportedEncryptionTypes` attribute are overwritten by the service or system that manages > the setting.
    .PARAMETER LogonWorkstations
        Specifies the computers that the user can access. To specify more than one computer, create a single comma-separated list. You can identify a computer by using the Security Account Manager (SAM) account name ( sAMAccountName ) or the DNS host name of the computer. The SAM account name is the same as the NetBIOS name of the computer. The LDAP display name ( ldapDisplayName ) for this property is `userWorkStations`.
    .PARAMETER Manager
        Specifies the user's manager. This parameter sets the Manager property of a user object. This parameter is set by providing one of the following property values.
        The identifier in parentheses is the LDAP display name for the property. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (`objectGUID`)
        - A security identifier (`objectSid`)
        - A SAM account name (`sAMAccountName`)
    .PARAMETER MobilePhone
        Specifies the user's mobile phone number. This parameter sets the MobilePhone property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `mobile`.
    .PARAMETER Name
        Specifies the name of the object. This parameter sets the Name property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `name`.
    .PARAMETER Office
        Specifies the location of the user's office or place of business. This parameter sets the Office property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `physicalDeliveryOfficeName`.
    .PARAMETER OfficePhone
        Specifies the user's office telephone number. This parameter sets the OfficePhone property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `telephoneNumber`.
    .PARAMETER Organization
        Specifies the user's organization. This parameter sets the Organization property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `o`.
    .PARAMETER OtherAttributes
        Specifies object attribute values for attributes that are not represented by cmdlet parameters. You can set one or more parameters at the same time with this parameter. If an attribute takes more than one value, you can assign multiple values. To identify an attribute, specify the LDAP display name ( ldapDisplayName ) defined for it in the Active Directory schema.
        To specify a single value for an attribute:
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value}`
        To specify multiple values for an attribute:
        `-OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}`
        To specify values for multiple attributes:
        `-OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}`
    .PARAMETER OtherName
        Specifies a name in addition to a user's given name and surname, such as the user's middle name. This parameter sets the OtherName property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `middleName`.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER PasswordNeverExpires
        Specifies whether the password of an account can expire. This parameter sets the PasswordNeverExpires property of an account object. This parameter also sets the ADS_UF_DONT_EXPIRE_PASSWD flag of the Active Directory User Account Control attribute.
        The acceptable values for this parameter are:
        - `$false` or `0`
        - `$true` or `1`
        This parameter cannot be set to `$true` or `1` for an account that also has the ChangePasswordAtLogon property set to `$true`.
    .PARAMETER PasswordNotRequired
        Specifies whether the account requires a password. A password is not required for a new account. This parameter sets the PasswordNotRequired property of an account object.
    .PARAMETER Path
        Specifies the X.500 path of the OU or container where the new object is created. In many cases, a default value is used for the Path parameter if no value is specified. The rules for determining the default value are given below. The rules listed first are evaluated first and when a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Path is set in the following cases:
        - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to   the current path of the provider drive. - If the cmdlet has a default path, this is used. For example: in New-ADUser, the Path parameter   defaults to the Users container. - If none of the previous cases apply, the default value of Path is set to the default partition   or naming context of the target domain.
        In AD LDS environments, a default value for Path is set in the following cases:
        - If the cmdlet is run from an Active Directory module for PowerShell provider drive, the parameter   is set to the current path of the provider drive. - If the cmdlet has a default path, this is used. For example: in `New-ADUser`, the Path parameter defaults to the Users container. - If the target AD LDS instance has a default naming context, the default value of Path is set to   the default naming context. To specify a default naming context for an AD LDS environment, set the   `msDS-defaultNamingContext` property of the Active Directory directory service agent object   ( nTDSDSA ) for the AD LDS instance. - If none of the previous cases apply, the Path parameter does not take any default value.
        > [!NOTE] > The Active Directory Provider cmdlets, such as `New-Item`, `Remove-Item`, `Remove-ItemProperty`, > `Rename-Item`, and `Set-ItemProperty` also contain a Path property. However, for the Active > Directory Provider cmdlets, the Path parameter identifies the path of the actual object rather > than the container.
    .PARAMETER POBox
        Specifies the user's post office box number. This parameter sets the POBox property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `postOfficeBox`.
    .PARAMETER PostalCode
        Specifies the user's postal code or zip code. This parameter sets the PostalCode property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `postalCode`.
    .PARAMETER PrincipalsAllowedToDelegateToAccount
        Specifies an array of principal objects. This parameter sets the `msDS-AllowedToActOnBehalfOfOtherIdentity` attribute of a computer account object.
    .PARAMETER ProfilePath
        Specifies a path to the user's profile. This value can be a local absolute path or a Universal Naming Convention (UNC) path. This parameter sets the ProfilePath property of the user object. The LDAP display name ( ldapDisplayName ) for this property is `profilePath`.
    .PARAMETER SamAccountName
        Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name ( ldapDisplayName ) for this property is `sAMAccountName`.
        > [!NOTE] > Information the user should notice even if skimmingIf the string value provided is not terminated > with a `$` character, the system adds one if needed.
    .PARAMETER ScriptPath
        Specifies a path to the user's log on script. This value can be a local absolute path or a Universal Naming Convention (UNC) path. This parameter sets the ScriptPath property of the user object. The LDAP display name ( ldapDisplayName ) for this property is `scriptPath`.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when   the cmdlet runs in that drive - By using the domain of the computer running Windows PowerShell
    .PARAMETER ServicePrincipalNames
        Specifies the service principal names for the account. This parameter sets the ServicePrincipalNames property of the account. The LDAP display name ( ldapDisplayName ) for this property is servicePrincipalName. To enter multiple values, use the following syntax: `<value1>,<value2>,...<valueX>`. If the values contain spaces or otherwise require quotation marks, use the following syntax: `'<value1>','<value2>',...'<valueX>'`.
    .PARAMETER SmartcardLogonRequired
        Specifies whether a smart card is required to logon. This parameter sets the SmartCardLoginRequired property for a user object. This parameter also sets the ADS_UF_SMARTCARD_REQUIRED flag of the Active Directory User Account Control attribute.
        The acceptable values for this parameter are:
        - `$false` or `0`
        - `$true` or `1`
    .PARAMETER State
        Specifies the user's or Organizational Unit's state or province. This parameter sets the State property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `st`.
    .PARAMETER StreetAddress
        Specifies the user's street address.
        This parameter sets the StreetAddress property of a user object. The LDAP display name ( ldapDisplayName ) of this property is streetAddress.
    .PARAMETER Surname
        Specifies the user's last name or surname. This parameter sets the Surname property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `sn`.
    .PARAMETER Title
        Specifies the user's title.
        This parameter sets the Title property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `title`.
    .PARAMETER TrustedForDelegation
        Indicates whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute.
        The acceptable values for this parameter are:
        - `$false` or `0`
        - `$true` or `1`
    .PARAMETER Type
        Specifies the type of object to create. Set the Type parameter to the LDAP display name of the Active Directory schema class that represents the type of object that you want to create. The selected type must be a subclass of the User schema class. If this parameter is not specified it defaults to `User`.
    .PARAMETER UserPrincipalName
        Specifies a user principal name (UPN) in the format `<user>@<DNS-domain-name>`. A UPN is a friendly name assigned by an administrator that is shorter than the LDAP distinguished name used by the system and easier to remember. The UPN is independent of the user object's distinguished name, so a user object can be moved or renamed without affecting the user logon name. When signing on using a UPN, users no longer have to choose a domain from a list on the logon dialog box.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301400')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AccountExpirationDate
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountExpirationDate", [System.Nullable`1[System.DateTime]], $attributes)
        $parameters.Add("AccountExpirationDate", $parameter)
        
        # AccountNotDelegated
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountNotDelegated", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("AccountNotDelegated", $parameter)
        
        # AccountPassword
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountPassword", [System.Security.SecureString], $attributes)
        $parameters.Add("AccountPassword", $parameter)
        
        # AllowReversiblePasswordEncryption
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AllowReversiblePasswordEncryption", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("AllowReversiblePasswordEncryption", $parameter)
        
        # AuthenticationPolicy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthenticationPolicy", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicy], $attributes)
        $parameters.Add("AuthenticationPolicy", $parameter)
        
        # AuthenticationPolicySilo
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthenticationPolicySilo", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicySilo], $attributes)
        $parameters.Add("AuthenticationPolicySilo", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # CannotChangePassword
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("CannotChangePassword", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("CannotChangePassword", $parameter)
        
        # Certificates
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateMultivalueArrayAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Certificates", [System.Security.Cryptography.X509Certificates.X509Certificate[]], $attributes)
        $parameters.Add("Certificates", $parameter)
        
        # ChangePasswordAtLogon
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ChangePasswordAtLogon", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ChangePasswordAtLogon", $parameter)
        
        # City
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("City", [System.String], $attributes)
        $parameters.Add("City", $parameter)
        
        # Company
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Company", [System.String], $attributes)
        $parameters.Add("Company", $parameter)
        
        # CompoundIdentitySupported
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("CompoundIdentitySupported", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("CompoundIdentitySupported", $parameter)
        
        # Country
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Country", [System.String], $attributes)
        $parameters.Add("Country", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Department
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Department", [System.String], $attributes)
        $parameters.Add("Department", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # DisplayName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisplayName", [System.String], $attributes)
        $parameters.Add("DisplayName", $parameter)
        
        # Division
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Division", [System.String], $attributes)
        $parameters.Add("Division", $parameter)
        
        # EmailAddress
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("EmailAddress", [System.String], $attributes)
        $parameters.Add("EmailAddress", $parameter)
        
        # EmployeeID
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("EmployeeID", [System.String], $attributes)
        $parameters.Add("EmployeeID", $parameter)
        
        # EmployeeNumber
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("EmployeeNumber", [System.String], $attributes)
        $parameters.Add("EmployeeNumber", $parameter)
        
        # Enabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Enabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("Enabled", $parameter)
        
        # Fax
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Fax", [System.String], $attributes)
        $parameters.Add("Fax", $parameter)
        
        # GivenName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("GivenName", [System.String], $attributes)
        $parameters.Add("GivenName", $parameter)
        
        # HomeDirectory
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("HomeDirectory", [System.String], $attributes)
        $parameters.Add("HomeDirectory", $parameter)
        
        # HomeDrive
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("HomeDrive", [System.String], $attributes)
        $parameters.Add("HomeDrive", $parameter)
        
        # HomePage
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("HomePage", [System.String], $attributes)
        $parameters.Add("HomePage", $parameter)
        
        # HomePhone
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("HomePhone", [System.String], $attributes)
        $parameters.Add("HomePhone", $parameter)
        
        # Initials
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Initials", [System.String], $attributes)
        $parameters.Add("Initials", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADUser], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # KerberosEncryptionType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("KerberosEncryptionType", [Microsoft.ActiveDirectory.Management.ADKerberosEncryptionType], $attributes)
        $parameters.Add("KerberosEncryptionType", $parameter)
        
        # LogonWorkstations
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LogonWorkstations", [System.String], $attributes)
        $parameters.Add("LogonWorkstations", $parameter)
        
        # Manager
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Manager", [Microsoft.ActiveDirectory.Management.ADUser], $attributes)
        $parameters.Add("Manager", $parameter)
        
        # MobilePhone
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("MobilePhone", [System.String], $attributes)
        $parameters.Add("MobilePhone", $parameter)
        
        # Name
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Name", [System.String], $attributes)
        $parameters.Add("Name", $parameter)
        
        # Office
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Office", [System.String], $attributes)
        $parameters.Add("Office", $parameter)
        
        # OfficePhone
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OfficePhone", [System.String], $attributes)
        $parameters.Add("OfficePhone", $parameter)
        
        # Organization
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Organization", [System.String], $attributes)
        $parameters.Add("Organization", $parameter)
        
        # OtherAttributes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OtherAttributes", [System.Collections.Hashtable], $attributes)
        $parameters.Add("OtherAttributes", $parameter)
        
        # OtherName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OtherName", [System.String], $attributes)
        $parameters.Add("OtherName", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # PasswordNeverExpires
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PasswordNeverExpires", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("PasswordNeverExpires", $parameter)
        
        # PasswordNotRequired
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PasswordNotRequired", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("PasswordNotRequired", $parameter)
        
        # Path
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Path", [System.String], $attributes)
        $parameters.Add("Path", $parameter)
        
        # POBox
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("POBox", [System.String], $attributes)
        $parameters.Add("POBox", $parameter)
        
        # PostalCode
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PostalCode", [System.String], $attributes)
        $parameters.Add("PostalCode", $parameter)
        
        # PrincipalsAllowedToDelegateToAccount
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PrincipalsAllowedToDelegateToAccount", [Microsoft.ActiveDirectory.Management.ADPrincipal[]], $attributes)
        $parameters.Add("PrincipalsAllowedToDelegateToAccount", $parameter)
        
        # ProfilePath
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProfilePath", [System.String], $attributes)
        $parameters.Add("ProfilePath", $parameter)
        
        # SamAccountName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SamAccountName", [System.String], $attributes)
        $parameters.Add("SamAccountName", $parameter)
        
        # ScriptPath
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ScriptPath", [System.String], $attributes)
        $parameters.Add("ScriptPath", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # ServicePrincipalNames
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateMultivalueArrayAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ServicePrincipalNames", [System.String[]], $attributes)
        $parameters.Add("ServicePrincipalNames", $parameter)
        
        # SmartcardLogonRequired
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SmartcardLogonRequired", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("SmartcardLogonRequired", $parameter)
        
        # State
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("State", [System.String], $attributes)
        $parameters.Add("State", $parameter)
        
        # StreetAddress
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("StreetAddress", [System.String], $attributes)
        $parameters.Add("StreetAddress", $parameter)
        
        # Surname
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Surname", [System.String], $attributes)
        $parameters.Add("Surname", $parameter)
        
        # Title
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Title", [System.String], $attributes)
        $parameters.Add("Title", $parameter)
        
        # TrustedForDelegation
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TrustedForDelegation", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("TrustedForDelegation", $parameter)
        
        # Type
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Type", [System.String], $attributes)
        $parameters.Add("Type", $parameter)
        
        # UserPrincipalName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ValueFromPipelineByPropertyName = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UserPrincipalName", [System.String], $attributes)
        $parameters.Add("UserPrincipalName", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADAuthenticationPolicy {
    <#
    .SYNOPSIS
        Removes an Active Directory Domain Services authentication policy object.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate. A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies a user account that has permission to perform the task. The default is the current user. Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet.
        By default, the cmdlet uses the credentials of the currently logged on user unless the cmdlet is run from an Active Directory Domain Services Windows PowerShell provider drive. If you run the cmdlet in a provider drive, the account associated with the drive is the default.
        If you specify credentials that do not have permission to perform the task, the cmdlet returns an error.
    .PARAMETER Identity
        Specifies an Active Directory Domain Services authentication policy object. Specify the authentication policy object in one of the following formats:
        - A distinguished name
        - GUID
        - Name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to which to connect, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301407')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicy], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADAuthenticationPolicySilo {
    <#
    .SYNOPSIS
        Removes an Active Directory Domain Services authentication policy silo object.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate. A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies a user account that has permission to perform the task. The default is the current user. Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet.
        By default, the cmdlet uses the credentials of the currently logged on user unless the cmdlet is run from an Active Directory Domain Services Windows PowerShell provider drive. If you run the cmdlet in a provider drive, the account associated with the drive is the default.
        If you specify credentials that do not have permission to perform the task, the cmdlet returns an error.
    .PARAMETER Identity
        Specifies an Active Directory Domain Services authentication policy silo object. Specify the authentication policy silo object in one of the following formats:
        - A distinguished name
        - GUID
        - Name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to which to connect, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301412')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicySilo], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADCentralAccessPolicy {
    <#
    .SYNOPSIS
        Removes a central access policy from Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A Security Identifier (objectSid)
        - A SAM Account Name (sAMAccountName)
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=21638')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADCentralAccessPolicy], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADCentralAccessPolicyMember {
    <#
    .SYNOPSIS
        Removes central access rules from a central access policy in Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol  (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Members
        Specifies a set of central access rule (CAR) objects in a comma-separated list to add to a central access policy.
        To identify each object, use one of the following property values:
        - Name
        - A distinguished name
        - GUID (objectGUID)
        Note: The identifier in parentheses is the LDAP display name.
        You can also provide objects to this parameter directly.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216386')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADCentralAccessPolicy], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Members
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Members", [Microsoft.ActiveDirectory.Management.ADCentralAccessRule[]], $attributes)
        $parameters.Add("Members", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADCentralAccessRule {
    <#
    .SYNOPSIS
        Removes a central access rule from Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216387')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADCentralAccessRule], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADClaimTransformPolicy {
    <#
    .SYNOPSIS
        Removes a claim transformation policy object from Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        Derived types, such as the following are also accepted:
        - Microsoft.ActiveDirectory.Management.ADGroup - Microsoft.ActiveDirectory.Management.ADUser - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADServiceAccount - Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy - Microsoft.ActiveDirectory.Management.ADDomain
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216388')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADClaimTransformPolicy], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADClaimType {
    <#
    .SYNOPSIS
        Removes a claim type from Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Force
        Forces the command to run without asking for user confirmation.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216389')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Force
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Force", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("Force", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADClaimType], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADComputer {
    <#
    .SYNOPSIS
        Removes an Active Directory computer.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory computer object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A Security Accounts Manager account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If the identifier given is a distinguished name, the partition to search is computed from that distinguished name. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to a computer object instance.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219332')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADComputer], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADComputerServiceAccount {
    <#
    .SYNOPSIS
        Removes one or more service accounts from a computer.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory computer object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - Security Accounts Manager account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If the identifier given is a distinguished name, the partition to search is computed from that distinguished name. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to a computer object instance.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER ServiceAccount
        Specifies one or more Active Directory service accounts. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219340')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Computer')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADComputer], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # ServiceAccount
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ServiceAccount", [Microsoft.ActiveDirectory.Management.ADServiceAccount[]], $attributes)
        $parameters.Add("ServiceAccount", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADDomainControllerPasswordReplicationPolicy {
    <#
    .SYNOPSIS
        Removes users, computers, and groups from the allowed or denied list of a read-only domain controller password replication policy.
    .PARAMETER AllowedList
        Specifies the users, computers, groups or other accounts to add to the list of accounts allowed to replicate their passwords to this RODC. You can specify more than one value by using a comma-separated list. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID  (objectGUID)
        - A security identifier (objectSid)
        - A Security Accounts Manager (SAM) account name  (sAMAccountName)
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
        Specifies the credentials for the security context under which the task is performed. If this security context doesn't have directory level permissions to perform the task, then an error is returned by the directory. If running under the context of an Active Directory module for Windows PowerShell provider drive, the credentials information associated with the drive is used as the default value; otherwise, the currently logged on user security context is used.
    .PARAMETER DeniedList
        Specifies the users, computers, groups or other accounts to add to the list of accounts that are denied the right to replicate their passwords to this RODC. You can specify more than one value by using a comma-separated list. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID  (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
    .PARAMETER Identity
        Specifies an Active Directory domain controller object by providing one of the following values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A GUID (objectGUID)
        - An IPV4Address
        - A Global IPV6Address
        - A DNS Host Name (dNSHostName)
        - A  name of the server object
        - A distinguished name of the NTDS Settings object
        - A distinguished name of the server object that represents the domain controller
        - A GUID of NTDS settings object under the configuration partition
        - A GUID of server object under the configuration partition
        - A distinguished name of the computer object that represents the domain controller
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216390')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AllowedList
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateCountAttribute(1, 2147483647)
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowedPRP"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AllowedList", [Microsoft.ActiveDirectory.Management.ADPrincipal[]], $attributes)
        $parameters.Add("AllowedList", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # DeniedList
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DeniedPRP"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateCountAttribute(1, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DeniedList", [Microsoft.ActiveDirectory.Management.ADPrincipal[]], $attributes)
        $parameters.Add("DeniedList", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADDomainController], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADFineGrainedPasswordPolicy {
    <#
    .SYNOPSIS
        Removes an Active Directory fine-grained password policy.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory fine-grained password policy object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name (distinguishedName)
        - A GUID (objectGUID)
        - A Name (name)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline operator or you can set this parameter to a fine-grained password policy object instance.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219334')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADFineGrainedPasswordPolicySubject {
    <#
    .SYNOPSIS
        Removes one or more users from a fine-grained password policy.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory fine-grained password policy object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A name (name)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to a fine-grained password policy object instance.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object (nTDSDSA) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter does not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER Subjects
        Specifies one or more users or groups. To specify more than one user or group, use a comma-separated list. You can identify a user or group by one of the following property values:
        - Distinguished Name (DN)
        - GUID (objectGUID)
        - Security Identifier (objectSid)
        - SAM Account Name (sAMAccountName)
        Note: The identifier in parentheses is the LDAP display name for the attribute.
        You can also provide objects to this parameter directly.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216391')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # Subjects
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Subjects", [Microsoft.ActiveDirectory.Management.ADPrincipal[]], $attributes)
        $parameters.Add("Subjects", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADGroup {
    <#
    .SYNOPSIS
        Removes an Active Directory group.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A Security Account Manager account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In AD DS environments, a default value for Partition will be set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.
        In AD LDS environments, a default value for Partition will be set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219333')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADGroup], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADGroupMember {
    <#
    .SYNOPSIS
        Removes one or more members from an Active Directory group.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A Security Account Manager account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Members
        Specifies an array of user, group, and computer objects in a comma-separated list to remove from a group. To identify each object, use one of the following property values. Note: The identifier in parentheses is the LDAP display name. The acceptable values for this parameter are:
        - Distinguished name
        - GUID (objectGUID)
        - Security identifier (objectSid)
        - SAM account name (sAMAccountName)
        You can also provide objects to this parameter directly.
        The following examples show how to specify this parameter.
        This example specifies a user and group to remove by specifying the distinguished name and the SAM account name properties.
        `-Members "CN=SaraDavis,CN=employees,CN=Users,DC=contoso,DC=com", "saradavisreports"`
        This example specifies a user and a group object that are defined in the current Windows PowerShell session as input for the parameter.
        `-Members $userObject, $GroupObject`
        The objects specified for this parameter are processed as Microsoft.ActiveDirectory.Management.ADPrincipal objects. Derived types, such as the following, are also received by this parameter.
        - Microsoft.ActiveDirectory.Management.ADUser - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADServiceAccount - Microsoft.ActiveDirectory.Management.ADGroup You cannot pass objects through the pipeline to this parameter.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive. - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive. - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance. - If none of the previous cases apply, the Partition parameter does not take a default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER DisablePermissiveModify
        Group membership updates use permissive modify by default. This suppresses an error when removing a member that is not member of the group. When this parameter is used, an error "The specified account name is not a member of the group" is returned.
        This parameter is available in Windows Server 2019 with the September 2020 Updates.
        Group membership updates use permissive modify by default. This suppresses an error when removing a member that is not member of the group. When this parameter is used, an error "The specified account name is not a member of the group" is returned.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219336')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADGroup], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Members
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Members", [Microsoft.ActiveDirectory.Management.ADPrincipal[]], $attributes)
        $parameters.Add("Members", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # DisablePermissiveModify
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisablePermissiveModify", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("DisablePermissiveModify", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADObject {
    <#
    .SYNOPSIS
        Removes an Active Directory object.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, the Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        Derived types, such as the following, are also accepted:
        - Microsoft.ActiveDirectory.Management.ADGroup - Microsoft.ActiveDirectory.Management.ADUser - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADServiceAccount - Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy - Microsoft.ActiveDirectory.Management.ADDomain
    .PARAMETER IncludeDeletedObjects
        Specifies that the cmdlet retrieves deleted objects and the deactivated forward and backward links. When this parameter is specified, the cmdlet uses the following LDAP controls:
        - Show Deleted Objects (1.2.840.113556.1.4.417)
        - Show Deactivated Links (1.2.840.113556.1.4.2065)
        Note: If this parameter is not specified, the cmdlet does not return or operate on deleted objects.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In AD LDS environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter does not take a default value.
    .PARAMETER Recursive
        Indicates that this cmdlet removes the object and any children it contains.
        Note: Specifying this parameter removes all child objects even if there are objects marked with ProtectedFromAccidentalDeletion .
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219330')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADObject], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # IncludeDeletedObjects
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("IncludeDeletedObjects", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("IncludeDeletedObjects", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # Recursive
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Recursive", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("Recursive", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADOrganizationalUnit {
    <#
    .SYNOPSIS
        Removes an Active Directory organizational unit.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        -A distinguished name -A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Identity parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter does not take any default value.
    .PARAMETER Recursive
        Indicates that this cmdlet removes the OU and any child items it contains. You must specify this parameter to remove an OU that is not empty.
        Note: Specifying this parameter removes all child objects of an OU that are marked with ProtectedFromAccidentalDeletion .
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219335')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADOrganizationalUnit], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # Recursive
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Recursive", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("Recursive", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADPrincipalGroupMembership {
    <#
    .SYNOPSIS
        Removes a member from one or more Active Directory groups.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory principal object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        Derived types, such as the following are also accepted:
        - Microsoft.ActiveDirectory.Management.ADGroup - Microsoft.ActiveDirectory.Management.ADUser - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADServiceAccount
    .PARAMETER MemberOf
        Specifies the Active Directory groups to add a user, computer, or group to as a member. You can identify a group by providing one of the following values.  Note: The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        If you are specifying more than one group, use commas to separate the groups in the list.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value will be used for the Partition parameter if no value is specified.  The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter does not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219337')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADPrincipal], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # MemberOf
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("MemberOf", [Microsoft.ActiveDirectory.Management.ADGroup[]], $attributes)
        $parameters.Add("MemberOf", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADReplicationSite {
    <#
    .SYNOPSIS
        Deletes the specified replication site object from Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A connection name
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216393')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADReplicationSite], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADReplicationSiteLink {
    <#
    .SYNOPSIS
        Deletes an Active Directory site link used to manage replication.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216394')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADReplicationSiteLink], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADReplicationSiteLinkBridge {
    <#
    .SYNOPSIS
        Deletes a replication site link bridge from Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Server
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216395')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADReplicationSiteLinkBridge], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADReplicationSubnet {
    <#
    .SYNOPSIS
        Deletes the specified Active Directory replication subnet object from the directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216396')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADReplicationSubnet], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADResourceProperty {
    <#
    .SYNOPSIS
        Removes a resource property from Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the resource property. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216397')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADResourceProperty], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADResourcePropertyList {
    <#
    .SYNOPSIS
        Removes one or more resource property lists from Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the resource property.The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216398')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADResourcePropertyList], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADResourcePropertyListMember {
    <#
    .SYNOPSIS
        Removes one or more resource properties from a resource property list in Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Members
        Specifies an array of ADResourceProperty objects in a comma-separated list to add to a resource property list. To identify each object, use one of the following property values:
        - Name
        - Distinguished name
        - GUID (objectGUID)
        Note: The identifier in parentheses is the LDAP display name.
        You can also provide objects to this parameter directly.
        You cannot pass objects through the pipeline to this parameter.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216399')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADResourcePropertyList], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Members
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Members", [Microsoft.ActiveDirectory.Management.ADResourceProperty[]], $attributes)
        $parameters.Add("Members", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADServiceAccount {
    <#
    .SYNOPSIS
        Removes an Active Directory managed service account or group managed service account object.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value will be used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.
        In AD DS environments, a default value for Partition will be set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.
        In AD LDS environments, a default value for Partition will be set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive. - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance. - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
        Domain name values:
        - Fully qualified domain name (FQDN)
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
        - By using Server value from objects passed through the pipeline.  - By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
        - By using the domain of the computer running PowerShell.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219339')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADServiceAccount], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Remove-ADUser {
    <#
    .SYNOPSIS
        Removes an Active Directory user.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory user object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A Distinguished name
        - A GUID (objectGUID)
        - A Security Identifier (objectSid)
        - A SAM account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value will be used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.
        In AD DS environments, a default value for Partition will be set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive. - If none of the previous cases apply, the default value of Partition will be set to the default partition or naming context of the target domain.
        In AD LDS environments, a default value for Partition will be set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive. - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance. - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219331')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADUser], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Rename-ADObject {
    <#
    .SYNOPSIS
        Changes the name of an Active Directory object.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, the Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        Derived types, such as the following, are also accepted:
        - Microsoft.ActiveDirectory.Management.ADGroup - Microsoft.ActiveDirectory.Management.ADUser - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADServiceAccount - Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy - Microsoft.ActiveDirectory.Management.ADDomain
    .PARAMETER NewName
        Specifies the new name of the object. This parameter sets the Name property of the Active Directory object. The LDAP display name ( ldapDisplayName ) of this property is name.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and when a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter does not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219341')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADObject], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # NewName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("NewName", [System.String], $attributes)
        $parameters.Add("NewName", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Reset-ADServiceAccountPassword {
    <#
    .SYNOPSIS
        Resets the password for a standalone managed service account.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Identity
        Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter does not take any default value.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216403')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADServiceAccount], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Restore-ADObject {
    <#
    .SYNOPSIS
        Restores an Active Directory object.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A Security Account Manager account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER NewName
        Specifies the new name of the object. This parameter sets the Name property of the Active Directory object. The LDAP display name ( ldapDisplayName ) of this property is name.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter does not take a default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER TargetPath
        Specifies the new location for the object. This location must be the path to a container or organizational unit.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219342')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADObject], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # NewName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("NewName", [System.String], $attributes)
        $parameters.Add("NewName", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # TargetPath
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TargetPath", [System.String], $attributes)
        $parameters.Add("TargetPath", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Revoke-ADAuthenticationPolicySiloAccess {
    <#
    .SYNOPSIS
        Revokes membership in an authentication policy silo for the specified account.
    .PARAMETER Account
        Specifies the account to remove from the authentication policy silo. Specify the account in one of the following formats:
        - A distinguished name
        - GUID
        - security identifier
        - SAM account name
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        You can also use this parameter to specify a variable that contains user, computer, and service account objects.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate. A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies a user account that has permission to perform the task. The default is the current user. Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet.
        By default, the cmdlet uses the credentials of the currently logged on user unless the cmdlet is run from an Active Directory Domain Services Windows PowerShell provider drive. If you run the cmdlet in a provider drive, the account associated with the drive is the default.
        If you specify credentials that do not have permission to perform the task, the cmdlet returns an error.
    .PARAMETER Identity
        Specifies an ADAuthenticationPolicySilo object. Specify the authentication policy silo object in one of the following formats:
        - A distinguished name
        - A GUID
        - A name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to which to connect, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301415')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Account
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Account", [Microsoft.ActiveDirectory.Management.ADAccount], $attributes)
        $parameters.Add("Account", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicySilo], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Search-ADAccount {
    <#
    .SYNOPSIS
        Gets Active Directory user, computer, or service accounts.
    .PARAMETER AccountDisabled
        Specifies a search for accounts that are disabled. An account is disabled when the ADAccount Enabled property is set to false.
    .PARAMETER AccountExpired
        Specifies a search for accounts that are expired. An account is expired when the ADAccount AccountExpirationDate property is set to a time in the past. The Lightweight Directory Access Protocol (LDAP) display name ( ldapDisplayName ) for the AccountExpirationDate property is accountExpires.
    .PARAMETER AccountExpiring
        Indicates that this cmdlet searches for accounts that are expiring in a given time period or by a specified time. To specify a time period, use the AccountExpiring parameter with the TimeSpan parameter. To specify a specific time, use the AccountExpiring parameter with the DateTime parameter.
    .PARAMETER AccountInactive
        Indicates that this cmdlet searches for accounts that have not logged in within a given time period or since a specified time. To specify a time period, use the TimeSpan parameter. To specify a specific time, use the DateTime parameter. Note that this attribute is only used when the domain is in Windows Server 2003 Domain Functional Level or higher, so this parameter will only work in that mode.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER ComputersOnly
        Indicates that this cmdlet searches only computer accounts.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
        Specifies the credentials for the security context under which the task is performed. If this security context doesn't have directory level permissions to perform the task, then an error is returned by the directory. If running under the context of an Active Directory module for Windows PowerShell provider drive, the credentials information associated with the drive is used as the default value; otherwise, the currently logged on user security context is used.
    .PARAMETER DateTime
        Specifies a distinct time value for Search-ADAccount parameters such as AccountExpiring , AccountInactive , and PasswordExpired .
        Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to be midnight local time. If you do not specify a date, the date is assumed to be the current date. The following examples show commonly-used syntax to specify a DateTime object.
        - "4/17/2006"
        - "Monday, April 17, 2006"
        - "2:22:45 PM"
        - "Monday, April 17, 2006 2:22:45 PM"
        These examples specify the same date and the time without the seconds.
        - "4/17/2006 2:22 PM"
        - "Monday, April 17, 2006 2:22 PM"
        - "2:22 PM"
        The following example shows how to specify a date and time by using the RFC1123 standard. This example defines time by using Greenwich Mean Time (GMT).
        - "Mon, 17 Apr 2006 21:22:48 GMT"
        The following example shows how to specify a value as Coordinated Universal Time (UTC). This example represents Monday, April 17, 2006 at 2:22:48 PM UTC.
        - "2006-04-17T14:22:48.0000000"
        The following example shows how to set the AccountExpiring parameter to a DateTime value of June 18, 2012 at 2:00:00 AM.
        `-AccountExpiring -DateTime "6/18/2012 2:00:00 AM"`
    .PARAMETER LockedOut
        Indicates that this cmdlet searches for accounts that are locked out.
    .PARAMETER PasswordExpired
        Indicates that this cmdlet searches for accounts that have an expired password.
    .PARAMETER PasswordNeverExpires
        Indicates that this cmdlet searches for accounts that have a password that does not expire.
    .PARAMETER ResultPageSize
        Specifies the number of objects to include in one page for an Active Directory Domain Services query.
        The default is 256 objects per page.
    .PARAMETER ResultSetSize
        Specifies the maximum number of objects to return for an Active Directory Domain Services query. If you want to receive all of the objects, set this parameter to $Null (null value). You can use Ctrl+C to stop the query and return of objects. The default is $Null.
        The following example shows how to set this parameter so that you receive all of the returned objects:
        `-ResultSetSize $Null`
    .PARAMETER SearchBase
        Specifies an Active Directory path to search.
        When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive.
        When you run a cmdlet outside of an Active Directory provider drive against an Active Directory Domain Services (AD DS) target, the default value of this parameter is the default naming context of the target domain.
        When you run a cmdlet outside of an Active Directory provider drive against an Active Directory Lightweight Directory Services (AD LDS) target, the default value is the default naming context of the target AD LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory service agent object nTDSDSA for the AD LDS instance.  If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value.
        The following example shows how to set this parameter to search under an organizational unit.
        `-SearchBase "ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com"`
        When the value of the SearchBase parameter is set to an empty string and you are connected to a global catalog port, all partitions are searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a global catalog port, an error is generated.
    .PARAMETER SearchScope
        Specifies the scope of an Active Directory search. The acceptable values for this parameter are:
        - Base or 0
        - OneLevel or 1
        - Subtree or 2
        A Base query searches only the current path or object. A OneLevel query searches the immediate children of that path or object. A Subtree query searches the current path or object and all children of that path or object.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER TimeSpan
        Specifies a time interval. This parameter is used to specify a time value for Search-ADAccount parameters such as AccountExpiring . Specify the time interval in the following format:
        [-]D.H:M:S.F
        where:
        - D = Days (0 to 10675199)
        - H = Hours (0 to 23)
        - M = Minutes (0 to 59)
        - S = Seconds (0 to 59)
        - F = Fractions of a second (0 to 9999999)
        Note: Time values must be between the following values: -10675199:02:48:05.4775808 and 10675199:02:48:05.4775807.
        The following examples show how to set this parameter.
        Set the time to 2 days
        `-TimeSpan "2.00:00:00"`
        Set the time span to the previous 2 days
        `-TimeSpan "-2.00:00.00"`
        Set the time to 4 hours
        `-TimeSpan "4:00"`
        For example, to search for all accounts that are expiring in 10 days, specify the AccountExpiring and TimeSpan parameters as follows.
        `-AccountExpiring -TimeSpan "10.00:00.00"`
    .PARAMETER UsersOnly
        Indicates that this cmdlet searches for user accounts only.
    #>
    
    [CmdletBinding(HelpUri='http://go.microsoft.com/fwlink/?LinkId=219343')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AccountDisabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AccountDisabled"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountDisabled", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("AccountDisabled", $parameter)
        
        # AccountExpired
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AccountExpired"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountExpired", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("AccountExpired", $parameter)
        
        # AccountExpiring
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AccountExpiring"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountExpiring", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("AccountExpiring", $parameter)
        
        # AccountInactive
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AccountInactive"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountInactive", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("AccountInactive", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # ComputersOnly
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ComputersOnly", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("ComputersOnly", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # DateTime
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AccountExpiring"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AccountInactive"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DateTime", [System.DateTime], $attributes)
        $parameters.Add("DateTime", $parameter)
        
        # LockedOut
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "LockedOut"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LockedOut", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("LockedOut", $parameter)
        
        # PasswordExpired
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "PasswordExpired"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PasswordExpired", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PasswordExpired", $parameter)
        
        # PasswordNeverExpires
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "PasswordNeverExpires"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PasswordNeverExpires", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PasswordNeverExpires", $parameter)
        
        # ResultPageSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateRangeAttribute(0, 2147483647)
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultPageSize", [System.Int32], $attributes)
        $parameters.Add("ResultPageSize", $parameter)
        
        # ResultSetSize
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNullableRangeAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResultSetSize", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ResultSetSize", $parameter)
        
        # SearchBase
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SearchBase", [System.String], $attributes)
        $parameters.Add("SearchBase", $parameter)
        
        # SearchScope
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SearchScope", [Microsoft.ActiveDirectory.Management.ADSearchScope], $attributes)
        $parameters.Add("SearchScope", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # TimeSpan
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AccountExpiring"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AccountInactive"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TimeSpan", [System.TimeSpan], $attributes)
        $parameters.Add("TimeSpan", $parameter)
        
        # UsersOnly
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UsersOnly", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("UsersOnly", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADAccountAuthenticationPolicySilo {
    <#
    .SYNOPSIS
        Modifies the authentication policy or authentication policy silo of an account.
    .PARAMETER AuthenticationPolicy
        Specifies an Active Directory Domain Services authentication policy object. Specify the authentication policy object in one of the following formats:
        - A distinguished name
        - GUID
        - Name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER AuthenticationPolicySilo
        Specifies an Active Directory Domain Services authentication policy silo object. Specify the authentication policy silo object in one of the following formats:
        - A distinguished name
        - GUID
        - Name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate. A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies a user account that has permission to perform the task. The default is the current user. Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet.
        By default, the cmdlet uses the credentials of the currently logged on user unless the cmdlet is run from an Active Directory Domain Services Windows PowerShell provider drive. If you run the cmdlet in a provider drive, the account associated with the drive is the default.
        If you specify credentials that do not have permission to perform the task, the cmdlet returns an error.
    .PARAMETER Identity
        Specifies an Active Directory Domain Services object. Specify the Active Directory Domain Services object in one of the following formats:
        - distinguished name
        - GUID
        - Name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to which to connect, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301417')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthenticationPolicy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthenticationPolicy", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicy], $attributes)
        $parameters.Add("AuthenticationPolicy", $parameter)
        
        # AuthenticationPolicySilo
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthenticationPolicySilo", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicySilo], $attributes)
        $parameters.Add("AuthenticationPolicySilo", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADAccount], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADAccountControl {
    <#
    .SYNOPSIS
        Modifies user account control (UAC) values for an Active Directory account.
    .PARAMETER AccountNotDelegated
        Indicates whether the security context of the user is delegated to a service. When this parameter is set to true, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory UAC attribute.
    .PARAMETER AllowReversiblePasswordEncryption
        Indicates whether reversible password encryption is allowed for the account. This parameter sets the AllowReversiblePasswordEncryption property of the account. This parameter also sets the ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED flag of the Active Directory UAC attribute.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER CannotChangePassword
        Indicates whether an account can change its password. To disallow password change by the account set this to $True. This parameter changes the Boolean value of the CannotChangePassword property of an account.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER DoesNotRequirePreAuth
        Indicates whether Kerberos pre-authentication is required to logon using the user or computer account. This parameter sets the ADS_UF_DONT_REQUIRE_PREAUTH flag of the Active Directory UAC attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Enabled
        Specifies whether an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory UAC attribute.The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER HomedirRequired
        Indicates whether a home directory is required for the account. This parameter sets the ADS_UF_HOMEDIR_REQUIRED flag of the Active Directory UAC attribute.The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Identity
        Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A Security Identifier (objectSid)
        - A SAM Account Name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an account object instance.
        Derived types such as the following are also accepted:
        - Microsoft.ActiveDirectory.Management.ADServiceAccount - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADUser
    .PARAMETER MNSLogonAccount
        Indicates whether the account is a Majority Node Set (MNS) logon account. This parameter also sets the ADS_UF_MNS_LOGON_ACCOUNT flag of the Active Directory UAC attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
        You can use MNS logon accounts to configure a multi-node cluster without using a shared disk drive.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In AD LDS environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER PasswordNeverExpires
        Indicates whether the password of an account can expire. This parameter sets the PasswordNeverExpires property of an account object. This parameter also sets the ADS_UF_DONT_EXPIRE_PASSWD flag of the Active Directory UAC attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
        Note: This parameter cannot be set to $True for an account that also has the ChangePasswordAtLogon property set to $True.
    .PARAMETER PasswordNotRequired
        Indicates whether the account requires a password. This parameter sets the PasswordNotRequired property of an account, such as a user or computer account. This parameter also sets the ADS_UF_PASSWD_NOTREQD flag of the Active Directory UAC attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER TrustedForDelegation
        Indicates whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory UAC attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER TrustedToAuthForDelegation
        Indicates whether an account is enabled for delegation. When this parameter is set to true, a service running under such an account can impersonate a client on other remote servers on the network. This parameter sets the ADS_UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION flag of the Active Directory UAC attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER UseDESKeyOnly
        Indicates whether an account is restricted to use only Data Encryption Standard encryption types for keys. This parameter sets the ADS_UF_USE_DES_KEY_ONLY flag of the Active Directory UAC attribute.  The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219352')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AccountNotDelegated
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountNotDelegated", [System.Boolean], $attributes)
        $parameters.Add("AccountNotDelegated", $parameter)
        
        # AllowReversiblePasswordEncryption
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AllowReversiblePasswordEncryption", [System.Boolean], $attributes)
        $parameters.Add("AllowReversiblePasswordEncryption", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # CannotChangePassword
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("CannotChangePassword", [System.Boolean], $attributes)
        $parameters.Add("CannotChangePassword", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # DoesNotRequirePreAuth
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DoesNotRequirePreAuth", [System.Boolean], $attributes)
        $parameters.Add("DoesNotRequirePreAuth", $parameter)
        
        # Enabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Enabled", [System.Boolean], $attributes)
        $parameters.Add("Enabled", $parameter)
        
        # HomedirRequired
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("HomedirRequired", [System.Boolean], $attributes)
        $parameters.Add("HomedirRequired", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADAccount], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # MNSLogonAccount
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("MNSLogonAccount", [System.Boolean], $attributes)
        $parameters.Add("MNSLogonAccount", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # PasswordNeverExpires
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PasswordNeverExpires", [System.Boolean], $attributes)
        $parameters.Add("PasswordNeverExpires", $parameter)
        
        # PasswordNotRequired
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PasswordNotRequired", [System.Boolean], $attributes)
        $parameters.Add("PasswordNotRequired", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # TrustedForDelegation
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TrustedForDelegation", [System.Boolean], $attributes)
        $parameters.Add("TrustedForDelegation", $parameter)
        
        # TrustedToAuthForDelegation
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TrustedToAuthForDelegation", [System.Boolean], $attributes)
        $parameters.Add("TrustedToAuthForDelegation", $parameter)
        
        # UseDESKeyOnly
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UseDESKeyOnly", [System.Boolean], $attributes)
        $parameters.Add("UseDESKeyOnly", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADAccountExpiration {
    <#
    .SYNOPSIS
        Sets the expiration date for an Active Directory account.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER DateTime
        Specifies the expiration time for the account by using a DateTime value. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date.
    .PARAMETER Identity
        Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an account object instance.
        Derived types such as the following are also accepted:
        - Microsoft.ActiveDirectory.Management.ADUser - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADServiceAccount
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In AD LDS environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER TimeSpan
        Specifies a time interval that begins at the current time. The account expires at the end of the time interval.
        Specify the time interval in the following format:
        [-]D.H:M:S.F
        where:
        - D = Days (0 to 10675199)
        - H = Hours (0 to 23)
        - M = Minutes (0 to 59)
        - S = Seconds (0 to 59)
        - F = Fractions of a second (0 to 9999999)
        Note: Time values must be between the following values:
        -10675199:02:48:05.4775808 and 10675199:02:48:05.4775807.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219354')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # DateTime
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 2
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DateTime", [System.Nullable`1[System.DateTime]], $attributes)
        $parameters.Add("DateTime", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADAccount], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # TimeSpan
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TimeSpan", [System.TimeSpan], $attributes)
        $parameters.Add("TimeSpan", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADAccountPassword {
    <#
    .SYNOPSIS
        Modifies the password of an Active Directory account.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory user object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER NewPassword
        Specifies a new password value. This value is stored as an encrypted string.
    .PARAMETER OldPassword
        Specifies the most recent password value. This value is processed as an encrypted string.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In AD LDS environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of  is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Reset
        Specifies to reset the password on an account. When you use this parameter, you must set the NewPassword parameter. You do not need to specify the OldPassword parameter.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Domain name values:
        - Fully qualified domain name (FQDN)
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
        - By using Server value from objects passed through the pipeline. - By using the server information associated with the Active Directory provider drive, when running under that drive.
        - By using the domain of the computer running Windows PowerShell.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219353')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADAccount], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # NewPassword
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("NewPassword", [System.Security.SecureString], $attributes)
        $parameters.Add("NewPassword", $parameter)
        
        # OldPassword
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OldPassword", [System.Security.SecureString], $attributes)
        $parameters.Add("OldPassword", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Reset
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Reset", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("Reset", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADAuthenticationPolicy {
    <#
    .SYNOPSIS
        Modifies an Active Directory Domain Services authentication policy object.
    .PARAMETER Add
        Specifies a list of values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a parameter. To identify an attribute, specify the Lightweight Directory Access Protocol (LDAP) display name defined for it in the Active Directory Domain Services schema.
        Specify the attribute and the value of the attribute in the following format: @{'AttributeLDAPDisplayName'=value}.
        To specify multiple values for an attribute, specify a comma separated list the values for the display name. You can specify values for more than one attribute by using semicolons to separate attribute value pairs.
        When specifying the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate. A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Clear
        Specifies an array of object properties that are cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a parameter. To modify an object property, you must specify the LDAP display name. You can modify more than one property by specifying a comma-separated list.
        When specifying the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER ComputerAllowedToAuthenticateTo
        Specifies the security descriptor definition language (SDDL) string of the security descriptor used to determine if the computer can authenticate to this account.
    .PARAMETER ComputerTGTLifetimeMins
        Specifies the lifetime in minutes for non-renewable ticket granting tickets (TGTs) for computer accounts.
    .PARAMETER Credential
        Specifies a user account that has permission to perform the task. The default is the current user. Type a user name, such as "User01" or "Domain01\User01", or enter a PSCredential object, such as one generated by the Get-Credential cmdlet.
        By default, the cmdlet uses the credentials of the currently logged on user unless the cmdlet is run from an Active Directory Domain Services Windows PowerShell provider drive. If you run the cmdlet in a provider drive, the account associated with the drive is the default.
        If you specify credentials that do not have permission to perform the task, the cmdlet returns an error.
    .PARAMETER Description
        Specifies a description for the object. This parameter sets the value of the description property for the object. The LDAP display name ( ldapDisplayName ) for this property is "description".
    .PARAMETER Enforce
        Indicates whether the authentication policy is enforced. Specify $True to set the authentication policy to enforced. Specify $False to set the authentication policy to not enforced.
    .PARAMETER Identity
        Specifies an Active Directory Domain Services authentication policy object. Specify the authentication policy object in one of the following formats:
        - Distinguished Name
        - GUID
        - Name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER Instance
        Specifies a modified copy of an ADAuthenticationPolicy object to use to update the actual ADAuthenticationPolicy object. When you specify this parameter, any modifications made to the modified copy of the object are also made to the corresponding ADAuthenticationPolicy object. The cmdlet only updates the object properties that have changed. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.
        To get the ADAuthenticationPolicy object to use to update the ADAuthenticationPolicy on which the cmdlet runs, use the Get-ADAuthenticationPolicy cmdlet.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ProtectedFromAccidentalDeletion
        Indicates whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Remove
        Specifies that the cmdlet remove the values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must specify the LDAP display name.
        Specify the attribute and the value of the attribute in the following format: @{'AttributeLDAPDisplayName'=value}.
        To specify multiple values for an attribute, specify a comma separated list the values for the display name. You can specify values for more than one attribute by using semicolons to separate attribute value pairs.
        When specifying the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies a list of values for an object property that replaces the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must specify the LDAP display name.
        Specify the attribute and the value of the attribute in the following format: @{'AttributeLDAPDisplayName'=value}.
        To specify multiple values for an attribute, specify a comma separated list the values for the display name. You can specify values for more than one attribute by using semicolons to separate attribute value pairs.
        When specifying the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER RollingNTLMSecret
        Beginning with Windows 10, version 1703, this feature is deprecated and should not be configured in Active Directory.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to which to connect, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values: - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER ServiceAllowedToAuthenticateFrom
        Specifies an access control expression used to determine from which devices the service can authenticate.
    .PARAMETER ServiceAllowedToAuthenticateTo
        Specifies the SDDL string of the security descriptor used to determine if the service can authenticate to this account.
    .PARAMETER ServiceAllowedNTLMNetworkAuthentication
        Specifies that the policy allows NTLM network authentication if the service account has an access control expression specified by the ServiceAllowedToAuthenticateFrom parameter.
    .PARAMETER ServiceTGTLifetimeMins
        Specifies the lifetime in minutes for non-renewable TGTs for service accounts.
    .PARAMETER UserAllowedToAuthenticateFrom
        Specifies an access control expression used to determine from which devices the users can authenticate.
    .PARAMETER UserAllowedToAuthenticateTo
        Specifies the SDDL string of the security descriptor used to determine if the users can authenticate to this account.
    .PARAMETER UserAllowedNTLMNetworkAuthentication
        Indicates that the policy allows NTLM network authentication if the user account has an access control expression specified by the UserAllowedToAuthenticateFrom parameter.
    .PARAMETER UserTGTLifetimeMins
        Specifies the lifetime in minutes for non-renewable TGTs for user accounts.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301409')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # ComputerAllowedToAuthenticateTo
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ComputerAllowedToAuthenticateTo", [System.String], $attributes)
        $parameters.Add("ComputerAllowedToAuthenticateTo", $parameter)
        
        # ComputerTGTLifetimeMins
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNullableRangeAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ComputerTGTLifetimeMins", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ComputerTGTLifetimeMins", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Enforce
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Enforce", [System.Boolean], $attributes)
        $parameters.Add("Enforce", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicy], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicy], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # RollingNTLMSecret
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("RollingNTLMSecret", [Microsoft.ActiveDirectory.Management.ADStrongNTLMPolicyType], $attributes)
        $parameters.Add("RollingNTLMSecret", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # ServiceAllowedToAuthenticateFrom
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ServiceAllowedToAuthenticateFrom", [System.String], $attributes)
        $parameters.Add("ServiceAllowedToAuthenticateFrom", $parameter)
        
        # ServiceAllowedToAuthenticateTo
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ServiceAllowedToAuthenticateTo", [System.String], $attributes)
        $parameters.Add("ServiceAllowedToAuthenticateTo", $parameter)
        
        # ServiceAllowedNTLMNetworkAuthentication
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ServiceAllowedNTLMNetworkAuthentication", [System.Boolean], $attributes)
        $parameters.Add("ServiceAllowedNTLMNetworkAuthentication", $parameter)
        
        # ServiceTGTLifetimeMins
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNullableRangeAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ServiceTGTLifetimeMins", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("ServiceTGTLifetimeMins", $parameter)
        
        # UserAllowedToAuthenticateFrom
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UserAllowedToAuthenticateFrom", [System.String], $attributes)
        $parameters.Add("UserAllowedToAuthenticateFrom", $parameter)
        
        # UserAllowedToAuthenticateTo
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UserAllowedToAuthenticateTo", [System.String], $attributes)
        $parameters.Add("UserAllowedToAuthenticateTo", $parameter)
        
        # UserAllowedNTLMNetworkAuthentication
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UserAllowedNTLMNetworkAuthentication", [System.Boolean], $attributes)
        $parameters.Add("UserAllowedNTLMNetworkAuthentication", $parameter)
        
        # UserTGTLifetimeMins
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNullableRangeAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UserTGTLifetimeMins", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("UserTGTLifetimeMins", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADAuthenticationPolicySilo {
    <#
    .SYNOPSIS
        Modifies an Active Directory Domain Services authentication policy silo object.
    .PARAMETER Add
        Specifies a list of values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a parameter. To identify an attribute, specify the Lightweight Directory Access Protocol (LDAP) display name defined for it in the Active Directory Domain Services schema.
        Specify the attribute and the value of the attribute in the following format: @{'AttributeLDAPDisplayName'=value}.
        To specify multiple values for an attribute, specify a comma separated list the values for the display name. You can specify values for more than one attribute by using semicolons to separate attribute value pairs.
        When specifying the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate. A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Clear
        Specifies an array of object properties that are cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a parameter. To modify an object property, you must specify the LDAP display name. You can modify more than one property by specifying a comma-separated list.
        When specifying the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER ComputerAuthenticationPolicy
        Specifies the authentication policy that applies to computer accounts.
    .PARAMETER Credential
        Specifies a user account that has permission to perform the task. The default is the current user. Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet.
        By default, the cmdlet uses the credentials of the currently logged on user unless the cmdlet is run from an Active Directory Domain Services Windows PowerShell provider drive. If you run the cmdlet in a provider drive, the account associated with the drive is the default.
        If you specify credentials that do not have permission to perform the task, the cmdlet returns an error.
    .PARAMETER Description
        Specifies a description for the object. This parameter sets the value of the description property for the object. The LDAP display name ( ldapDisplayName ) for this property is description.
    .PARAMETER Enforce
        Indicates whether the authentication policy is enforced. Specify $True to set the authentication policy to enforced. Specify $False to set the authentication policy to not enforced.
    .PARAMETER Identity
        Specifies an Active Directory Domain Services authentication policy silo object. Specify the authentication policy silo object in one of the following formats:
        - A distinguished name
        - GUID
        - Name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER Instance
        Specifies a modified copy of an ADAuthenticationPolicySilo object to use to update the actual ADAuthenticationPolicySilo object. When you specify this parameter, any modifications made to the modified copy of the object are also made to the corresponding ADAuthenticationPolicySilo object. The cmdlet only updates the object properties that have changed. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.
        To get the ADAuthenticationPolicySilo object to use to update the ADAuthenticationPolicySilo on which the cmdlet runs, use the Get-ADAuthenticationPolicySilo cmdlet.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ProtectedFromAccidentalDeletion
        Indicates whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Remove
        Specifies that the cmdlet remove the values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must specify the LDAP display name.
        Specify the attribute and the value of the attribute in the following format: @{'AttributeLDAPDisplayName'=value}.
        To specify multiple values for an attribute, specify a comma separated list the values for the display name. You can specify values for more than one attribute by using semicolons to separate attribute value pairs.
        When specifying the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies a list of values for an object property that replaces the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must specify the LDAP display name.
        Specify the attribute and the value of the attribute in the following format: @{'AttributeLDAPDisplayName'=value}.
        To specify multiple values for an attribute, specify a comma separated list the values for the display name. You can specify values for more than one attribute by using semicolons to separate attribute value pairs.
        When specifying the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to which to connect, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER ServiceAuthenticationPolicy
        Specifies the authentication policy that applies to managed service accounts.
    .PARAMETER UserAuthenticationPolicy
        Specifies the authentication policy that applies to user accounts.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301413')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # ComputerAuthenticationPolicy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ComputerAuthenticationPolicy", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicy], $attributes)
        $parameters.Add("ComputerAuthenticationPolicy", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Enforce
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Enforce", [System.Boolean], $attributes)
        $parameters.Add("Enforce", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicySilo], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicySilo], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # ServiceAuthenticationPolicy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ServiceAuthenticationPolicy", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicy], $attributes)
        $parameters.Add("ServiceAuthenticationPolicy", $parameter)
        
        # UserAuthenticationPolicy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UserAuthenticationPolicy", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicy], $attributes)
        $parameters.Add("UserAuthenticationPolicy", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADCentralAccessPolicy {
    <#
    .SYNOPSIS
        Modifies a central access policy in Active Directory.
    .PARAMETER Add
        Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the Lightweight Directory Access Protocol (LDAP) display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon.. The format for this parameter is:
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations is performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Clear
        Specifies an array of object properties that are cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP display name ( ldapDisplayName ) for this property is description.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Instance
        Specifies a modified copy of a central access policy object to use to update the actual central access policy object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding central access policy object. The cmdlet only updates the object properties that have changed.
        The Instance parameter can only update central access policy objects that have been retrieved by using the Get-ADCentralAccessPolicy cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ProtectedFromAccidentalDeletion
        Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property.
    .PARAMETER Remove
        Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is:
        `-Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the parameters are applied in the following sequence:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216406')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADCentralAccessPolicy], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADCentralAccessPolicy], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADCentralAccessRule {
    <#
    .SYNOPSIS
        Modifies a central access rule in Active Directory.
    .PARAMETER Add
        Specifies values to add to an object property. You can use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the Lightweight Directory Access Protocol (LDAP) display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon.. The format for this parameter is:
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Clear
        Specifies an array of object properties that are cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER CurrentAcl
        Specifies the currently effective access control list (ACL) of the rule. The current ACL grants access to target resources once the central access policy containing this rule is published.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP display name ( ldapDisplayName ) for this property is description.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Instance
        Specifies a modified copy of an central access rule object to use to update the actual central access rule object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding central access rule object. The cmdlet only updates the object properties that have changed.
        The Instance parameter can only update central access rule objects that have been retrieved by using the Get-ADCentralAccessRule cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ProposedAcl
        Specifies the proposed ACL of the central access rule. The proposed ACL allows an administrator to audit the results of access requests to target resources specified in the resource condition without affecting the current system. To view the logs, go to Event Viewer or other audit tools to view the logs.
    .PARAMETER ProtectedFromAccidentalDeletion
        Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Remove
        Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is:
        `-Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the parameters are applied in the following sequence:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER ResourceCondition
        Specifies the resource condition of the central access rule. The resource condition specifies a list of criteria to scope the resources.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216407')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # CurrentAcl
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("CurrentAcl", [System.String], $attributes)
        $parameters.Add("CurrentAcl", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADCentralAccessRule], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADCentralAccessRule], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ProposedAcl
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProposedAcl", [System.String], $attributes)
        $parameters.Add("ProposedAcl", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # ResourceCondition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ResourceCondition", [System.String], $attributes)
        $parameters.Add("ResourceCondition", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADClaimTransformLink {
    <#
    .SYNOPSIS
        Applies a claims transformation to one or more cross-forest trust relationships in Active Directory.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Policy
        Specifies the claims transformation policy to apply to the cross-forest trust relationship. This parameter does not receive pipeline input.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER TrustRole
        Specifies a trust role, as an enumeration of the link types. Used to specify which links on the trust relationships that the claims transformation apply to. The acceptable values for this parameter are:
        - Trusted
        - Trusting
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216409')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADTrust], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Policy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Policy", [Microsoft.ActiveDirectory.Management.ADClaimTransformPolicy], $attributes)
        $parameters.Add("Policy", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # TrustRole
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TrustRole", [Microsoft.ActiveDirectory.Management.ADTrustRole], $attributes)
        $parameters.Add("TrustRole", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADClaimTransformPolicy {
    <#
    .SYNOPSIS
        Sets the properties of a claims transformation policy in Active Directory.
    .PARAMETER Add
        Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the Lightweight Directory Access Protocol (LDAP) display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AllowAll
        Indicates whether the policy sets a claims transformation rule that allows all claims to be sent or received.
    .PARAMETER AllowAllExcept
        Specifies an array of claim types. When this parameter is specified, the policy sets a claims transformation rule that allows all claims to be sent or received except for the specified claim types.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Clear
        Specifies an array of object properties that are cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Credential
        Specifies a user account that has permission to perform this action. The default is the current user.
        Type a user name, such as User01" or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet. If you type a user name, you are prompted for a password.
        This parameter is not supported by any providers installed with Windows PowerShell.
    .PARAMETER DenyAll
        Indicates that the policy sets a claims transformation rule that denies all claims to be sent or received.
    .PARAMETER DenyAllExcept
        Specifies an array of claim types. When this parameter is specified, the claims transformation policy sets a claims transformation rule that denies all claims to be sent or received except for the specified claim types.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP display name ( ldapDisplayName ) for this property is description.
    .PARAMETER Identity
        Specifies one of the following as valid identities for the ADClaimTransformPolicy object:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Instance
        Specifies an instance of an Active Directory object to use as a template for a new claims transformation policy object.
        You can use an instance of an existing claims transformation policy object as a template or you can construct a new claims transformation policy object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing claims transformation policy object as a template for a new object. To retrieve an instance of an existing claims transformation policy object, use a cmdlet such as Get-ADClaimTransformPolicy . Then provide this object to the Instance parameter of the New-ADClaimTransformPolicy cmdlet to create a new claims transformation policy object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADClaimTransformPolicy and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADClaimTransformPolicy cmdlet to create the new Active Directory object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ProtectedFromAccidentalDeletion
        Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Remove
        Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is:
        `-Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the parameters are applied in the following sequence:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is
        `-Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Rule
        Specifies the claims transformation rule. To specify the rule, you can either type the rule in a text file, and then pass the file to the cmdlet (recommended), or type the rule inline.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216410')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DenyAllExcept"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DenyAll"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowAll"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowAllExcept"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AllowAll
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateSetAttribute('true')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowAll"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AllowAll", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("AllowAll", $parameter)
        
        # AllowAllExcept
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowAllExcept"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AllowAllExcept", [Microsoft.ActiveDirectory.Management.ADClaimType[]], $attributes)
        $parameters.Add("AllowAllExcept", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowAllExcept"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowAll"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DenyAllExcept"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DenyAll"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # DenyAll
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DenyAll"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateSetAttribute('true')
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DenyAll", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("DenyAll", $parameter)
        
        # DenyAllExcept
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DenyAllExcept"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DenyAllExcept", [Microsoft.ActiveDirectory.Management.ADClaimType[]], $attributes)
        $parameters.Add("DenyAllExcept", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DenyAllExcept"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowAll"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowAllExcept"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DenyAll"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "AllowAllExcept"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "AllowAll"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "DenyAll"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "DenyAllExcept"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADClaimTransformPolicy], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADClaimTransformPolicy], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowAll"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DenyAll"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowAllExcept"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DenyAllExcept"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowAllExcept"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowAll"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DenyAll"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DenyAllExcept"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowAllExcept"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DenyAllExcept"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "DenyAll"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowAll"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # Rule
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Rule", [System.String], $attributes)
        $parameters.Add("Rule", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADClaimType {
    <#
    .SYNOPSIS
        Modify a claim type in Active Directory.
    .PARAMETER Add
        Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the Lightweight Directory Access Protocol (LDAP) display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Replace , Clear , and Remove parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AppliesToClasses
        Specifies the names, GUIDs, or distinguished names of the schema classes to which this claim type is applied.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Clear
        Specifies an array of object properties that are cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        -Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName
        When you use the Add , Replace , Clear , and Remove parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP display name ( ldapDisplayName ) for this property is description.
    .PARAMETER DisplayName
        Specifies the display name of the claim type. The display name of the claim type must be unique. The display name of a claim type can be used as an identity in other Active Directory cmdlets.
    .PARAMETER Enabled
        Specifies if the claim type is enabled.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Instance
        Specifies an instance of a claim type object to use as a template for a new claim type object.
        You can use an instance of an existing claim type object as a template or you can construct a new claim type object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing claim type object as a template for a new object. To retrieve an instance of an existing claim type object, use a cmdlet such as Get-ADClaimType . Then provide this object to the Instance parameter of the New-ADClaimType cmdlet to create a new claim type object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new claim type and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADClaimType cmdlet to create the new claim type object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ProtectedFromAccidentalDeletion
        Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Remove
        Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is:
        `-Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Replace , Clear , and Remove parameters together, the parameters are applied in the following sequence:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Replace , Clear , and Remove parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER RestrictValues
        This parameter is used to specify whether the claim type may have values outside of the SuggestedValues parameter. If this is set to $True, then the claim should only have values specified in the SuggestedValues parameter. Note that Active Directory does not enforce this restriction. It is up to the applications that use these claims to enforce the restriction.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER SourceAttribute
        Specifies an Active Directory attribute from which this claim type is based, and from which the claim value is obtained. The input must be the distinguished name, Name, or GUID of the attribute definition in the schema.
        Acceptable values include attributes of the following schema class objects: User , InetOrgPerson , Computer , ManagedServiceAccount , GroupManagedServiceAccount , and Auxiliary , except for the following attributes:
        Attributes marked as defunct in the schema- Blocked attributes such as dBCSPwd , lmPwdHistory , and unicodePwd Attributes that are not replicated  Attributes that are not available on read-only domain controllers  Attributes with syntaxes not based on the following:
        - String Object (DS-DN)
        - String (Unicode)
        - Boolean
        - Integer
        - Large Integer
        - String (OID)
        - String (SD)
    .PARAMETER SourceOID
        Specifies a string to use to configure a certificate-based claim type source. For example, use this parameter to create certificate-based claim types when you want to use smartcard logon claims for authorization decisions. This parameter uses the string representation of an object identifier (OID) from the issuance policy found in the certificate and on the certificate template when using Active Directory Certificate Services. An example of an OID is 1.3.6.1.4.1.311.47.2.5.
    .PARAMETER SourceTransformPolicy
        Indicates that the claim type is sourced from the claims transformation policy engine.
    .PARAMETER SuggestedValues
        Specifies one or more suggested values for the claim type. An application may choose to present this list of suggested values for the user to choose from. When RestrictValues is set to $True, the application should restrict the user to pick values from this list only.
    #>
    
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216411')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceTransformPolicy"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceAttribute"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceOID"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AppliesToClasses
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceAttribute"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceTransformPolicy"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceOID"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AppliesToClasses", [System.String[]], $attributes)
        $parameters.Add("AppliesToClasses", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceOID"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceAttribute"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceTransformPolicy"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceAttribute"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceOID"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceTransformPolicy"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # DisplayName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceOID"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceAttribute"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceTransformPolicy"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisplayName", [System.String], $attributes)
        $parameters.Add("DisplayName", $parameter)
        
        # Enabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceTransformPolicy"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceAttribute"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceOID"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Enabled", [System.Boolean], $attributes)
        $parameters.Add("Enabled", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "SourceTransformPolicy"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "SourceAttribute"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "SourceOID"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADClaimType], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADClaimType], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceAttribute"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceTransformPolicy"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceOID"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceTransformPolicy"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceOID"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceAttribute"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceOID"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceTransformPolicy"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceAttribute"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # RestrictValues
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceAttribute"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceTransformPolicy"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceOID"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("RestrictValues", [System.Boolean], $attributes)
        $parameters.Add("RestrictValues", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # SourceAttribute
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceAttribute"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SourceAttribute", [System.String], $attributes)
        $parameters.Add("SourceAttribute", $parameter)
        
        # SourceOID
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceOID"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SourceOID", [System.String], $attributes)
        $parameters.Add("SourceOID", $parameter)
        
        # SourceTransformPolicy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceTransformPolicy"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SourceTransformPolicy", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("SourceTransformPolicy", $parameter)
        
        # SuggestedValues
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceAttribute"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "SourceTransformPolicy"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SuggestedValues", [Microsoft.ActiveDirectory.Management.ADSuggestedValueEntry[]], $attributes)
        $parameters.Add("SuggestedValues", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADComputer {
    <#
    .SYNOPSIS
        Modifies an Active Directory computer object.
    .PARAMETER AccountExpirationDate
        Specifies the expiration date for an account. This parameter sets the AccountExpirationDate property of an account object. The Active Directory Lightweight Directory Services (LDAP) display name ( ldapDisplayName ) for this property is accountExpires.
        Use the DateTime syntax when you specify this parameter. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date.
    .PARAMETER AccountNotDelegated
        Specifies whether the security context of the user is delegated to a service. When this parameter is set to true, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Add
        Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon.. The format for this parameter is:
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Replace , Clear , and Remove parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AllowReversiblePasswordEncryption
        Specifies whether reversible password encryption is allowed for the account. This parameter sets the AllowReversiblePasswordEncryption property of the account. This parameter also sets the ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED flag of the Active Directory User Account Control (UAC) attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER AuthenticationPolicy
        Specifies an Active Directory Domain Services authentication policy object. Specify the authentication policy object in one of the following formats:
        - distinguished name
        - GUID
        - Name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER AuthenticationPolicySilo
        Specifies an Active Directory Domain Services authentication policy silo object. Specify the authentication policy silo object in one of the following formats:
        - Distinguished Name
        - GUID
        - Name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER CannotChangePassword
        Specifies whether the account password can be changed. This parameter sets the CannotChangePassword property of an account. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Certificates
        Modifies the DER-encoded X.509v3 certificates of the account. These certificates include the public key certificates issued to this account by the Microsoft Certificate Service. This parameter sets the Certificates property of the account object. The LDAP Display Name ( ldapDisplayName ) for this property is userCertificate.
        Syntax:
        To add values:
        `-Certificates @{Add=value1,value2,...}`
        To remove values:
        `-Certificates @{Remove=value3,value4,...}`
        To replace values:
        `-Certificates @{Replace=value1,value2,...}`
        To clear all values:
        `-Certificates $null`
        You can specify more than one operation by using a list separated by semicolons. For example, use the following syntax to add and remove Certificate values
        `-Certificates @{Add=value1,value2,...;Remove=value3,value4,...}`
        The operators are applied in the following sequence:
        ..Remove
        ..Add
        ..Replace
    .PARAMETER ChangePasswordAtLogon
        Specifies whether a password must be changed during the next logon attempt. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
        This parameter cannot be set to $True or 1 for an account that also has the PasswordNeverExpires property set to $True.
    .PARAMETER Clear
        Specifies an array of object properties that are cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        -Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName
        When you use the Add , Replace , Clear , and Remove parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER CompoundIdentitySupported
        Specifies whether an account supports Kerberos service tickets which includes the authorization data for the user's device.  This value sets the compound identity supported flag of the Active Directory msDS-SupportedEncryptionTypes attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
        Warning: Domain-joined Windows systems and services such as clustering manage their own msDS-SupportedEncryptionTypes attribute. Therefore any changes to the flag on the msDS-SupportedEncryptionTypes attribute is overwritten by the service or system which manages the setting.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP display name ( ldapDisplayName ) for this property is description.
    .PARAMETER DisplayName
        Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP display name ( ldapDisplayName ) for this property is displayName.
    .PARAMETER DNSHostName
        Specifies the fully qualified domain name (FQDN) of the computer. This parameter sets the DNSHostName property for a computer object. The LDAP display name for this property is dNSHostName.
    .PARAMETER Enabled
        Specifies if an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER HomePage
        Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP display name ( ldapDisplayName ) for this property is wWWHomePage.
    .PARAMETER Identity
        Specifies an Active Directory computer object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A Distinguished Name
        - A GUID (objectGUID)
        - A Security Identifier (objectSid)
        - A Security Accounts Manager Account Name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If the identifier given is a distinguished name, the partition to search is computed from that distinguished name. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to a computer object instance.
    .PARAMETER Instance
        Specifies a modified copy of a computer object to use to update the actual Active Directory computer object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.
        The Instance parameter can only update computer objects that have been retrieved by using the Get-ADComputer cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.
    .PARAMETER KerberosEncryptionType
        Specifies whether an account supports Kerberos encryption types which are used during creation of service tickets. This value sets the encryption types supported flags of the Active Directory msDS-SupportedEncryptionTypes attribute. The acceptable values for this parameter are:
        - None
        - DES
        - RC4
        - AES128
        - AES256
        None will remove all encryption types from the account which may result in the Key Distribution Center (KDC) being unable to issue service tickets for services using the account.
        Data Encryption Standard (DES) is a weak encryption type which is not supported by default since Windows 7 and Windows Server 2008 R2.
        Warning: Domain-joined Windows systems and services such as clustering manage their own msDS-SupportedEncryptionTypes attribute. Therefore any changes to the flag on the msDS-SupportedEncryptionTypes attribute is overwritten by the service or system which manages the setting.
    .PARAMETER Location
        Specifies the location of the computer, such as an office number. This parameter sets the Location property of a computer. The LDAP display name ( ldapDisplayName ) of this property is location.
    .PARAMETER ManagedBy
        Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property. The acceptable values for this parameter are:
        - A Distinguished Name
        - A GUID (objectGUID)
        - A Security Identifier (objectSid)
        - A SAM Account Name (sAMAccountName)
        This parameter sets the Active Directory attribute with an LDAP display name of managedBy.
    .PARAMETER OperatingSystem
        Specifies an operating system name. This parameter sets the OperatingSystem property of the computer object. The LDAP display name ( ldapDisplayName ) for this property is operatingSystem.
    .PARAMETER OperatingSystemHotfix
        Specifies an operating system hotfix name. This parameter sets the operatingSystemHotfix property of the computer object. The LDAP display name for this property is operatingSystemHotfix.
    .PARAMETER OperatingSystemServicePack
        Specifies the name of an operating system service pack. This parameter sets the OperatingSystemServicePack property of the computer object. The LDAP display name ( ldapDisplayName ) for this property is operatingSystemServicePack.
    .PARAMETER OperatingSystemVersion
        Specifies an operating system version. This parameter sets the OperatingSystemVersion property of the computer object. The LDAP display name ( ldapDisplayName ) for this property is operatingSystemVersion.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified.  The rules for determining the default value are given below.  Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER PasswordNeverExpires
        Specifies whether the password of an account can expire. This parameter sets the PasswordNeverExpires property of an account object. This parameter also sets the ADS_UF_DONT_EXPIRE_PASSWD flag of the Active Directory User Account Control attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
        Note: This parameter cannot be set to $True or 1 for an account that also has the ChangePasswordAtLogon property set to &True.
    .PARAMETER PasswordNotRequired
        Specifies whether the account requires a password. This parameter sets the PasswordNotRequired property of an account, such as a user or computer account. This parameter also sets the ADS_UF_PASSWD_NOTREQD flag of the Active Directory User Account Control attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER PrincipalsAllowedToDelegateToAccount
        Specifies the accounts which can act on the behalf of users to services running as this computer account. This parameter sets the msDS-AllowedToActOnBehalfOfOtherIdentity attribute of a computer account object.
        `Running Set-ADComputer without specifying the first principal will cause it to get overridden`
    .PARAMETER Remove
        Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is:
        `-Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Replace , Clear , and Remove parameters together, the parameters are applied in the following sequence:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values, and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Replace @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER SAMAccountName
        Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name ( ldapDisplayName ) for this property is sAMAccountName.
        Note: If the string value provided is not terminated with a $ character, the system adds one if needed.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services, or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER ServicePrincipalNames
        Specifies the service principal names for the account. This parameter sets the ServicePrincipalNames property of the account. The LDAP display name ( ldapDisplayName ) for this property is servicePrincipalName. This parameter uses the following syntax to add remove, replace or clear service principal name values:
        Syntax:
        To add values:
        `-ServicePrincipalNames @{Add=value1,value2,...}`
        To remove values:
        `-ServicePrincipalNames @{Remove=value3,value4,...}`
        To replace values:
        `-ServicePrincipalNames @{Replace=value1,value2,...}`
        To clear all values:
        `-ServicePrincipalNames $null`
        You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove service principal names.
        `@{Add=value1,value2,...;Remove=value3,value4,...}`
        The operators are applied in the following sequence:
        ..Remove
        ..Add
        ..Replace
        The following example shows how to add and remove service principal names.
        `-ServicePrincipalNames @{Add="SQLservice/accounting.corp.contoso.com:1456";Remove="SQLservice/finance.corp.contoso.com:1456"}`
    .PARAMETER TrustedForDelegation
        Specifies whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER UserPrincipalName
        Specifies a user principal name (UPN) in the format `<user>@<DNS-domain-name>`. A user principal name (UPN) is a friendly name assigned by an administrator that is shorter than the LDAP distinguished name used by the system and easier to remember. The UPN is independent of the user object's distinguished name, so a user object can be moved or renamed without affecting the user logon name. When logging on using a UPN, users no longer have to choose a domain from a list on the logon dialog box.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301402')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AccountExpirationDate
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountExpirationDate", [System.Nullable`1[System.DateTime]], $attributes)
        $parameters.Add("AccountExpirationDate", $parameter)
        
        # AccountNotDelegated
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountNotDelegated", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("AccountNotDelegated", $parameter)
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AllowReversiblePasswordEncryption
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AllowReversiblePasswordEncryption", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("AllowReversiblePasswordEncryption", $parameter)
        
        # AuthenticationPolicy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthenticationPolicy", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicy], $attributes)
        $parameters.Add("AuthenticationPolicy", $parameter)
        
        # AuthenticationPolicySilo
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthenticationPolicySilo", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicySilo], $attributes)
        $parameters.Add("AuthenticationPolicySilo", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # CannotChangePassword
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("CannotChangePassword", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("CannotChangePassword", $parameter)
        
        # Certificates
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateSetOperationsHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Certificates", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Certificates", $parameter)
        
        # ChangePasswordAtLogon
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ChangePasswordAtLogon", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ChangePasswordAtLogon", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # CompoundIdentitySupported
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("CompoundIdentitySupported", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("CompoundIdentitySupported", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # DisplayName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisplayName", [System.String], $attributes)
        $parameters.Add("DisplayName", $parameter)
        
        # DNSHostName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DNSHostName", [System.String], $attributes)
        $parameters.Add("DNSHostName", $parameter)
        
        # Enabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Enabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("Enabled", $parameter)
        
        # HomePage
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("HomePage", [System.String], $attributes)
        $parameters.Add("HomePage", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADComputer], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADComputer], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # KerberosEncryptionType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("KerberosEncryptionType", [Microsoft.ActiveDirectory.Management.ADKerberosEncryptionType], $attributes)
        $parameters.Add("KerberosEncryptionType", $parameter)
        
        # Location
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Location", [System.String], $attributes)
        $parameters.Add("Location", $parameter)
        
        # ManagedBy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ManagedBy", [Microsoft.ActiveDirectory.Management.ADPrincipal], $attributes)
        $parameters.Add("ManagedBy", $parameter)
        
        # OperatingSystem
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OperatingSystem", [System.String], $attributes)
        $parameters.Add("OperatingSystem", $parameter)
        
        # OperatingSystemHotfix
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OperatingSystemHotfix", [System.String], $attributes)
        $parameters.Add("OperatingSystemHotfix", $parameter)
        
        # OperatingSystemServicePack
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OperatingSystemServicePack", [System.String], $attributes)
        $parameters.Add("OperatingSystemServicePack", $parameter)
        
        # OperatingSystemVersion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OperatingSystemVersion", [System.String], $attributes)
        $parameters.Add("OperatingSystemVersion", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # PasswordNeverExpires
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PasswordNeverExpires", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("PasswordNeverExpires", $parameter)
        
        # PasswordNotRequired
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PasswordNotRequired", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("PasswordNotRequired", $parameter)
        
        # PrincipalsAllowedToDelegateToAccount
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PrincipalsAllowedToDelegateToAccount", [Microsoft.ActiveDirectory.Management.ADPrincipal[]], $attributes)
        $parameters.Add("PrincipalsAllowedToDelegateToAccount", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # SAMAccountName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SAMAccountName", [System.String], $attributes)
        $parameters.Add("SAMAccountName", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # ServicePrincipalNames
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateSetOperationsHashtableAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ServicePrincipalNames", [System.Collections.Hashtable], $attributes)
        $parameters.Add("ServicePrincipalNames", $parameter)
        
        # TrustedForDelegation
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TrustedForDelegation", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("TrustedForDelegation", $parameter)
        
        # UserPrincipalName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UserPrincipalName", [System.String], $attributes)
        $parameters.Add("UserPrincipalName", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADDefaultDomainPasswordPolicy {
    <#
    .SYNOPSIS
        Modifies the default password policy for an Active Directory domain.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER ComplexityEnabled
        Specifies whether password complexity is enabled for the password policy. If enabled, the password must contain three of the following four character types:
        - Uppercase characters (A, B, C, D, E, ...)
        - Lowercase characters (a, b, c, d, e, ...)
        - Numerals (0, 1, 2, 3, ...)
        - Special characters (#, $, *, %, ...)
        This parameter sets the ComplexityEnabled property of a password policy. The acceptable values for this parameter are:
        - $False or 0. Disables password complexity.  - $True or 1. Enables password complexity.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory domain object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. All values are for the domainDNS object that represents the domain. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A DNS domain name
        - A NetBIOS domain name
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to a domain object instance.
    .PARAMETER LockoutDuration
        Specifies the length of time that an account is locked after the number of failed login attempts exceeds the lockout threshold. You cannot login to an account that is locked until the lockout duration time period has expired. This parameter sets the lockoutDuration property of a password policy object. The LDAP display name ( ldapDisplayName ) of this property is lockoutDuration.
        The lockout duration must be greater than or equal to the lockout observation time for a password policy. Use the LockOutObservationWindow parameter to set the lockout observation time.
        Specify the lockout duration time interval in the following format:
        D.H:M:S.F
        where:
        D = Days (0 to 10675199)
        H = Hours (0 to 23)
        M = Minutes (0 to 59)
        S = Seconds (0 to 59)
        F = Fractions of a second (0 to 9999999)
    .PARAMETER LockoutObservationWindow
        Specifies the maximum time interval between two unsuccessful login attempts before the number of unsuccessful login attempts is reset to 0. An account is locked when the number of unsuccessful login attempts exceeds the password policy lockout threshold. This parameter sets the lockoutObservationWindow property of a password policy object. The LDAP display name ( ldapDisplayName ) of this property is lockoutObservationWindow.
        The lockout observation window must be smaller than or equal to the lockout duration for a password policy. Use the LockoutDuration parameter to set the lockout duration time.
        Specify the time interval in the following format:
        D:H:M:S.F
        where:
        D = Days (0 to 10675199)
        H = Hours (0 to 23)
        M = Minutes (0 to 59)
        S = Seconds (0 to 59)
        F = Fractions of a second (0 to 9999999)
        Note: Time values must be between the following values: 0:0:0:0.0 and 10675199:02:48:05.4775807.
    .PARAMETER LockoutThreshold
        Specifies the number of unsuccessful login attempts that are permitted before an account is locked out. This number increases when the time between unsuccessful login attempts is less than the time specified for the lockout observation time window. This parameter sets the LockoutThreshold property of a password policy.
    .PARAMETER MaxPasswordAge
        Specifies the maximum length of time that you can have the same password. After this time period, the password expires and you must create a new one.
        This parameter sets the maxPasswordAge property of a password policy. The LDAP display name ( ldapDisplayName ) for this property is maxPwdAge.
        Specify the time interval in the following format:
        D.H:M:S.F
        where:
        D = Days (0 to 10675199)
        H = Hours (0 to 23)
        M = Minutes (0 to 59)
        S = Seconds (0 to 59)
        F = Fractions of a second (0 to 9999999)
        Note: Time values must be between the following values: 0 and 10675199:02:48:05.4775807.
    .PARAMETER MinPasswordAge
        Specifies the minimum length of time before you can change a password.
        This parameter sets the minPasswordAge property of a password policy. The LDAP display name ( ldapDisplayName ) for this property is minPwdAge.
        Specify the time interval in the following format.
        D.H:M:S.F
        where:
        D = Days (0 to 10675199)
        H = Hours (0 to 23)
        M = Minutes (0 to 59)
        S = Seconds (0 to 59)
        F = Fractions of a second (0 to 9999999)
        Note: Time values must be between the following values: 0 and 10675199:02:48:05.4775807.
    .PARAMETER MinPasswordLength
        Specifies the minimum number of characters that a password must contain. This parameter sets the MinPasswordLength property of the password policy.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER PasswordHistoryCount
        Specifies the number of previous passwords to save. A user cannot reuse a password in the list of saved passwords. This parameter sets the PasswordHistoryCount property for a password policy.
    .PARAMETER ReversibleEncryptionEnabled
        Specifies whether the directory must store passwords using reversible encryption. This parameter sets the ReversibleEncryption property for a password policy. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219358')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # ComplexityEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ComplexityEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ComplexityEnabled", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADDefaultDomainPasswordPolicy], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # LockoutDuration
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LockoutDuration", [System.Nullable`1[System.TimeSpan]], $attributes)
        $parameters.Add("LockoutDuration", $parameter)
        
        # LockoutObservationWindow
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LockoutObservationWindow", [System.Nullable`1[System.TimeSpan]], $attributes)
        $parameters.Add("LockoutObservationWindow", $parameter)
        
        # LockoutThreshold
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LockoutThreshold", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("LockoutThreshold", $parameter)
        
        # MaxPasswordAge
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("MaxPasswordAge", [System.Nullable`1[System.TimeSpan]], $attributes)
        $parameters.Add("MaxPasswordAge", $parameter)
        
        # MinPasswordAge
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("MinPasswordAge", [System.Nullable`1[System.TimeSpan]], $attributes)
        $parameters.Add("MinPasswordAge", $parameter)
        
        # MinPasswordLength
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("MinPasswordLength", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("MinPasswordLength", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # PasswordHistoryCount
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PasswordHistoryCount", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("PasswordHistoryCount", $parameter)
        
        # ReversibleEncryptionEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ReversibleEncryptionEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ReversibleEncryptionEnabled", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADDomain {
    <#
    .SYNOPSIS
        Modifies an Active Directory domain.
    .PARAMETER Add
        Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the Lightweight Directory Access Protocol (LDAP) display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon. The format for this parameter is
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Replace , Clear , and Remove parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AllowedDNSSuffixes
        Modifies the list of domain name server (DNS) suffixes that are allowed in a domain. This parameter sets the value of the msDS-AllowedDNSSuffixes attribute of the domainDNS object. This parameter uses the following syntax to add, remove, replace, or clear DNS suffix values.
        To add values:
        `-AllowedDNSSuffixes @{Add=value1,value2,...}`
        To remove values:
        ``-AllowedDNSSuffixes @{Remove=value3,value4,...}
        To replace values:
        `-AllowedDNSSuffixes @{Replace=value1,value2,...}`
        To clear all values:
        `-AllowedDNSSuffixes $Null`
        You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove DNS suffix values:
        `@{Add=value1,value2,...};@{Remove=value3,value4,...}`
        When you use the Add , Replace , Clear , and Remove parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Clear
        Specifies an array of object properties that are cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName`
        When you use the Add , Replace , Clear , and Remove parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory domain object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. All values are for the domainDNS object that represents the domain. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A DNS domain name
        - A NetBIOS domain name
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to a domain object instance.
    .PARAMETER Instance
        Specifies a modified copy of a domain object to use to update the actual Active Directory domain object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.
        The Instance parameter can only update domain objects that have been retrieved by using the Get-ADDomain cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.
    .PARAMETER LastLogonReplicationInterval
        Specifies the time, in days, within which the last logon time of an account must be replicated across all domain controllers in the domain. This parameter sets the LastLogonReplicationInterval property for a domain. The LDAP display name ( ldapDisplayName ) for this property is msDS-LogonTimeSyncInterval . The last logon replication interval must be at least one day. Setting the last logon replication interval to a low value can significantly increase domain-wide replication.
    .PARAMETER ManagedBy
        Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        This parameter sets the Active Directory attribute with an LDAP display name of managedBy.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER PublicKeyRequiredPasswordRolling
        Specifies whether the domain enables password expiration and rolling for user account that require a smart card for interactive sign in.
    .PARAMETER Remove
        Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is:
        `-Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Replace , Clear , and Remove parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values, and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Replace @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219349')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AllowedDNSSuffixes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateSetOperationsHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AllowedDNSSuffixes", [System.Collections.Hashtable], $attributes)
        $parameters.Add("AllowedDNSSuffixes", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADDomain], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADDomain], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # LastLogonReplicationInterval
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LastLogonReplicationInterval", [System.Nullable`1[System.TimeSpan]], $attributes)
        $parameters.Add("LastLogonReplicationInterval", $parameter)
        
        # ManagedBy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ManagedBy", [Microsoft.ActiveDirectory.Management.ADPrincipal], $attributes)
        $parameters.Add("ManagedBy", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # PublicKeyRequiredPasswordRolling
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PublicKeyRequiredPasswordRolling", [System.Boolean], $attributes)
        $parameters.Add("PublicKeyRequiredPasswordRolling", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADDomainMode {
    <#
    .SYNOPSIS
        Sets the domain mode for an Active Directory domain.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER DomainMode
        Specifies the domain functional level of the first domain in the creation of a new forest. Supported values for this parameter can be either a valid integer or a corresponding enumerated string value. For example, to set the domain mode level to Windows Server 2008 R2, you can specify either a value of 4 or Windows2008R2Domain .
        The following are the currently supported values:
        - Windows Server 2000: 0 or Windows2000Domain - Windows Server 2003 Interim Domain: 1 or Windows2003InterimDomain - Windows Server 2003: 2 or Windows2003Domain - Windows Server 2008: 3 or Windows2008Domain - Windows Server 2008 R2: 4 or Windows2008R2Domain - Windows Server 2012: 5 or Windows2012Domain - Windows Server 2012 R2: 6 or Windows2012R2Domain - Windows Server 2016: 7 or WinThreshold The domain functional level cannot be lower than the forest functional level, but it can be higher. The functional level can be increased, and also decreased as long as no feature that requires that functional level is in use, such as the Active Directory Recycle Bin. The default is automatically computed and set.
    .PARAMETER Identity
        Specifies an Active Directory domain object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. All values are for the domainDNS object that represents the domain. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A   DNS domain name
        - A NetBIOS domain name
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to a domain object instance.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219356')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # DomainMode
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 2
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DomainMode", [Microsoft.ActiveDirectory.Management.ADDomainMode], $attributes)
        $parameters.Add("DomainMode", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADDomain], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADFineGrainedPasswordPolicy {
    <#
    .SYNOPSIS
        Modifies an Active Directory fine-grained password policy.
    .PARAMETER Add
        Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the Lightweight Directory Access Protocol (LDAP) display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Replace , Clear , and Remove parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AuthType
        Specifies the authentication method to use.  The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Clear
        Specifies an array of object properties that are cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName`
        When you use the Add , Replace , Clear , and Remove parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER ComplexityEnabled
        Specifies whether password complexity is enabled for the password policy. If enabled, the password must contain three of the following four character types:
        - Uppercase characters (A, B, C, D, E, ...)
        - Lowercase characters (a, b, c, d, e, ...)
        - Numerals (0, 1, 2, 3, ...)
        - Special characters (#, $, *, %, ...)
        This parameter sets the ComplexityEnabled property of a password policy. The acceptable values for this parameter are:
        - $False or 0. Disables password complexity. - $True or 1. Enables password complexity.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP display name ( ldapDisplayName ) for this property is description.
    .PARAMETER DisplayName
        Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP display name ( ldapDisplayName ) for this property is displayName.
    .PARAMETER Identity
        Specifies an Active Directory fine-grained password policy object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A Distinguished Name (distinguishedName)
        - A GUID (objectGUID)
        - A Name (name)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline operator or you can set this parameter to a fine-grained password policy object instance.
    .PARAMETER Instance
        Specifies a modified copy of a fine-grained password policy object to use to update the actual Active Directory fine-grained password policy object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.
        The Instance parameter can only update fine-grained password policy objects that have been retrieved by using the Get-ADFineGrainedPasswordPolicy cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.
    .PARAMETER LockoutDuration
        Specifies the length of time that an account is locked after the number of failed login attempts exceeds the lockout threshold. You cannot login to an account that is locked until the lockout duration time period has expired. This parameter sets the lockoutDuration property of a password policy object. The LDAP display name ( ldapDisplayName ) of this property is msDS-LockoutDuration.
        The lockout duration must be greater than or equal to the lockout observation time for a password policy. Use the LockOutObservationWindow parameter to set the lockout observation time.
        Specify the lockout duration time interval in the following format:
        D.H:M:S.F
        where:
        D = Days (0 to 10675199)
        H = Hours (0 to 23)
        M = Minutes (0 to 59)
        S = Seconds (0 to 59)
        F= Fractions of a second (0 to 9999999)
    .PARAMETER LockoutObservationWindow
        Specifies the maximum time interval between two unsuccessful login attempts before the number of unsuccessful login attempts is reset to 0. An account is locked when the number of unsuccessful login attempts exceeds the password policy lockout threshold. This parameter sets the lockoutObservationWindow property of a password policy object. The LDAP display name ( ldapDisplayName ) of this property is msDS-lockoutObservationWindow.
        The lockout observation window must be smaller than or equal to the lockout duration for a password policy. Use the LockoutDuration parameter to set the lockout duration time.
        Specify the time interval in the following format:
        D:H:M:S.F
        where:
        D = Days (0 to 10675199)
        H = Hours (0 to 23)
        M = Minutes (0 to 59)
        S = Seconds (0 to 59)
        F= Fractions of a second (0 to 9999999)
        Note: Time values must be between the following values: 0:0:0:0.0 and 10675199:02:48:05.4775807.
    .PARAMETER LockoutThreshold
        Specifies the number of unsuccessful login attempts that are permitted before an account is locked out. This number increases when the time between unsuccessful login attempts is less than the time specified for the lockout observation time window. This parameter sets the LockoutThreshold property of a password policy.
    .PARAMETER MaxPasswordAge
        Specifies the maximum length of time that you can have the same password. After this time period, the password expires and you must create a new one.
        This parameter sets the maxPasswordAge property of a password policy. The LDAP display name ( ldapDisplayName ) for this property is maxPwdAge.
        Specify the time interval in the following format:
        D.H:M:S.F
        where:
        D = Days (0 to 10675199)
        H = Hours (0 to 23)
        M = Minutes (0 to 59)
        S = Seconds (0 to 59)
        F= Fractions of a second (0 to 9999999)
        Note: Time values must be between the following values: 0:0:0:0.0 and 10675199:02:48:05.4775807.
    .PARAMETER MinPasswordAge
        Specifies the minimum length of time before you can change a password.
        This parameter sets the minPasswordAge property of a password policy. The LDAP display name ( ldapDisplayName ) for this property is minPwdAge.
        Specify the time interval in the following format:
        D.H:M:S.F
        where:
        D = Days (0 to 10675199)
        H = Hours (0 to 23)
        M = Minutes (0 to 59)
        S = Seconds (0 to 59)
        F= Fractions of a second (0 to 9999999)
        Note: Time values must be between the following values:  0:0:0:0.0 and 10675199:02:48:05.4775807.
    .PARAMETER MinPasswordLength
        Specifies the minimum number of characters that a password must contain.  This parameter sets the MinPasswordLength property of the password policy.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER PasswordHistoryCount
        Specifies the number of previous passwords to save.  A user cannot reuse a password in the list of saved passwords. This parameter sets the PasswordHistoryCount property for a password policy.
    .PARAMETER Precedence
        Specifies a value that defines the precedence of a fine-grained password policy among all fine-grained password policies. This parameter sets the Precedence property for a fine-grained password policy. The LDAP display name ( ldapDisplayName ) for this property is msDS-PasswordSettingsPrecedence.
        This value determines which password policy to use when more than one password policy applies to a user or group. When there is a conflict, the password policy that has the lower Precedence property value has higher priority. For example, if PasswordPolicy1 has a Precedence property value of 200 and PasswordPolicy2 has a Precedence property value of 100, PasswordPolicy2 is used.
        Typically, password policy precedence values are assigned in multiples of 10 or 100, making it easier to add policies at a later time. For example, if you set the initial precedence values for your policies to 100 and 200, you can add another policy that has precedence value of 150.
        If the specified Precedence parameter is already assigned to another password policy object, the cmdlet returns a terminating error.
    .PARAMETER ProtectedFromAccidentalDeletion
        Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Remove
        Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is:
        `-Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Replace , Clear , and Remove parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values, and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Replace @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER ReversibleEncryptionEnabled
        Specifies whether the directory must store passwords using reversible encryption. This parameter sets the ReversibleEncryption property for a password policy. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services, or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219348')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # ComplexityEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ComplexityEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ComplexityEnabled", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # DisplayName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisplayName", [System.String], $attributes)
        $parameters.Add("DisplayName", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # LockoutDuration
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LockoutDuration", [System.Nullable`1[System.TimeSpan]], $attributes)
        $parameters.Add("LockoutDuration", $parameter)
        
        # LockoutObservationWindow
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LockoutObservationWindow", [System.Nullable`1[System.TimeSpan]], $attributes)
        $parameters.Add("LockoutObservationWindow", $parameter)
        
        # LockoutThreshold
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LockoutThreshold", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("LockoutThreshold", $parameter)
        
        # MaxPasswordAge
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("MaxPasswordAge", [System.Nullable`1[System.TimeSpan]], $attributes)
        $parameters.Add("MaxPasswordAge", $parameter)
        
        # MinPasswordAge
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("MinPasswordAge", [System.Nullable`1[System.TimeSpan]], $attributes)
        $parameters.Add("MinPasswordAge", $parameter)
        
        # MinPasswordLength
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("MinPasswordLength", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("MinPasswordLength", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # PasswordHistoryCount
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PasswordHistoryCount", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("PasswordHistoryCount", $parameter)
        
        # Precedence
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Precedence", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("Precedence", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # ReversibleEncryptionEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ReversibleEncryptionEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ReversibleEncryptionEnabled", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADForest {
    <#
    .SYNOPSIS
        Modifies an Active Directory forest.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name such as User1 or Domain01\User01, or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory forest object by providing one of the following attribute values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A fully qualified domain name
        - A GUID (objectGUID)
        - A DNS host name
        - A NetBIOS name
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to a forest object instance.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Directory Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER SPNSuffixes
        Modifies the list of service principal name (SPN) suffixes of the forest. This parameter sets the multi-valued msDS-SPNSuffixes property of the cross-reference container. This parameter uses the following syntax to add remove, replace, or clear SPN suffix values.
        To add values:
        `-SPNSuffixes @{Add=value1,value2,...}`
        To remove values:
        `-SPNSuffixes @{Remove=value3,value4,...}`
        To replace values:
        `-SPNSuffixes @{Replace=value1,value2,...}`
        To clear all values:
        `-SPNSuffixes $Null`
        You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove SPN suffix values:
        `@{Add=value1,value2,...};@{Remove=value3,value4,...}`
        The operators are applied in the following sequence:
        - Remove
        - Add
        - Replace
    .PARAMETER UPNSuffixes
        Modifies the list of user principal name (UPN) suffixes of the forest. This parameter sets the multi-valued msDS-UPNSuffixes property of the cross-reference container. This parameter uses the following syntax to add remove, replace, or clear UPN suffix values.
        To add values:
        `-UPNSuffixes  @{Add=value1,value2,...}`
        To remove values:
        `-UPNSuffixes @{Remove=value3,value4,...}`
        To replace values:
        `-UPNSuffixes @{Replace=value1,value2,...}`
        To clear all values:
        `-UPNSuffixes $Null`
        You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove UPN suffix values:
        `@{Add=value1,value2,...};@{Remove=value3,value4,...}`
        The operators are applied in the following sequence:
        - Remove
        - Add
        - Replace
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219350')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADForest], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # SPNSuffixes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateSetOperationsHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SPNSuffixes", [System.Collections.Hashtable], $attributes)
        $parameters.Add("SPNSuffixes", $parameter)
        
        # UPNSuffixes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateSetOperationsHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UPNSuffixes", [System.Collections.Hashtable], $attributes)
        $parameters.Add("UPNSuffixes", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADForestMode {
    <#
    .SYNOPSIS
        Sets the forest mode for an Active Directory forest.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default. Lin
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER ForestMode
        Specifies the forest mode for an Active Directory forest. The acceptable values for this parameter are:
        - Windows2000Forest or 0
        - Windows2003InterimForest or 1
        - Windows2003Forest or 2
        - Windows2008Forest or 3
        - Windows2008R2Forest or 4
        - Windows2012Forest or 5
        - Windows2012R2Forest or 6
        - Windows2016Forest or 7
        The values are listed in order of functionality from least to most.
    .PARAMETER Identity
        Specifies an Active Directory forest object by providing one of the following attribute values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A fully qualified domain name
        - A GUID (objectGUID)
        - A DNS host name
        - A NetBIOS name
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to a forest object instance.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Directory Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219357')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # ForestMode
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 2
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ForestMode", [Microsoft.ActiveDirectory.Management.ADForestMode], $attributes)
        $parameters.Add("ForestMode", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADForest], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADGroup {
    <#
    .SYNOPSIS
        Modifies an Active Directory group.
    .PARAMETER Add
        Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the Lightweight Directory Access Protocol (LDAP) display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Replace , Clear , and Remove parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Clear
        Specifies an array of object properties that are cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName`
        When you use the Add , Replace , Clear , and Remove parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The Lightweight Directory Access Protocol (LDAP) display name ( ldapDisplayName ) for this property is description.
    .PARAMETER DisplayName
        Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP display name ( ldapDisplayName ) for this property is displayName.
    .PARAMETER GroupCategory
        Specifies the category of the group. The acceptable values for this parameter are:
        - Distribution or 0
        - Security or 1
        This parameter sets the GroupCategory property of the group. This parameter value combined with other group values sets the LDAP display name ( ldapDisplayName ) attribute named groupType.
    .PARAMETER GroupScope
        Specifies the group scope of the group. The acceptable values for this parameter are:
        - DomainLocal or 0
        - Global or 1
        - Universal or 2
        This parameter sets the GroupScope property of a group object to the specified value. The LDAP display name of this property is groupType.
    .PARAMETER HomePage
        Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP display name ( ldapDisplayName ) for this property is wWWHomePage.
    .PARAMETER Identity
        Specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Instance
        Specifies a modified copy of a group object to use to update the actual Active Directory group object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.
        The Instance parameter can only update group objects that have been retrieved by using the Get-ADGroup cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.
    .PARAMETER ManagedBy
        Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - SAM account name (sAMAccountName)
        This parameter sets the Active Directory attribute with an LDAP display name of managedBy.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter does not take a default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Remove
        Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is:
        `-Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Replace , Clear , and Remove parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values, and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Replace @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER SamAccountName
        Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name ( ldapDisplayName ) for this property is sAMAccountName.
        Note: If the string value provided is not terminated with a $ (dollar sign) character, the system adds one if necessary.
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219347')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # DisplayName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisplayName", [System.String], $attributes)
        $parameters.Add("DisplayName", $parameter)
        
        # GroupCategory
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("GroupCategory", [System.Nullable`1[Microsoft.ActiveDirectory.Management.ADGroupCategory]], $attributes)
        $parameters.Add("GroupCategory", $parameter)
        
        # GroupScope
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("GroupScope", [System.Nullable`1[Microsoft.ActiveDirectory.Management.ADGroupScope]], $attributes)
        $parameters.Add("GroupScope", $parameter)
        
        # HomePage
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("HomePage", [System.String], $attributes)
        $parameters.Add("HomePage", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADGroup], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADGroup], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # ManagedBy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ManagedBy", [Microsoft.ActiveDirectory.Management.ADPrincipal], $attributes)
        $parameters.Add("ManagedBy", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # SamAccountName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SamAccountName", [System.String], $attributes)
        $parameters.Add("SamAccountName", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADObject {
    <#
    .SYNOPSIS
        Modifies an Active Directory object.
    .PARAMETER Add
        Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the Lightweight Directory Access Protocol (LDAP) display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        For example, if you want to remove the value 555-222-2222 and add the values 555-222-1111 and 555-222-3333 to Phone-Office-Other attribute (LDAP display name otherTelephone), and add the value 555-222-9999 to Phone-Mobile-Other (LDAP display name otherMobile), set the Add and Remove parameters as follows:
        `-Add @{otherTelephone='555-222-1111', '555-222-3333'; otherMobile='555-222-9999' } -Remove @{otherTelephone='555-222-2222'}`
        When you use the Add , Replace , Clear , and Remove parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Clear
        Specifies an array of object properties that are cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName`
        For example, if you want to clear the value for the Phone-Office-Other attribute (LDAP display name otherTelephone) set the Clear parameter as follows:
        `-Clear otherTelephone`
        When you use the Add , Replace , Clear , and Remove parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP display name ( ldapDisplayName ) for this property is description.
        The following example shows how to set this parameter to a sample description.
        `-Description "Description of the object"`
    .PARAMETER DisplayName
        Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP display name ( ldapDisplayName ) for this property is displayName.
        The following example shows how to set this parameter:
        `-DisplayName "Patti Fuller Laptop"`
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - Distinguished name
        - GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        Derived types, such as the following, are also accepted:
        - Microsoft.ActiveDirectory.Management.ADGroup - Microsoft.ActiveDirectory.Management.ADUser - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADServiceAccount - Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy - Microsoft.ActiveDirectory.Management.ADDomain This example shows how to set this parameter to an ADObject object instance named ADObjectInstance:
        `-Identity $ADObjectInstance`
    .PARAMETER Instance
        Specifies a modified copy of an Active Directory object to use to update the actual Active Directory object. When you specify this parameter, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.
        The Instance parameter can only update Active Directory objects that have been retrieved by using the Get-ADObject cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.
        The following is an example of how to use the Get-ADObject cmdlet to retrieve an instance of the object. The object is modified by using the PowerShell command line. Then the Set-ADObject cmdlet saves the changes to the Active Directory object.
        Step 1: Get a local instance of the object:
        `$ObjectInstance = Get-ADObject -Identity  "CN=someObject, DC=contoso,DC=com"`
        Step 2: Modify one or more properties of the object instance:
        `$ObjectInstance.Description = "New Description"`
        Step3: Save your changes to the object:
        `Set-ADObject -Instance $ObjectInstance`
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        The following two examples show how to specify a value for this parameter.
        `-Partition "CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM"`
        `-Partition "CN=Schema,CN=Configuration,DC=EUROPE,DC=TEST,DC=CONTOSO,DC=COM"`
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive. - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In AD LDS environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive. - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance. - If none of the previous cases apply, the Partition parameter does not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ProtectedFromAccidentalDeletion
        Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
        The following example shows how to set this parameter to $True.
        `-ProtectedFromAccidentalDeletion $True`
    .PARAMETER Remove
        Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is:
        `-Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}`
        For example, if you want to add the values blue and green and remove the value pink from a property with a LDAP display name of FavColors, set the Add and Remove parameters as follows:
        `-Add @{FavColors=Blue,Green} -Remove {FavColors=Pink}`
        When you use the Add , Replace , Clear , and Remove parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values, and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Replace @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Domain name values:
        - Fully qualified domain name (FQDN)
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - A NetBIOS name
        - Fully qualified directory server name and port
        The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
        - By using Server value from objects passed through the pipeline. - By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
        - By using the domain of the computer running PowerShell.
        The following example shows how to specify a FQDN as the parameter value.
        `-Server "corp.contoso.com"`
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219344')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # DisplayName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisplayName", [System.String], $attributes)
        $parameters.Add("DisplayName", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADObject], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADObject], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADOrganizationalUnit {
    <#
    .SYNOPSIS
        Modifies an Active Directory organizational unit.
    .PARAMETER Add
        Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the Lightweight Directory Access Protocol (LDAP) display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER City
        Specifies the town or city. This parameter sets the City property of an OU object. The LDAP display name ( ldapDisplayName ) of this property is l.
    .PARAMETER Clear
        Specifies an array of object properties that are cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Country
        Specifies the country or region code. This parameter sets the Country property of an OU object. The LDAP display name ( ldapDisplayName ) of this property is c. This value is not used by Windows 2000.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the OU object. The LDAP display name ( ldapDisplayName ) for this property is description.
    .PARAMETER DisplayName
        Specifies the display name of the object. This parameter sets the DisplayName property of the OU object. The LDAP display name ( ldapDisplayName ) for this property is displayName.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        Derived types, such as the following are also accepted:
        - Microsoft.ActiveDirectory.Management.ADGroup - Microsoft.ActiveDirectory.Management.ADUser - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADServiceAccount - Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy - Microsoft.ActiveDirectory.Management.ADDomain
    .PARAMETER Instance
        Specifies a modified copy of an OU object to use to update the actual Active Directory OU object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.
        The Instance parameter can only update organizational unit objects that have been retrieved by using the Get-ADOrganizationalUnit cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.
    .PARAMETER ManagedBy
        Specifies the user or group that manages the object by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        This parameter sets the Active Directory attribute with an LDAP display name of managedBy.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and when a default value can be determined, no further rules are evaluated.
        In AD DS environments, a default value for Partition are set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In AD LDS environments, a default value for Partition will be set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter does not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER PostalCode
        Specifies the postal code or zip code. This parameter sets the PostalCode property of an OU object. The LDAP display name ( ldapDisplayName ) of this property is postalCode.
    .PARAMETER ProtectedFromAccidentalDeletion
        Specifies whether to prevent the object from being deleted. When this property is set to $True, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Remove
        Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is:
        `-Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values, and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Replace @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER State
        Specifies the state or province. This parameter sets the State property of an OU object. The LDAP display name ( ldapDisplayName ) of this property is st.
    .PARAMETER StreetAddress
        Specifies the street address. This parameter sets the StreetAddress property of an OU object. The LDAP display name ( ldapDisplayName ) of this property is street.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219351')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # City
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("City", [System.String], $attributes)
        $parameters.Add("City", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # Country
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Country", [System.String], $attributes)
        $parameters.Add("Country", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # DisplayName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisplayName", [System.String], $attributes)
        $parameters.Add("DisplayName", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADOrganizationalUnit], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADOrganizationalUnit], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # ManagedBy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ManagedBy", [Microsoft.ActiveDirectory.Management.ADPrincipal], $attributes)
        $parameters.Add("ManagedBy", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # PostalCode
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PostalCode", [System.String], $attributes)
        $parameters.Add("PostalCode", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # State
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("State", [System.String], $attributes)
        $parameters.Add("State", $parameter)
        
        # StreetAddress
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("StreetAddress", [System.String], $attributes)
        $parameters.Add("StreetAddress", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADReplicationConnection {
    <#
    .SYNOPSIS
        Sets properties on Active Directory replication connections.
    .PARAMETER Add
        Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Clear
        Specifies an array of object properties that are cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Credential
        Specifies a user account that has permission to perform this action. The default is the current user.
        Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet. If you type a user name, you are prompted for a password.
        This parameter is not supported by any providers installed with Windows PowerShell.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        Derived types, such as the following are also accepted:
        - Microsoft.ActiveDirectory.Management.ADGroup - Microsoft.ActiveDirectory.Management.ADUser - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADServiceAccount - Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy - Microsoft.ActiveDirectory.Management.ADDomain
    .PARAMETER Instance
        Specifies an instance of an Active Directory object to use as a template for a new Active Directory object.
        You can use an instance of an existing Active Directory object as a template or you can construct a new Active Directory object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing Active Directory object as a template for a new object. To retrieve an instance of an existing Active Directory object, use a cmdlet such as Get-ADObject . Then provide this object to the Instance parameter of the New-ADObject cmdlet to create a new Active Directory object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADObject and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADObject cmdlet to create the new Active Directory object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Remove
        Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is:
        `-Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the parameters are applied in the following sequence:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER ReplicateFromDirectoryServer
        Specifies the domain controller to use as a source for this replication connection.
    .PARAMETER ReplicationSchedule
        Specifies the schedule on which the source server is available for replication.
        Replication occurs at intervals that administrators can schedule so that use of expensive WAN links is managed. Use this parameter to specify the replication intervals. For more information on how replication topology works, see How Active Directory Replication Topology Works (https://go.microsoft.com/fwlink/?LinkId=223932)on TechNet.
        To specify the replication schedule:
        1. Create a new Active Directory schedule object.     For example:
        `$Schedule = New-Object -TypeName System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule;`
        2. Edit the schedule on the Active Directory schedule object.     For example:
        `$Schedule.ResetSchedule();`
        `$Schedule.SetDailySchedule("Twenty","Zero","TwentyTwo","Thirty");`
        3. Using the Active Directory schedule object, set the replication schedule of the connection.
        `Set-ADReplicationConnection "5f98e288-19e0-47a0-9677-57f05ed54f6b" -ReplicationSchedule $Schedule.`
        For more information on the ActiveDirectorySchedule class, see ActiveDirectorySchedule Class (https://go.microsoft.com/fwlink/?LinkId=223933)on the Microsoft Developer Network.
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Directory Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216413')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADReplicationConnection], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADReplicationConnection], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # ReplicateFromDirectoryServer
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ReplicateFromDirectoryServer", [Microsoft.ActiveDirectory.Management.ADDirectoryServer], $attributes)
        $parameters.Add("ReplicateFromDirectoryServer", $parameter)
        
        # ReplicationSchedule
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ReplicationSchedule", [System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule], $attributes)
        $parameters.Add("ReplicationSchedule", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADReplicationSite {
    <#
    .SYNOPSIS
        Sets the replication properties for an Active Directory site.
    .PARAMETER Add
        Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER AutomaticInterSiteTopologyGenerationEnabled
        Indicates whether the cmdlet prevents the Knowledge Consistency Checker (KCC) that functions as the intersite topology generator (ISTG) from generating connections for intersite replication. Use this option when you want to create manual intersite connections (disable the ISTG) but retain the KCC to generate intrasite connections.
    .PARAMETER AutomaticTopologyGenerationEnabled
        Indicates whether to enable automatic topology generation. When enabled, prevents the KCC from generating intrasite connections on all servers in the site. Disable this option if you use manual connections and do not want the KCC to build connections automatically.
    .PARAMETER Clear
        Specifies an array of object properties that are cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Credential
        Specifies a user account that has permission to perform this action. The default is the current user.
        Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet. If you type a user name, you will be prompted for a password.
        This parameter is not supported by any providers installed with Windows PowerShell.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name ( ldapDisplayName ) for this property is description.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A connection name
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Instance
        Specifies an instance of a site object to use as a template for a new site object.
        You can use an instance of an existing site object as a template or you can construct a new site object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing site object as a template for a new object. To retrieve an instance of an existing site object, use a cmdlet such as Get-ADReplicationSite . Then provide this object to the Instance parameter of the New-ADReplicationSite cmdlet to create a new site object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADReplicationSite and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADReplicationSite cmdlet to create the new Active Directory object.
        Note:  Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.
    .PARAMETER InterSiteTopologyGenerator
        Specifies the server acting as the inter-site topology generator for this site.
    .PARAMETER ManagedBy
        Specifies the user or group that manages the object by providing one of the following property values:
        - Distinguished name
        - GUID (objectGUID)
        - Security identifier (objectSid)
        - SAM account name (sAMAccountName)
        Note: The identifier in parentheses is the LDAP display name for the property.
        This parameter sets the Active Directory attribute with an LDAP display name of managedBy.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ProtectedFromAccidentalDeletion
        Specifies whether to prevent the object from being deleted. When this property is set to $True, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER RedundantServerTopologyEnabled
        Indicates whether the cmdlet creates redundant connections between sites before a failure takes place. When enabled, disables KCC failover. Requires that automatic detection of failed connections also be disabled (+IS_TOPL_DETECT_STALE_DISABLED).
    .PARAMETER Remove
        Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is:
        `-Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the parameters are applied in the following sequence:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the parameters are applied in the following sequence:
        - Remove - Add - Replace - Clear
    .PARAMETER ReplicationSchedule
        Specifies the default replication schedule for connections within this site (intra-site replication).
    .PARAMETER ScheduleHashingEnabled
        Indicates whether the cmdlet spreads replication start times randomly across the entire schedule interval rather than just the first quarter of the interval.
    .PARAMETER Server
        Specifies the Active Directory Domain Services (AD DS) instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services (AD LDS), AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER TopologyCleanupEnabled
        Indicates whether the cmdlet enables topology cleanup. When enabled,  this optional parameter prevents the Knowledge Consistency Checker(KCC) from removing connection objects that it does not need. Disable this option if you want to take responsibility for removing old redundant connections. Alternatively, to control or augment the topology, you can use manual connections, which the KCC does not delete.
    .PARAMETER TopologyDetectStaleEnabled
        Indicates whether the cmdlet enables topology detect stale. This parameter option prevents the Knowledge Consistency Checker (KCC) from excluding servers that are unreachable from the topology; that is, the KCC does use an alternate server to reroute replication. Use this option only if network communication is very unstable and brief outages are expected.
    .PARAMETER TopologyMinimumHopsEnabled
        Indicates whether the cmdlet enables topology minimum hops. When enabled, this parameter prevents the Knowledge Consistency Checker (KCC) from generating optimizing connections in the ring topology of intrasite replication. Optimizing connections reduce the replication latency in the site and disabling them is not recommended.
    .PARAMETER UniversalGroupCachingEnabled
        Indicates whether the cmdlet enables universal group caching. If this parameter is true, it indicates this site caches universal groups, which are those groups cached on global catalog (GC) servers. It can be useful in sites with no GC servers available locally.
    .PARAMETER UniversalGroupCachingRefreshSite
        Specifies the name of a site. If universal group caching is enabled, this parameter sets the name of the site from which the cache is pulled.
    .PARAMETER WindowsServer2000BridgeheadSelectionMethodEnabled
        Indicates whether the cmdlet implements the Windows 2000 Server method of selecting a single bridgehead server per directory partition and transport.
    .PARAMETER WindowsServer2000KCCISTGSelectionBehaviorEnabled
        Indicates whether the cmdlet implements the Windows 2000 Server method of Intersite Topology Generator (ISTG) selection. By default, it is disabled.
    .PARAMETER WindowsServer2003KCCBehaviorEnabled
        Indicates whether the cmdlet implements Knowledge Consistency Checker (KCC) operation that is consistent with Windows Server 2003 forest functional level. This option can be set if all domain controllers in the site are running Windows Server 2003.
    .PARAMETER WindowsServer2003KCCIgnoreScheduleEnabled
        Indicates whether to ignore schedules. When the forest functional level Windows Server 2003 or Windows Server 2003 interim is in effect, provides KCC control of the ability to ignore schedules (replication occurs at the designated intervals and is always available).
    .PARAMETER WindowsServer2003KCCSiteLinkBridgingEnabled
        Indicates whether the cmdlet enables site link bridging. When the forest functional level Windows Server 2003 or Windows Server 2003 interim is in effect, provides Knowledge Consistency Checker (KCC) control of the ability to enable or disable site link bridging.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216414')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # AutomaticInterSiteTopologyGenerationEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AutomaticInterSiteTopologyGenerationEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("AutomaticInterSiteTopologyGenerationEnabled", $parameter)
        
        # AutomaticTopologyGenerationEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AutomaticTopologyGenerationEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("AutomaticTopologyGenerationEnabled", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADReplicationSite], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADReplicationSite], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # InterSiteTopologyGenerator
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("InterSiteTopologyGenerator", [Microsoft.ActiveDirectory.Management.ADDirectoryServer], $attributes)
        $parameters.Add("InterSiteTopologyGenerator", $parameter)
        
        # ManagedBy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ManagedBy", [Microsoft.ActiveDirectory.Management.ADPrincipal], $attributes)
        $parameters.Add("ManagedBy", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # RedundantServerTopologyEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("RedundantServerTopologyEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("RedundantServerTopologyEnabled", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # ReplicationSchedule
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ReplicationSchedule", [System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule], $attributes)
        $parameters.Add("ReplicationSchedule", $parameter)
        
        # ScheduleHashingEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ScheduleHashingEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ScheduleHashingEnabled", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # TopologyCleanupEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TopologyCleanupEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("TopologyCleanupEnabled", $parameter)
        
        # TopologyDetectStaleEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TopologyDetectStaleEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("TopologyDetectStaleEnabled", $parameter)
        
        # TopologyMinimumHopsEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TopologyMinimumHopsEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("TopologyMinimumHopsEnabled", $parameter)
        
        # UniversalGroupCachingEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UniversalGroupCachingEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("UniversalGroupCachingEnabled", $parameter)
        
        # UniversalGroupCachingRefreshSite
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UniversalGroupCachingRefreshSite", [Microsoft.ActiveDirectory.Management.ADReplicationSite], $attributes)
        $parameters.Add("UniversalGroupCachingRefreshSite", $parameter)
        
        # WindowsServer2000BridgeheadSelectionMethodEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("WindowsServer2000BridgeheadSelectionMethodEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("WindowsServer2000BridgeheadSelectionMethodEnabled", $parameter)
        
        # WindowsServer2000KCCISTGSelectionBehaviorEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("WindowsServer2000KCCISTGSelectionBehaviorEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("WindowsServer2000KCCISTGSelectionBehaviorEnabled", $parameter)
        
        # WindowsServer2003KCCBehaviorEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("WindowsServer2003KCCBehaviorEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("WindowsServer2003KCCBehaviorEnabled", $parameter)
        
        # WindowsServer2003KCCIgnoreScheduleEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("WindowsServer2003KCCIgnoreScheduleEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("WindowsServer2003KCCIgnoreScheduleEnabled", $parameter)
        
        # WindowsServer2003KCCSiteLinkBridgingEnabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("WindowsServer2003KCCSiteLinkBridgingEnabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("WindowsServer2003KCCSiteLinkBridgingEnabled", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADReplicationSiteLink {
    <#
    .SYNOPSIS
        Sets the properties for an Active Directory site link.
    .PARAMETER Add
        Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the Lightweight Directory Access Protocol (LDAP) display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Clear
        Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Cost
        Specifies the cost to be placed on the site link. For more information on determining the cost, see Determining the Cost (https://go.microsoft.com/fwlink/?LinkId=221871)in the TechNet Library: http://go.microsoft.com/fwlink/?LinkId=221871.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP display name ( ldapDisplayName ) for this property is description.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute.  The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Instance
        Specifies an instance of a site link object to use as a template for a new site link object.
        You can use an instance of an existing site link object as a template or you can construct a new site link object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing site link object as a template for a new object. To retrieve an instance of an existing site link object, use a cmdlet such as Get-ADReplicationSiteLink . Then provide this object to the Instance parameter of the New-ADReplicationSiteLink cmdlet to create a new site link object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADReplicationSiteLink and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADReplicationSiteLink cmdlet to create the new Active Directory object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Remove
        Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is:
        `-Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the parameters will be applied in the following sequence:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the parameters will be applied in the following sequence:
        - Remove - Add - Replace - Clear
    .PARAMETER ReplicationFrequencyInMinutes
        Species the frequency, in minutes, for which replication will occur where this site link is in use between sites. Active Directory preserves bandwidth between sites by minimizing the frequency of replication and by allowing you to schedule the availability of site links for replication. By default, intersite replication across each site link occurs every 180 minutes (3 hours). You can adjust this frequency to match your specific needs. Be aware that increasing this frequency increases the amount of bandwidth used by replication.
    .PARAMETER ReplicationSchedule
        Specifies the default replication schedule for any connections within this site link (intra-site replication). This allows you to schedule the availability of site links for use by replication. By default, a site link is available to carry replication traffic 24 hours a day, 7 days a week. You can limit this schedule to specific days of the week and times of day. You can, for example, schedule intersite replication so that it only occurs after normal business hours.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
        Domain name values:
        - Fully qualified domain name (FQDN)
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
        - By using Server value from objects passed through the pipeline.  - By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
        - By using the domain of the computer running PowerShell.
    .PARAMETER SitesIncluded
        Specifies the list of sites included in the site link. For Set-ADReplicationSiteLink operations, you can add or include new sites within an existing site link by specifying them using this parameter. You do not have to specify all previously listed sites already within this link.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216415')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # Cost
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Cost", [System.Nullable`1[System.Int32]], $attributes)
        $parameters.Add("Cost", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADReplicationSiteLink], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADReplicationSiteLink], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # ReplicationFrequencyInMinutes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ReplicationFrequencyInMinutes", [System.Int32], $attributes)
        $parameters.Add("ReplicationFrequencyInMinutes", $parameter)
        
        # ReplicationSchedule
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ReplicationSchedule", [System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule], $attributes)
        $parameters.Add("ReplicationSchedule", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # SitesIncluded
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateSetOperationsHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SitesIncluded", [System.Collections.Hashtable], $attributes)
        $parameters.Add("SitesIncluded", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADReplicationSiteLinkBridge {
    <#
    .SYNOPSIS
        Sets the properties of a replication site link bridge in Active Directory.
    .PARAMETER Add
        Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the Lightweight Directory Access Protocol (LDAP) display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Clear
        Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name ( ldapDisplayName ) for this property is description.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Instance
        Specifies an instance of a site link bridge object to use as a template for a new site link bridge object.
        You can use an instance of an existing site link bridge object as a template or you can construct a new site link bridge object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing site link bridge object as a template for a new object. To retrieve an instance of an existing site link bridge object, use a cmdlet such as Get-ADReplicationSiteLinkBridge . Then provide this object to the Instance parameter of the New-ADReplicationSiteLinkBridge cmdlet to create a new site link bridge object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADReplicationSiteLinkBridge and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADReplicationSiteLinkBridge cmdlet to create the new Active Directory object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Remove
        Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is:
        `-Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the parameters will be applied in the following sequence:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the parameters will be applied in the following sequence:
        - Remove - Add - Replace - Clear
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER SiteLinksIncluded
        Specifies the list of site links that are included in this site link bridge. Accepted values for this parameter are the distinguished name (DN), a GUID, or the name of a site link.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216416')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADReplicationSiteLinkBridge], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADReplicationSiteLinkBridge], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # SiteLinksIncluded
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateSetOperationsHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SiteLinksIncluded", [System.Collections.Hashtable], $attributes)
        $parameters.Add("SiteLinksIncluded", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADReplicationSubnet {
    <#
    .SYNOPSIS
        Sets the properties of an Active Directory replication subnet object.
    .PARAMETER Add
        Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Clear
        Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Credential
        Specifies a user account that has permission to perform this action. The default is the current user.
        Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential (https://go.microsoft.com/fwlink/?LinkID=293936)cmdlet. If you type a user name, you will be prompted for a password.
        This parameter is not supported by any providers installed with Windows PowerShell.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name ( ldapDisplayName ) for this property is description.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Instance
        Specifies an instance of a subnet object to use as a template for a new subnet object.
        You can use an instance of an existing subnet object as a template or you can construct a new subnet object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing subnet object as a template for a new object. To retrieve an instance of an existing subnet object, use a cmdlet such as Get-ADReplicationSubnet . Then provide this object to the Instance parameter of the New-ADReplicationSubnet cmdlet to create a new subnet object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADReplicationSubnet and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADReplicationSubnet cmdlet to create the new subnet object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.
    .PARAMETER Location
        Specifies a string that can be used to describe the physical location of this subnet. This value may be displayed or made visible when the subnet object appears in other Active Directory administrative tools.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Remove
        Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is:
        `-Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Server
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Site
        Specifies the site associated with this subnet.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216417')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADReplicationSubnet], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADReplicationSubnet], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # Location
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Location", [System.String], $attributes)
        $parameters.Add("Location", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # Site
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Site", [Microsoft.ActiveDirectory.Management.ADReplicationSite], $attributes)
        $parameters.Add("Site", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADResourceProperty {
    <#
    .SYNOPSIS
        Modifies a resource property in Active Directory.
    .PARAMETER Add
        Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the Lightweight Directory Access Protocol (LDAP) display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AppliesToResourceTypes
        Specifies the list of resource types that this property applies to. For Set-ADResourceProperty operations, you can add or include new resource types within an existing property by specifying them using this parameter. You do not have to specify all previously listed resource types already within this property.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Clear
        Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name ( ldapDisplayName ) for this property is description.
    .PARAMETER DisplayName
        Displays the name of the resource property. The display name of the resource property must be unique.
    .PARAMETER Enabled
        Specifies whether the resource property is enabled.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Instance
        Specifies an instance of a resource property object to use as a template for a new resource property object.
        You can use an instance of an existing resource property object as a template or you can construct a new resource property object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing resource property object as a template for a new object. To retrieve an instance of an existing resource property object, use a cmdlet such as Get-ADResourceProperty . Then provide this object to the Instance parameter of the New-ADResourceProperty cmdlet to create a new resource property object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADResourceProperty and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADResourceProperty cmdlet to create the new resource property object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set raises an error.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ProtectedFromAccidentalDeletion
        Specifies whether to prevent the object from being deleted. When this property is set to $True, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Remove
        Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is:
        `-Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Server
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER SharesValuesWith
        Specifies a reference resource property. Reference resource properties do not provide their own suggested values, but rather use the suggested values from the claim type object specified in this parameter. This enables the resource property to be always valid for comparisons with the referred claim type in a central access rule.
    .PARAMETER SuggestedValues
        Specifies one or more suggested values for the resource property. An application may choose to present this list of suggested values for the user to choose from. When RestrictValues is set to $True, the application should restrict the user to pick values from this list only.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216418')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AppliesToResourceTypes
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateSetOperationsHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AppliesToResourceTypes", [System.Collections.Hashtable], $attributes)
        $parameters.Add("AppliesToResourceTypes", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # DisplayName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisplayName", [System.String], $attributes)
        $parameters.Add("DisplayName", $parameter)
        
        # Enabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Enabled", [System.Boolean], $attributes)
        $parameters.Add("Enabled", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADResourceProperty], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADResourceProperty], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # SharesValuesWith
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SharesValuesWith", [Microsoft.ActiveDirectory.Management.ADClaimType], $attributes)
        $parameters.Add("SharesValuesWith", $parameter)
        
        # SuggestedValues
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SuggestedValues", [Microsoft.ActiveDirectory.Management.ADSuggestedValueEntry[]], $attributes)
        $parameters.Add("SuggestedValues", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADResourcePropertyList {
    <#
    .SYNOPSIS
        Modifies a resource property list in Active Directory.
    .PARAMETER Add
        Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the Lightweight Directory Access Protocol (LDAP) display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Clear
        Specifies an array of object properties that will be cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP Display Name ( ldapDisplayName ) for this property is description.
    .PARAMETER Identity
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Instance
        Specifies an instance of a resource property list object to use as a template for a new resource property list object.
        You can use an instance of an existing resource property list object as a template or you can construct a resource property list object by using the Windows PowerShell command line or by using a script.
        Method 1: Use an existing resource property list object as a template for a new object. To retrieve an instance of an existing resource property list object, use a cmdlet such as Get-ADResourcePropertyList . Then provide this object to the Instance parameter of the New-ADResourcePropertyList cmdlet to create a new resource property list object. You can override property values of the new object by setting the appropriate parameters.
        Method 2: Create a new ADResourcePropertyList and set the property values by using the Windows PowerShell command line interface. Then pass this object to the Instance parameter of the New-ADResourcePropertyList cmdlet to create the new resource property list object.
        Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER ProtectedFromAccidentalDeletion
        Specifies whether to prevent the object from being deleted. When this property is set to true, you cannot delete the corresponding object without changing the value of the property. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Remove
        Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is:
        `-Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the parameters will be applied in the following sequence:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Replace @{Attribute1LDAPDisplayName=value[],   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Server
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=216419')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADResourcePropertyList], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADResourcePropertyList], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # ProtectedFromAccidentalDeletion
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProtectedFromAccidentalDeletion", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ProtectedFromAccidentalDeletion", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADServiceAccount {
    <#
    .SYNOPSIS
        Modifies an Active Directory managed service account or group managed service account object.
    .PARAMETER AccountExpirationDate
        Specifies the expiration date for an account. This parameter sets the AccountExpirationDate property of an account object. The Lightweight Directory Access Protocol (LDAP) display name ( ldapDisplayName ) for this property is accountExpires.
        Use the DateTime syntax when you specify this parameter. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date.
    .PARAMETER AccountNotDelegated
        Indicates whether the security context of the user is delegated to a service. When this parameter is set to true, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute.
    .PARAMETER Add
        Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AuthenticationPolicy
        Specifies an Active Directory Domain Services (AD DS) authentication policy object. Specify the authentication policy object in one of the following formats:
        - Distinguished name
        - GUID
        - Name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER AuthenticationPolicySilo
        Specifies an AD DS authentication policy silo object. Specify the authentication policy silo object in one of the following formats:
        - Distinguished name
        - GUID
        - Name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Certificates
        Specifies an array of certificates. The cmdlet modifies the DER-encoded X.509v3 certificates of the account. These certificates include the public key certificates issued to this account by the Microsoft Certificate Service. This parameter sets the Certificates property of the account object. The Lightweight Directory Access Protocol (LDAP) display name ( ldapDisplayName ) for this property is userCertificate.
        To add values:
        `-Certificates @{Add=value1,value2,...}`
        To remove values:
        `-Certificates @{Remove=value3,value4,...}`
        To replace values:
        `-Certificates @{Replace=value1,value2,...}`
        To clear all values:
        `-Certificates $Null`
        You can specify more than one operation by using a list separated by semicolons. For example, use the following syntax to add and remove Certificates values:
        `-Certificates @{Add=value1,value2,...};@{Remove=value3,value4,...}`
        The operators are applied in the following sequence:
        - Remove
        - Add
        - Replace
    .PARAMETER Clear
        Specifies an array of object properties that are cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER CompoundIdentitySupported
        Indicates whether an account supports Kerberos service tickets which includes the authorization data for the user's device. This value sets the compound identity supported flag of the Active Directory msDS-SupportedEncryptionTypes attribute.
        Warning: Domain-joined Windows systems and services such as clustering manage their own msDS-SupportedEncryptionTypes attribute. Therefore any changes to the flag on the msDS-SupportedEncryptionTypes attribute will be overwritten by the service or system which manages the setting.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the object. The LDAP display name ( ldapDisplayName ) for this property is description.
    .PARAMETER DisplayName
        Specifies the display name of the object. This parameter sets the DisplayName property of the object. The LDAP display name ( ldapDisplayName ) for this property is displayName.
    .PARAMETER DNSHostName
        Specifies the DNS host name.
    .PARAMETER Enabled
        Specifies if an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute.
    .PARAMETER HomePage
        Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP display name ( ldapDisplayName ) for this property is wWWHomePage.
    .PARAMETER Identity
        Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Instance
        Specifies a modified copy of a service account object to use to update the actual Active Directory service account object. When this parameter is used, any modifications made to the modified copy of the object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.
        The Instance parameter can only update service account objects that have been retrieved by using the Get-ADServiceAccount cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set properties on the object.
    .PARAMETER KerberosEncryptionType
        Specifies whether an account supports Kerberos encryption types that are used when creating service tickets. This value sets the encryption types supported flags of the Active Directory msDS-SupportedEncryptionTypes attribute.  The acceptable values for this parameter are:
        - None
        - DES
        - RC4
        - AES128
        - AES256
        None removes all encryption types from the account, which may result in the KDC being unable to issue service tickets for services using the account.
        DES is a weak encryption type that is not supported by default since Windows 7 and Windows Server 2008 R2.
        Warning: Domain-joined Windows systems and services such as clustering manage their own msDS-SupportedEncryptionTypes attribute. Therefore any changes to the flag on the msDS-SupportedEncryptionTypes attribute are overwritten by the service or system that manages the setting.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In AD LDS environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition will be set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER PrincipalsAllowedToDelegateToAccount
        Specifies the accounts which can act on the behalf of users to services running as this Managed Service Account or Group Managed Service Account. This parameter sets the msDS-AllowedToActOnBehalfOfOtherIdentity attribute of the object.
    .PARAMETER PrincipalsAllowedToRetrieveManagedPassword
        Specifies the membership policy for systems which can use a group managed service account. For a service to run under a group managed service account, the system must be in the membership policy of the account. This parameter sets the msDS-GroupMSAMembership attribute of a group managed service account object. This parameter should be set to the principals allowed to use this group managed service account.
    .PARAMETER Remove
        Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can remove more than one property by specifying a semicolon-separated list. The format for this parameter is:
        `-Remove @{Attribute1LDAPDisplayName=value[];   Attribute2LDAPDisplayName=value[]}`
        When you use the Add , Remove , Replace , and Clear parameters together, the parameters will be applied in the following sequence:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values, and more than one property by separating them using a semicolon. The format for this parameter is:
        `-Replace @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER SamAccountName
        Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name ( ldapDisplayName ) for this property is sAMAccountName.
        Note: If the string value provided is not terminated with a $ character, the system adds one if needed.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.
        Domain name values:
        - Fully qualified domain name (FQDN)
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for the Server parameter is determined by one of the following methods in the order that they are listed:
        - By using Server value from objects passed through the pipeline.  - By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.
        - By using the domain of the computer running PowerShell.
    .PARAMETER ServicePrincipalNames
        Specifies the service principal names for the account. This parameter sets the ServicePrincipalNames property of the account. The LDAP display name ( ldapDisplayName ) for this property is servicePrincipalName. This parameter uses the following syntax to add, remove, replace, or clear service principal name values.
        To add values:
        `-ServicePrincipalNames @{Add=value1,value2,...}`
        To remove values:
        `-ServicePrincipalNames @{Remove=value3,value4,...}`
        To replace values:
        `-ServicePrincipalNames @{Replace=value1,value2,...}`
        To clear all values:
        `-ServicePrincipalNames $Null`
        You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove service principal names.
        `@{Add=value1,value2,...};@{Remove=value3,value4,...}`
        The operators are applied in the following sequence:
        - Remove
        - Add
        - Replace
        The following example shows how to add and remove service principal names:
        -ServicePrincipalNames @{Add="SQLservice\accounting.corp.contoso.com:1456"};{Remove="SQLservice\finance.corp.contoso.com:1456"}
    .PARAMETER TrustedForDelegation
        Indicates whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301404')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AccountExpirationDate
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountExpirationDate", [System.Nullable`1[System.DateTime]], $attributes)
        $parameters.Add("AccountExpirationDate", $parameter)
        
        # AccountNotDelegated
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountNotDelegated", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("AccountNotDelegated", $parameter)
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AuthenticationPolicy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthenticationPolicy", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicy], $attributes)
        $parameters.Add("AuthenticationPolicy", $parameter)
        
        # AuthenticationPolicySilo
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthenticationPolicySilo", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicySilo], $attributes)
        $parameters.Add("AuthenticationPolicySilo", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Certificates
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Certificates", [System.String[]], $attributes)
        $parameters.Add("Certificates", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # CompoundIdentitySupported
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("CompoundIdentitySupported", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("CompoundIdentitySupported", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # DisplayName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisplayName", [System.String], $attributes)
        $parameters.Add("DisplayName", $parameter)
        
        # DNSHostName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DNSHostName", [System.String], $attributes)
        $parameters.Add("DNSHostName", $parameter)
        
        # Enabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Enabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("Enabled", $parameter)
        
        # HomePage
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("HomePage", [System.String], $attributes)
        $parameters.Add("HomePage", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADServiceAccount], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADServiceAccount], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # KerberosEncryptionType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("KerberosEncryptionType", [Microsoft.ActiveDirectory.Management.ADKerberosEncryptionType], $attributes)
        $parameters.Add("KerberosEncryptionType", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # PrincipalsAllowedToDelegateToAccount
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PrincipalsAllowedToDelegateToAccount", [Microsoft.ActiveDirectory.Management.ADPrincipal[]], $attributes)
        $parameters.Add("PrincipalsAllowedToDelegateToAccount", $parameter)
        
        # PrincipalsAllowedToRetrieveManagedPassword
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PrincipalsAllowedToRetrieveManagedPassword", [Microsoft.ActiveDirectory.Management.ADPrincipal[]], $attributes)
        $parameters.Add("PrincipalsAllowedToRetrieveManagedPassword", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # SamAccountName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SamAccountName", [System.String], $attributes)
        $parameters.Add("SamAccountName", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # ServicePrincipalNames
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateSetOperationsHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ServicePrincipalNames", [System.Collections.Hashtable], $attributes)
        $parameters.Add("ServicePrincipalNames", $parameter)
        
        # TrustedForDelegation
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TrustedForDelegation", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("TrustedForDelegation", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Set-ADUser {
    <#
    .SYNOPSIS
        Modifies an Active Directory user.
    .PARAMETER AccountExpirationDate
        Specifies the expiration date for an account. This parameter sets the AccountExpirationDate property of an account object. The LDAP display name (ldapDisplayName) for this property is accountExpires.
        Use the DateTime syntax when you specify this parameter. Time is assumed to be local time unless otherwise specified. When a time value is not specified, the time is assumed to 12:00:00 AM local time. When a date is not specified, the date is assumed to be the current date.
    .PARAMETER AccountNotDelegated
        Indicates whether the security context of the user is delegated to a service. When this parameter is set to $True, the security context of the account is not delegated to a service even when the service account is set as trusted for Kerberos delegation. This parameter sets the AccountNotDelegated property for an Active Directory account. This parameter also sets the ADS_UF_NOT_DELEGATED flag of the Active Directory User Account Control (UAC) attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Add
        Specifies values to add to an object property. Use this parameter to add one or more values to a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values, and more than one property by separating them using a semicolon. If any of the properties have a null or empty value the cmdlet will return an error. The format for this parameter is:
        `-Add @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER AllowReversiblePasswordEncryption
        Indicates whether reversible password encryption is allowed for the account. This parameter sets the AllowReversiblePasswordEncryption property of the account. This parameter also sets the ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED flag of the Active Directory User Account Control (UAC) attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER AuthenticationPolicy
        Specifies an Active Directory Domain Services authentication policy object. Specify the authentication policy object in one of the following formats:
        - Distinguished name
        - GUID
        - Name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER AuthenticationPolicySilo
        Specifies an Active Directory Domain Services authentication policy silo object. Specify the authentication policy silo object in one of the following formats:
        - Distinguished name
        - GUID
        - Name
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        The cmdlet searches the default naming context or partition to find the object. If the cmdlet finds two or more objects, the cmdlet returns a non-terminating error.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER CannotChangePassword
        Indicates whether the account password can be changed. This parameter sets the CannotChangePassword property of an account. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Certificates
        Specifies an array of certificates. The cmdlet modifies the DER-encoded X.509v3 certificates of the account. These certificates include the public key certificates issued to this account by the Microsoft Certificate Service. This parameter sets the Certificates property of the account object. The Lightweight Directory Access Protocol (LDAP) display name ( ldapDisplayName ) for this property is userCertificate.
        To add values:
        `-Certificates @{Add=value1,value2,...}`
        To remove values:
        `-Certificates @{Remove=value3,value4,...}`
        To replace values:
        `-Certificates @{Replace=value1,value2,...}`
        To clear all values:
        `-Certificates $Null`
        You can specify more than one operation by using a list separated by semicolons. For example, use the following syntax to add and remove Certificates values:
        `-Certificates @{Add=value1;Remove=value3}`
        The operators are applied in the following sequence:
        - Remove
        - Add
        - Replace
    .PARAMETER ChangePasswordAtLogon
        Indicates whether a password must be changed during the next logon attempt. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER City
        Specifies the user's town or city. This parameter sets the City property of a user object. The LDAP display name ( ldapDisplayName ) of this property is l.
    .PARAMETER Clear
        Specifies an array of object properties that are cleared in the directory. Use this parameter to clear one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can modify more than one property by specifying a comma-separated list. The format for this parameter is:
        `-Clear Attribute1LDAPDisplayName, Attribute2LDAPDisplayName`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations are performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER Company
        Specifies the user's company. This parameter sets the Company property of a user object. The LDAP display name ( ldapDisplayName ) of this property is company.
    .PARAMETER CompoundIdentitySupported
        Indicates whether an account supports Kerberos service tickets which includes the authorization data for the user's device. This value sets the compound identity supported flag of the Active Directory msDS-SupportedEncryptionTypes attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
        > [!WARNING] > Domain-joined Windows systems and services such as clustering manage their own > msDS-SupportedEncryptionTypes attribute. Therefore any changes to the flag on the > msDS-SupportedEncryptionTypes attribute are overwritten by the service or system that manages > the setting.
    .PARAMETER Country
        Specifies the country or region code for the user's language of choice. This parameter sets the Country property of a user object. The LDAP display name ( ldapDisplayName ) of this property is c. This value is not used by Windows 2000.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as `User1` or `Domain01\User01` or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the `Get-Credential` cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.
    .PARAMETER Department
        Specifies the user's department. This parameter sets the Department property of a user object. The LDAP display name ( ldapDisplayName ) of this property is department.
    .PARAMETER Description
        Specifies a description of the object. This parameter sets the value of the Description property for the user object. The LDAP display name ( ldapDisplayName ) for this property is description.
    .PARAMETER DisplayName
        Specifies the display name of the object. This parameter sets the DisplayName property of the user object. The LDAP display name ( ldapDisplayName ) for this property is displayName.
    .PARAMETER Division
        Specifies the user's division. This parameter sets the Division property of a user object. The LDAP display name ( ldapDisplayName ) of this property is division.
    .PARAMETER EmailAddress
        Specifies the user's e-mail address. This parameter sets the EmailAddress property of a user object. The LDAP display name ( ldapDisplayName ) of this property is mail.
    .PARAMETER EmployeeID
        Specifies the user's employee ID. This parameter sets the EmployeeID property of a user object. The LDAP display name ( ldapDisplayName ) of this property is employeeID.
    .PARAMETER EmployeeNumber
        Specifies the user's employee number. This parameter sets the EmployeeNumber property of a user object. The LDAP display name ( ldapDisplayName ) of this property is employeeNumber.
    .PARAMETER Enabled
        Indicates whether an account is enabled. An enabled account requires a password. This parameter sets the Enabled property for an account object. This parameter also sets the ADS_UF_ACCOUNTDISABLE flag of the Active Directory User Account Control (UAC) attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER Fax
        Specifies the user's fax phone number. This parameter sets the Fax property of a user object. The LDAP display name ( ldapDisplayName ) of this property is facsimileTelephoneNumber.
    .PARAMETER GivenName
        Specifies the user's given name. This parameter sets the GivenName property of a user object. The LDAP display name ( ldapDisplayName ) of this property is givenName.
    .PARAMETER HomeDirectory
        Specifies a user's home directory. This parameter sets the HomeDirectory property of a user object. The LDAP display name ( ldapDisplayName ) for this property is homeDirectory.
    .PARAMETER HomeDrive
        Specifies a drive that is associated with the UNC path defined by the HomeDirectory property. The drive letter is specified as `<DriveLetter>`: where `<DriveLetter>` indicates the letter of the drive to associate. The `<DriveLetter>` must be a single, uppercase letter and the colon is required. This parameter sets the HomeDrive property of the user object. The LDAP display name ( ldapDisplayName ) for this property is homeDrive.
    .PARAMETER HomePage
        Specifies the URL of the home page of the object. This parameter sets the homePage property of an Active Directory object. The LDAP display name ( ldapDisplayName ) for this property is wWWHomePage.
    .PARAMETER HomePhone
        Specifies the user's home telephone number. This parameter sets the HomePhone property of a user. The LDAP display name ( ldapDisplayName ) of this property is homePhone.
    .PARAMETER Identity
        Specifies an Active Directory user object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID ( objectGUID ) - A security identifier ( objectSid ) - A SAM account name ( sAMAccountName )
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    .PARAMETER Initials
        Specifies the initials that represent part of a user's name. You can use this value for the user's middle initial. This parameter sets the Initials property of a user. The LDAP display name ( ldapDisplayName ) of this property is initials.
    .PARAMETER Instance
        Specifies an ADUser object that identifies the Active Directory user object that should be modified and the set of changes that should be made to that object. When this parameter is specified, any modifications made to the ADUser object are also made to the corresponding Active Directory object. The cmdlet only updates the object properties that have changed.
        The ADUser object specified as the value of the Instance parameter must have been retrieved by using the `Get-ADUser` cmdlet. When you specify the Instance parameter, you cannot specify other parameters that set individual properties on the object.
    .PARAMETER KerberosEncryptionType
        Specifies whether an account supports Kerberos encryption types which are used during creation of service tickets. This value sets the encryption types supported flags of the Active Directory msDS-SupportedEncryptionTypes attribute. The acceptable values for this parameter are:
        - `None`
        - `DES`
        - `RC4`
        - `AES128`
        - `AES256`
        `None` removes all encryption types from the account, resulting in the KDC being unable to issue service tickets for services using the account.
        DES is a weak encryption type that is not supported by default since Windows 7 and Windows Server 2008 R2.
        > [!WARNING] > Domain-joined Windows systems and services such as clustering manage their own > msDS-SupportedEncryptionTypes attribute. Therefore any changes to the flag on the > msDS-SupportedEncryptionTypes attribute are overwritten by the service or system that manages > the setting.
    .PARAMETER LogonWorkstations
        Specifies the computers that the user can access. To specify more than one computer, create a single comma-separated list. You can identify a computer by using the Security Account Manager (SAM) account name ( sAMAccountName ) or the DNS host name of the computer. The SAM account name is the same as the NetBIOS name of the computer.
        The LDAP display name ( ldapDisplayName ) for this property is userWorkStations.
    .PARAMETER Manager
        Specifies the user's manager. This parameter sets the Manager property of a user object. This parameter is set by providing one of the following property values. Note: The identifier in parentheses is the LDAP display name for the property. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID ( objectGUID ) - A security identifier ( objectSid ) - A SAM account name ( sAMAccountName )
        The LDAP display name ( ldapDisplayName ) of this property is manager.
    .PARAMETER MobilePhone
        Specifies the user's mobile phone number. This parameter sets the MobilePhone property of a user object. The LDAP display name ( ldapDisplayName ) of this property is mobile.
    .PARAMETER Office
        Specifies the location of the user's office or place of business. This parameter sets the Office property of a user object. The LDAP display name ( ldapDisplayName ) of this property is physicalDeliveryOfficeName.
    .PARAMETER OfficePhone
        Specifies the user's office telephone number. This parameter sets the OfficePhone property of a user object. The LDAP display name ( ldapDisplayName ) of this property is telephoneNumber.
    .PARAMETER Organization
        Specifies the user's organization. This parameter sets the Organization property of a user object. The LDAP display name ( ldapDisplayName ) of this property is o.
    .PARAMETER OtherName
        Specifies a name in addition to a user's given name and surname, such as the user's middle name. This parameter sets the OtherName property of a user object. The LDAP display name ( ldapDisplayName ) of this property is middleName.
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and when a default value can be determined, no further rules are evaluated.
        In AD DS environments, a default value for Partition are set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is   automatically generated from the current path in the drive. - If none of the previous cases apply, the default value of Partition is set to the default   partition or naming context of the target domain.
        In AD LDS environments, a default value for Partition will be set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is   automatically generated from the current path in the drive. - If the target AD LDS instance has a default naming context, the default value of Partition is   set to the default naming context. To specify a default naming context for an AD LDS environment,   set the msDS-defaultNamingContext property of the Active Directory directory service agent   object ( nTDSDSA ) for the AD LDS instance. - If none of the previous cases apply, the Partition parameter does not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER PasswordNeverExpires
        Specifies whether the password of an account can expire. This parameter sets the PasswordNeverExpires property of an account object. This parameter also sets the ADS_UF_DONT_EXPIRE_PASSWD flag of the Active Directory User Account Control attribute. The acceptable values for this parameter are:
        - `$False` or `0`
        - `$True` or `1`
        > [!NOTE] > This parameter cannot be set to `$True` or `1` for an account that also has the > ChangePasswordAtLogon property set to `$True`.
    .PARAMETER PasswordNotRequired
        Specifies whether the account requires a password. This parameter sets the PasswordNotRequired property of an account, such as a user or computer account. This parameter also sets the ADS_UF_PASSWD_NOTREQD flag of the Active Directory User Account Control attribute. The acceptable values for this parameter are:
        - `$False` or `0`
        - `$True` or `1`
    .PARAMETER POBox
        Specifies the user's post office box number. This parameter sets the POBox property of a user object. The LDAP display name ( ldapDisplayName ) of this property is postOfficeBox.
    .PARAMETER PostalCode
        Specifies the postal code or zip code. This parameter sets the PostalCode property of a user object. The LDAP display name ( ldapDisplayName ) of this property is `postalCode`.
    .PARAMETER PrincipalsAllowedToDelegateToAccount
        Specifies an array of principal objects. This parameter sets the msDS-AllowedToActOnBehalfOfOtherIdentity attribute of a computer account object.
    .PARAMETER ProfilePath
        Specifies a path to the user's profile. This value can be a local absolute path or a Universal Naming Convention (UNC) path. This parameter sets the ProfilePath property of the user object. The LDAP display name ( ldapDisplayName ) for this property is profilePath.
    .PARAMETER Remove
        Specifies that the cmdlet remove values of an object property. Use this parameter to remove one or more values of a property that cannot be modified using a cmdlet parameter. To remove an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values, and more than one property by separating them using a semicolon. If any of the properties have a null or empty value the cmdlet will return an error. The format for this parameter is:
        `-Remove @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the parameters are applied in the following sequence:
        - Remove - Add - Replace - Clear
    .PARAMETER Replace
        Specifies values for an object property that will replace the current values. Use this parameter to replace one or more values of a property that cannot be modified using a cmdlet parameter. To modify an object property, you must use the LDAP display name. You can specify multiple values to a property by specifying a comma-separated list of values, and more than one property by separating them using a semicolon. If any of the properties have a null or empty value the cmdlet will return an error. The format for this parameter is:
        `-Replace @{Attribute1LDAPDisplayName=value1, value2, ...;   Attribute2LDAPDisplayName=value1, value2, ...; AttributeNLDAPDisplayName=value1, value2, ...}`
        When you use the Add , Remove , Replace , and Clear parameters together, the operations will be performed in the following order:
        - Remove - Add - Replace - Clear
    .PARAMETER SamAccountName
        Specifies the Security Account Manager (SAM) account name of the user, group, computer, or service account. The maximum length of the description is 256 characters. To be compatible with older operating systems, create a SAM account name that is 20 characters or less. This parameter sets the SAMAccountName for an account object. The LDAP display name ( ldapDisplayName ) for this property is `sAMAccountName`.
        > [!NOTE] > If the string value provided is not terminated with a `$` character, the system adds one if > needed.
    .PARAMETER ScriptPath
        Specifies a path to the user's log on script. This value can be a local absolute path or a Universal Naming Convention (UNC) path. This parameter sets the ScriptPath property of the user. The LDAP display name ( ldapDisplayName ) for this property is scriptPath.
    .PARAMETER Server
        Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance.
        Specify the AD DS instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the AD DS Windows PowerShell provider drive, when   the cmdlet runs in that drive - By using the domain of the computer running Windows PowerShell
    .PARAMETER ServicePrincipalNames
        Specifies the service principal names for the account. This parameter sets the ServicePrincipalNames property of the account. The LDAP display name ( ldapDisplayName ) for this property is `servicePrincipalName`. This parameter uses the following syntax to add, remove, replace or clear service principal name values.
        Syntax:
        To add values:
        `-ServicePrincipalNames @{Add=value1,value2,...}`
        To remove values:
        `-ServicePrincipalNames @{Remove=value3,value4,...}`
        To replace values:
        `-ServicePrincipalNames @{Replace=value1,value2,...}`
        To clear all values:
        `-ServicePrincipalNames $null`
        You can specify more than one change by using a list separated by semicolons. For example, use the following syntax to add and remove service principal names.
        `@{Add=value1,value2,...};@{Remove=value3,value4,...}`
        The operators will be applied in the following sequence:
        - Remove
        - Add
        - Replace
        The following example shows how to add and remove service principal names.
        `-ServicePrincipalNames-@{Add="SQLservice\accounting.corp.contoso.com:1456"};{Remove="SQLservice\finance.corp.contoso.com:1456"}`
    .PARAMETER SmartcardLogonRequired
        Indicates whether a smart card is required to logon. This parameter sets the SmartCardLoginRequired property for a user. This parameter also sets the ADS_UF_SMARTCARD_REQUIRED flag of the Active Directory User Account Control attribute. The acceptable values for this parameter are:
        - $False or 0
        - $True or 1
    .PARAMETER State
        Specifies the user's state or province. This parameter sets the State property of a user object. The LDAP display name ( ldapDisplayName ) of this property is st.
    .PARAMETER StreetAddress
        Specifies the user's street address. This parameter sets the StreetAddress property of a user object. The LDAP display name ( ldapDisplayName ) of this property is streetAddress.
    .PARAMETER Surname
        Specifies the user's last name or surname. This parameter sets the Surname property of a user object. The LDAP display name ( ldapDisplayName ) of this property is sn.
    .PARAMETER Title
        Specifies the user's title. This parameter sets the Title property of a user object. The LDAP display name ( ldapDisplayName ) of this property is title.
    .PARAMETER TrustedForDelegation
        Specifies whether an account is trusted for Kerberos delegation. A service that runs under an account that is trusted for Kerberos delegation can assume the identity of a client requesting the service. This parameter sets the TrustedForDelegation property of an account object. This value also sets the ADS_UF_TRUSTED_FOR_DELEGATION flag of the Active Directory User Account Control attribute. The acceptable values for this parameter are:
        - `$False` or `0`
        - `$True` or `1`
    .PARAMETER UserPrincipalName
        Specifies a user principal name (UPN) in the format `<user>@<DNS-domain-name>`. A UPN is a friendly name assigned by an administrator that is shorter than the LDAP distinguished name used by the system and easier to remember. The UPN is independent of the user object's distinguished name, so a user object can be moved or renamed without affecting the user logon name. When logging on using a UPN, users don't have to choose a domain from a list on the logon dialog box.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301403')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AccountExpirationDate
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountExpirationDate", [System.Nullable`1[System.DateTime]], $attributes)
        $parameters.Add("AccountExpirationDate", $parameter)
        
        # AccountNotDelegated
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AccountNotDelegated", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("AccountNotDelegated", $parameter)
        
        # Add
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Add", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Add", $parameter)
        
        # AllowReversiblePasswordEncryption
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AllowReversiblePasswordEncryption", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("AllowReversiblePasswordEncryption", $parameter)
        
        # AuthenticationPolicy
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthenticationPolicy", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicy], $attributes)
        $parameters.Add("AuthenticationPolicy", $parameter)
        
        # AuthenticationPolicySilo
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthenticationPolicySilo", [Microsoft.ActiveDirectory.Management.ADAuthenticationPolicySilo], $attributes)
        $parameters.Add("AuthenticationPolicySilo", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # CannotChangePassword
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("CannotChangePassword", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("CannotChangePassword", $parameter)
        
        # Certificates
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateSetOperationsHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Certificates", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Certificates", $parameter)
        
        # ChangePasswordAtLogon
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ChangePasswordAtLogon", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("ChangePasswordAtLogon", $parameter)
        
        # City
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("City", [System.String], $attributes)
        $parameters.Add("City", $parameter)
        
        # Clear
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Clear", [System.String[]], $attributes)
        $parameters.Add("Clear", $parameter)
        
        # Company
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Company", [System.String], $attributes)
        $parameters.Add("Company", $parameter)
        
        # CompoundIdentitySupported
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("CompoundIdentitySupported", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("CompoundIdentitySupported", $parameter)
        
        # Country
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Country", [System.String], $attributes)
        $parameters.Add("Country", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Department
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Department", [System.String], $attributes)
        $parameters.Add("Department", $parameter)
        
        # Description
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Description", [System.String], $attributes)
        $parameters.Add("Description", $parameter)
        
        # DisplayName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("DisplayName", [System.String], $attributes)
        $parameters.Add("DisplayName", $parameter)
        
        # Division
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Division", [System.String], $attributes)
        $parameters.Add("Division", $parameter)
        
        # EmailAddress
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("EmailAddress", [System.String], $attributes)
        $parameters.Add("EmailAddress", $parameter)
        
        # EmployeeID
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("EmployeeID", [System.String], $attributes)
        $parameters.Add("EmployeeID", $parameter)
        
        # EmployeeNumber
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("EmployeeNumber", [System.String], $attributes)
        $parameters.Add("EmployeeNumber", $parameter)
        
        # Enabled
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Enabled", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("Enabled", $parameter)
        
        # Fax
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Fax", [System.String], $attributes)
        $parameters.Add("Fax", $parameter)
        
        # GivenName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("GivenName", [System.String], $attributes)
        $parameters.Add("GivenName", $parameter)
        
        # HomeDirectory
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("HomeDirectory", [System.String], $attributes)
        $parameters.Add("HomeDirectory", $parameter)
        
        # HomeDrive
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("HomeDrive", [System.String], $attributes)
        $parameters.Add("HomeDrive", $parameter)
        
        # HomePage
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("HomePage", [System.String], $attributes)
        $parameters.Add("HomePage", $parameter)
        
        # HomePhone
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("HomePhone", [System.String], $attributes)
        $parameters.Add("HomePhone", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADUser], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Initials
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Initials", [System.String], $attributes)
        $parameters.Add("Initials", $parameter)
        
        # Instance
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Instance", [Microsoft.ActiveDirectory.Management.ADUser], $attributes)
        $parameters.Add("Instance", $parameter)
        
        # KerberosEncryptionType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("KerberosEncryptionType", [Microsoft.ActiveDirectory.Management.ADKerberosEncryptionType], $attributes)
        $parameters.Add("KerberosEncryptionType", $parameter)
        
        # LogonWorkstations
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("LogonWorkstations", [System.String], $attributes)
        $parameters.Add("LogonWorkstations", $parameter)
        
        # Manager
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Manager", [Microsoft.ActiveDirectory.Management.ADUser], $attributes)
        $parameters.Add("Manager", $parameter)
        
        # MobilePhone
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("MobilePhone", [System.String], $attributes)
        $parameters.Add("MobilePhone", $parameter)
        
        # Office
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Office", [System.String], $attributes)
        $parameters.Add("Office", $parameter)
        
        # OfficePhone
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OfficePhone", [System.String], $attributes)
        $parameters.Add("OfficePhone", $parameter)
        
        # Organization
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Organization", [System.String], $attributes)
        $parameters.Add("Organization", $parameter)
        
        # OtherName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("OtherName", [System.String], $attributes)
        $parameters.Add("OtherName", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # PasswordNeverExpires
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PasswordNeverExpires", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("PasswordNeverExpires", $parameter)
        
        # PasswordNotRequired
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PasswordNotRequired", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("PasswordNotRequired", $parameter)
        
        # POBox
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("POBox", [System.String], $attributes)
        $parameters.Add("POBox", $parameter)
        
        # PostalCode
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PostalCode", [System.String], $attributes)
        $parameters.Add("PostalCode", $parameter)
        
        # PrincipalsAllowedToDelegateToAccount
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PrincipalsAllowedToDelegateToAccount", [Microsoft.ActiveDirectory.Management.ADPrincipal[]], $attributes)
        $parameters.Add("PrincipalsAllowedToDelegateToAccount", $parameter)
        
        # ProfilePath
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ProfilePath", [System.String], $attributes)
        $parameters.Add("ProfilePath", $parameter)
        
        # Remove
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Remove", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Remove", $parameter)
        
        # Replace
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateAttributeValueHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Replace", [System.Collections.Hashtable], $attributes)
        $parameters.Add("Replace", $parameter)
        
        # SamAccountName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Instance"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SamAccountName", [System.String], $attributes)
        $parameters.Add("SamAccountName", $parameter)
        
        # ScriptPath
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ScriptPath", [System.String], $attributes)
        $parameters.Add("ScriptPath", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # ServicePrincipalNames
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateSetOperationsHashtableAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ServicePrincipalNames", [System.Collections.Hashtable], $attributes)
        $parameters.Add("ServicePrincipalNames", $parameter)
        
        # SmartcardLogonRequired
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SmartcardLogonRequired", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("SmartcardLogonRequired", $parameter)
        
        # State
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("State", [System.String], $attributes)
        $parameters.Add("State", $parameter)
        
        # StreetAddress
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("StreetAddress", [System.String], $attributes)
        $parameters.Add("StreetAddress", $parameter)
        
        # Surname
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Surname", [System.String], $attributes)
        $parameters.Add("Surname", $parameter)
        
        # Title
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Title", [System.String], $attributes)
        $parameters.Add("Title", $parameter)
        
        # TrustedForDelegation
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("TrustedForDelegation", [System.Nullable`1[System.Boolean]], $attributes)
        $parameters.Add("TrustedForDelegation", $parameter)
        
        # UserPrincipalName
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Identity"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("UserPrincipalName", [System.String], $attributes)
        $parameters.Add("UserPrincipalName", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Show-ADAuthenticationPolicyExpression {
    <#
    .SYNOPSIS
        Displays the Edit Access Control Conditions window update or create security descriptor definition language (SDDL) security descriptors.
    .PARAMETER AllowedToAuthenticateFrom
        Indicates that the AllowedToAuthenticateFrom listings for an object are displayed in the Edit Access Control Conditions window.
    .PARAMETER AllowedToAuthenticateTo
        Indicates that the AllowedToAuthenticateTo listings for an object are displayed in the Edit Access Control Conditions window.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate. A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies a user account that has permission to perform the task. The default is the current user. Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential (https://go.microsoft.com/fwlink/?LinkID=293936)cmdlet.
        By default, the cmdlet uses the credentials of the currently logged on user unless the cmdlet is run from an Active Directory Domain Services Windows PowerShell provider drive. If you run the cmdlet in an Active Directory provider drive, the account associated with the drive is the default.
        If you specify credentials that do not have permission to perform the task, the cmdlet returns an error.
    .PARAMETER SDDL
        Specifies the SDDL of the security descriptor.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to which to connect, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - A fully qualified domain name
        - A NetBIOS name
        Directory server values:
        - A fully qualified directory server name
        - A NetBIOS name
        - A fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    .PARAMETER Title
        Specifies a title for the SDDL security descriptor.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=301418')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AllowedToAuthenticateFrom
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowedToAuthenticateFrom"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AllowedToAuthenticateFrom", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("AllowedToAuthenticateFrom", $parameter)
        
        # AllowedToAuthenticateTo
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "AllowedToAuthenticateTo"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AllowedToAuthenticateTo", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("AllowedToAuthenticateTo", $parameter)
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # SDDL
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("SDDL", [System.String], $attributes)
        $parameters.Add("SDDL", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        # Title
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Title", [System.String], $attributes)
        $parameters.Add("Title", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Sync-ADObject {
    <#
    .SYNOPSIS
        Replicates a single object between any two domain controllers that have partitions in common.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies a user account that has permission to perform this action. The default is the current user.
        Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential (https://go.microsoft.com/fwlink/?LinkID=293936)cmdlet. If you type a user name, you will be prompted for a password.
        This parameter is not supported by any providers installed with Windows PowerShell.
    .PARAMETER Destination
        Specifies the identity of the Active Directory server that acts as the destination for synchronizing this data. This parameter works similarly to the Server parameter as used on the Set-ADObject cmdlet with some restrictions. It does not allow domain or forest names to be used. Valid formats for specifying the destination server are:
        - Host name
        - Host name and port
        - Fully qualified directory server name and port
        - IP address
        - IP address and port
    .PARAMETER Object
        Specifies an Active Directory object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
        Derived types, such as the following, are also accepted:
        - Microsoft.ActiveDirectory.Management.ADGroup - Microsoft.ActiveDirectory.Management.ADUser - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADServiceAccount - Microsoft.ActiveDirectory.Management.ADOrganizationalUnit - Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy - Microsoft.ActiveDirectory.Management.ADDomain
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER PasswordOnly
        Indicates that this cmdlet populates a read-only domain controller (RODC) password cache with the password of the account specified in the Object parameter. If specified, no data other than the password is replicated.
    .PARAMETER Source
        Specifies the identity of the Active Directory server that acts as the source for synchronizing this data. This parameter works similarly to the Server parameter as used on the Set-ADObject cmdlet with some restrictions. You cannot use domain or forest names.
        Valid formats for specifying the destination server are the following:
        - Host name
        - Host name and port
        - Fully qualified directory server name and port
        - IP address
        - IP address and port
    #>
    
    [CmdletBinding(HelpUri='http://go.microsoft.com/fwlink/?LinkId=216426')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Destination
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 2
        $attribute.ParameterSetName = "Object"
        $attribute.Mandatory = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.AliasAttribute('Server', 'HostName', 'IPv4Address')
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Destination", [System.String], $attributes)
        $parameters.Add("Destination", $parameter)
        
        # Object
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Object"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Object", [Microsoft.ActiveDirectory.Management.ADObject], $attributes)
        $parameters.Add("Object", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # PasswordOnly
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.ParameterSetName = "Object"
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PasswordOnly", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PasswordOnly", $parameter)
        
        # Source
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 1
        $attribute.ParameterSetName = "Object"
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Source", [System.String], $attributes)
        $parameters.Add("Source", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Test-ADServiceAccount {
    <#
    .SYNOPSIS
        Tests a managed service account from a computer.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Identity
        Specifies an Active Directory managed service account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    #>
    
    [CmdletBinding(HelpUri='http://go.microsoft.com/fwlink/?LinkId=216559')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.ParameterSetName = "Identity"
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADServiceAccount], $attributes)
        $parameters.Add("Identity", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Uninstall-ADServiceAccount {
    <#
    .SYNOPSIS
        Uninstalls an Active Directory managed service account from a computer or removes a cached group managed service account from a computer.
    .PARAMETER AuthType
        Specifies the authentication method to use. The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER ForceRemoveLocal
        Indicates that you can remove the account from the local security authority (LSA) if there is no access to a writable domain controller. This is required if you are uninstalling the MSA from a server that is placed in a segmented network such as a perimeter network with access only to a read-only domain controller. If you specify this parameter and the server has access to a writable domain controller, the account is also un-linked from the computer account in the directory.
    .PARAMETER Identity
        Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are:
        - A Distinguished Name
        - A GUID (objectGUID)
        - A Security Identifier (objectSid)
        - A SAM Account Name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an object instance.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219359')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # ForceRemoveLocal
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("ForceRemoveLocal", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("ForceRemoveLocal", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object Microsoft.ActiveDirectory.Management.Commands.ValidateNotNullOrEmptyADEntityAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADServiceAccount], $attributes)
        $parameters.Add("Identity", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

function Unlock-ADAccount {
    <#
    .SYNOPSIS
        Unlocks an Active Directory account.
    .PARAMETER AuthType
        Specifies the authentication method to use.  The acceptable values for this parameter are:
        - Negotiate or 0
        - Basic or 1
        The default authentication method is Negotiate.
        A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.
    .PARAMETER Credential
        Specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default.
        To specify this parameter, you can type a user name, such as User1 or Domain01\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password.
        You can also create a PSCredential object by using a script or by using the Get-Credential (https://go.microsoft.com/fwlink/?LinkID=293936)cmdlet. You can then set the Credential parameter to the PSCredential object.
        If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.
    .PARAMETER Identity
        Specifies an Active Directory account object by providing one of the following property values. The identifier in parentheses is the Lightweight Directory Access Protocol (LDAP) display name for the attribute. The acceptable values for this parameter are:
        - A distinguished name
        - A GUID (objectGUID)
        - A security identifier (objectSid)
        - A SAM account name (sAMAccountName)
        The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error.
        This parameter can also get this object through the pipeline or you can set this parameter to an account object instance.
        Derived types such as the following are also accepted:
        - Microsoft.ActiveDirectory.Management.ADServiceAccount - Microsoft.ActiveDirectory.Management.ADComputer - Microsoft.ActiveDirectory.Management.ADUser
    .PARAMETER Partition
        Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter.
        In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated.
        In AD DS environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name. - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain.
        In AD LDS environments, a default value for Partition is set in the following cases:
        - If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.  - If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.  - If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object ( nTDSDSA ) for the AD LDS instance.  - If none of the previous cases apply, the Partition parameter will not take any default value.
    .PARAMETER PassThru
        Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.
    .PARAMETER Server
        Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory snapshot instance.
        Specify the Active Directory Domain Services instance in one of the following ways:
        Domain name values:
        - Fully qualified domain name
        - NetBIOS name
        Directory server values:
        - Fully qualified directory server name
        - NetBIOS name
        - Fully qualified directory server name and port
        The default value for this parameter is determined by one of the following methods in the order that they are listed:
        - By using the Server value from objects passed through the pipeline - By using the server information associated with the Active Directory Domain Services Windows PowerShell provider drive, when the cmdlet runs in that drive
        - By using the domain of the computer running Windows PowerShell
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', HelpUri='http://go.microsoft.com/fwlink/?LinkId=219360')]
    param ( )
    
    dynamicparam {
        $parameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        
        # AuthType
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("AuthType", [Microsoft.ActiveDirectory.Management.ADAuthType], $attributes)
        $parameters.Add("AuthType", $parameter)
        
        # Credential
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.CredentialAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Credential", [System.Management.Automation.PSCredential], $attributes)
        $parameters.Add("Credential", $parameter)
        
        # Identity
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attribute.Position = 0
        $attribute.Mandatory = $True
        $attribute.ValueFromPipeline = $True
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Identity", [Microsoft.ActiveDirectory.Management.ADAccount], $attributes)
        $parameters.Add("Identity", $parameter)
        
        # Partition
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Partition", [System.String], $attributes)
        $parameters.Add("Partition", $parameter)
        
        # PassThru
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("PassThru", [System.Management.Automation.SwitchParameter], $attributes)
        $parameters.Add("PassThru", $parameter)
        
        # Server
        $attributes = New-Object System.Collections.Generic.List[Attribute]
        
        $attribute = New-Object System.Management.Automation.ParameterAttribute
        $attributes.Add($attribute)
        
        $attribute = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute
        $attributes.Add($attribute)
        
        $parameter = New-Object System.Management.Automation.RuntimeDefinedParameter("Server", [System.String], $attributes)
        $parameters.Add("Server", $parameter)
        
        return $parameters
    }
    
    end {
        throw '{0}: StubNotImplemented' -f $MyInvocation.MyCommand
    }
}

